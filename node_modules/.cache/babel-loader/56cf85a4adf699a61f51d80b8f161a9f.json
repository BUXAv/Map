{"ast":null,"code":"var _dataProvider = require(\"../../data/helper/dataProvider\");\n\nvar retrieveRawValue = _dataProvider.retrieveRawValue;\n\nvar _format = require(\"../../util/format\");\n\nvar getTooltipMarker = _format.getTooltipMarker;\nvar formatTpl = _format.formatTpl;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g; // PENDING A little ugly\n\nvar _default = {\n  /**\n   * Get params for formatter\n   * @param {number} dataIndex\n   * @param {string} [dataType]\n   * @return {Object}\n   */\n  getDataParams: function (dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var color = data.getItemVisual(dataIndex, 'color');\n    return {\n      componentType: this.mainType,\n      componentSubType: this.subType,\n      seriesType: this.mainType === 'series' ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: this.id,\n      seriesName: this.name,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      marker: getTooltipMarker(color),\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  },\n\n  /**\n   * Format label\n   * @param {number} dataIndex\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @param {string} [dataType]\n   * @param {number} [dimIndex]\n   * @param {string} [labelProp='label']\n   * @return {string} If not formatter, return null/undefined\n   */\n  getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var itemModel = data.getItemModel(dataIndex);\n    var params = this.getDataParams(dataIndex, dataType);\n\n    if (dimIndex != null && params.value instanceof Array) {\n      params.value = params.value[dimIndex];\n    }\n\n    var formatter = itemModel.get(status === 'normal' ? [labelProp || 'label', 'formatter'] : [status, labelProp || 'label', 'formatter']);\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dim) {\n        var len = dim.length;\n\n        if (dim.charAt(0) === '[' && dim.charAt(len - 1) === ']') {\n          dim = +dim.slice(1, len - 1); // Also: '[]' => 0\n        }\n\n        return retrieveRawValue(data, dataIndex, dim);\n      });\n    }\n  },\n\n  /**\n   * Get raw value in option\n   * @param {number} idx\n   * @param {string} [dataType]\n   * @return {Array|number|string}\n   */\n  getRawValue: function (idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  },\n\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   * @return {string} tooltip string\n   */\n  formatTooltip: function () {// Empty function\n  }\n};\nmodule.exports = _default;","map":{"version":3,"names":["_dataProvider","require","retrieveRawValue","_format","getTooltipMarker","formatTpl","DIMENSION_LABEL_REG","_default","getDataParams","dataIndex","dataType","data","getData","rawValue","getRawValue","rawDataIndex","getRawIndex","name","getName","itemOpt","getRawDataItem","color","getItemVisual","componentType","mainType","componentSubType","subType","seriesType","seriesIndex","seriesId","id","seriesName","value","marker","$vars","getFormattedLabel","status","dimIndex","labelProp","itemModel","getItemModel","params","Array","formatter","get","str","replace","origin","dim","len","length","charAt","slice","idx","formatTooltip","module","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/model/mixin/dataFormat.js"],"sourcesContent":["var _dataProvider = require(\"../../data/helper/dataProvider\");\n\nvar retrieveRawValue = _dataProvider.retrieveRawValue;\n\nvar _format = require(\"../../util/format\");\n\nvar getTooltipMarker = _format.getTooltipMarker;\nvar formatTpl = _format.formatTpl;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g; // PENDING A little ugly\n\nvar _default = {\n  /**\n   * Get params for formatter\n   * @param {number} dataIndex\n   * @param {string} [dataType]\n   * @return {Object}\n   */\n  getDataParams: function (dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var color = data.getItemVisual(dataIndex, 'color');\n    return {\n      componentType: this.mainType,\n      componentSubType: this.subType,\n      seriesType: this.mainType === 'series' ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: this.id,\n      seriesName: this.name,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      marker: getTooltipMarker(color),\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  },\n\n  /**\n   * Format label\n   * @param {number} dataIndex\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @param {string} [dataType]\n   * @param {number} [dimIndex]\n   * @param {string} [labelProp='label']\n   * @return {string} If not formatter, return null/undefined\n   */\n  getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var itemModel = data.getItemModel(dataIndex);\n    var params = this.getDataParams(dataIndex, dataType);\n\n    if (dimIndex != null && params.value instanceof Array) {\n      params.value = params.value[dimIndex];\n    }\n\n    var formatter = itemModel.get(status === 'normal' ? [labelProp || 'label', 'formatter'] : [status, labelProp || 'label', 'formatter']);\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dim) {\n        var len = dim.length;\n\n        if (dim.charAt(0) === '[' && dim.charAt(len - 1) === ']') {\n          dim = +dim.slice(1, len - 1); // Also: '[]' => 0\n        }\n\n        return retrieveRawValue(data, dataIndex, dim);\n      });\n    }\n  },\n\n  /**\n   * Get raw value in option\n   * @param {number} idx\n   * @param {string} [dataType]\n   * @return {Array|number|string}\n   */\n  getRawValue: function (idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  },\n\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   * @return {string} tooltip string\n   */\n  formatTooltip: function () {// Empty function\n  }\n};\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}