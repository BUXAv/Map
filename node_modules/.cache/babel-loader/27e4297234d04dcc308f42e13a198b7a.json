{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar Region = require(\"./Region\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n * @module echarts/coord/geo/parseGeoJson\n */\n\n\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n\n  var encodeScale = json.UTF8Scale;\n\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n\n  var features = json.features;\n\n  for (var f = 0; f < features.length; f++) {\n    var feature = features[f];\n    var geometry = feature.geometry;\n    var coordinates = geometry.coordinates;\n    var encodeOffsets = geometry.encodeOffsets;\n\n    for (var c = 0; c < coordinates.length; c++) {\n      var coordinate = coordinates[c];\n\n      if (geometry.type === 'Polygon') {\n        coordinates[c] = decodePolygon(coordinate, encodeOffsets[c], encodeScale);\n      } else if (geometry.type === 'MultiPolygon') {\n        for (var c2 = 0; c2 < coordinate.length; c2++) {\n          var polygon = coordinate[c2];\n          coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2], encodeScale);\n        }\n      }\n    }\n  } // Has been decoded\n\n\n  json.UTF8Encoding = false;\n  return json;\n}\n\nfunction decodePolygon(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n\n  return result;\n}\n/**\n * @alias module:echarts/coord/geo/parseGeoJson\n * @param {Object} geoJson\n * @return {module:zrender/container/Group}\n */\n\n\nfunction _default(geoJson) {\n  decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var coordinates = geo.coordinates;\n    var geometries = [];\n\n    if (geo.type === 'Polygon') {\n      geometries.push({\n        type: 'polygon',\n        // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n        exterior: coordinates[0],\n        interiors: coordinates.slice(1)\n      });\n    }\n\n    if (geo.type === 'MultiPolygon') {\n      zrUtil.each(coordinates, function (item) {\n        if (item[0]) {\n          geometries.push({\n            type: 'polygon',\n            exterior: item[0],\n            interiors: item.slice(1)\n          });\n        }\n      });\n    }\n\n    var region = new Region(properties.name, geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}\n\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","Region","decode","json","UTF8Encoding","encodeScale","UTF8Scale","features","f","length","feature","geometry","coordinates","encodeOffsets","c","coordinate","type","decodePolygon","c2","polygon","result","prevX","prevY","i","x","charCodeAt","y","push","_default","geoJson","map","filter","featureObj","properties","geo","geometries","exterior","interiors","slice","each","item","region","name","cp","module","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/coord/geo/parseGeoJson.js"],"sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar Region = require(\"./Region\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n * @module echarts/coord/geo/parseGeoJson\n */\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n\n  var encodeScale = json.UTF8Scale;\n\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n\n  var features = json.features;\n\n  for (var f = 0; f < features.length; f++) {\n    var feature = features[f];\n    var geometry = feature.geometry;\n    var coordinates = geometry.coordinates;\n    var encodeOffsets = geometry.encodeOffsets;\n\n    for (var c = 0; c < coordinates.length; c++) {\n      var coordinate = coordinates[c];\n\n      if (geometry.type === 'Polygon') {\n        coordinates[c] = decodePolygon(coordinate, encodeOffsets[c], encodeScale);\n      } else if (geometry.type === 'MultiPolygon') {\n        for (var c2 = 0; c2 < coordinate.length; c2++) {\n          var polygon = coordinate[c2];\n          coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2], encodeScale);\n        }\n      }\n    }\n  } // Has been decoded\n\n\n  json.UTF8Encoding = false;\n  return json;\n}\n\nfunction decodePolygon(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n\n  return result;\n}\n/**\n * @alias module:echarts/coord/geo/parseGeoJson\n * @param {Object} geoJson\n * @return {module:zrender/container/Group}\n */\n\n\nfunction _default(geoJson) {\n  decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var coordinates = geo.coordinates;\n    var geometries = [];\n\n    if (geo.type === 'Polygon') {\n      geometries.push({\n        type: 'polygon',\n        // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n        exterior: coordinates[0],\n        interiors: coordinates.slice(1)\n      });\n    }\n\n    if (geo.type === 'MultiPolygon') {\n      zrUtil.each(coordinates, function (item) {\n        if (item[0]) {\n          geometries.push({\n            type: 'polygon',\n            exterior: item[0],\n            interiors: item.slice(1)\n          });\n        }\n      });\n    }\n\n    var region = new Region(properties.name, geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}