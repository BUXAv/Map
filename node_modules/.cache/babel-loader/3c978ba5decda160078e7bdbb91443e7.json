{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(axis) {\n  return axis.dim;\n}\n/**\n * @param {string} seriesType\n * @param {module:echarts/model/Global} ecModel\n * @param {module:echarts/ExtensionAPI} api\n */\n\n\nfunction barLayoutPolar(seriesType, ecModel, api) {\n  var width = api.getWidth();\n  var height = api.getHeight();\n  var lastStackCoords = {};\n  var barWidthAndOffset = calRadialBar(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {\n    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'polar';\n  }));\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for polar only\n    if (seriesModel.coordinateSystem.type !== 'polar') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = polar.getOtherAxis(baseAxis);\n    var center = seriesModel.get('center') || ['50%', '50%'];\n    var cx = parsePercent(center[0], width);\n    var cy = parsePercent(center[1], height);\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    var barMinAngle = seriesModel.get('barMinAngle') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var valueAxisStart = valueAxis.getExtent()[0];\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n\n      if (isNaN(value)) {\n        continue;\n      }\n\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n      // Only ordinal axis can be stacked.\n\n      if (stacked) {\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            // Positive stack\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var r0;\n      var r;\n      var startAngle;\n      var endAngle; // radial sector\n\n      if (valueAxis.dim === 'radius') {\n        var radiusSpan = valueAxis.dataToRadius(value) - valueAxisStart;\n        var angle = baseAxis.dataToAngle(baseValue);\n\n        if (Math.abs(radiusSpan) < barMinHeight) {\n          radiusSpan = (radiusSpan < 0 ? -1 : 1) * barMinHeight;\n        }\n\n        r0 = baseCoord;\n        r = baseCoord + radiusSpan;\n        startAngle = angle - columnOffset;\n        endAngle = startAngle - columnWidth;\n        stacked && (lastStackCoords[stackId][baseValue][sign] = r);\n      } // tangential sector\n      else {\n        // angleAxis must be clamped.\n        var angleSpan = valueAxis.dataToAngle(value, true) - valueAxisStart;\n        var radius = baseAxis.dataToRadius(baseValue);\n\n        if (Math.abs(angleSpan) < barMinAngle) {\n          angleSpan = (angleSpan < 0 ? -1 : 1) * barMinAngle;\n        }\n\n        r0 = radius + columnOffset;\n        r = r0 + columnWidth;\n        startAngle = baseCoord;\n        endAngle = baseCoord + angleSpan; // if the previous stack is at the end of the ring,\n        // add a round to differentiate it from origin\n        // var extent = angleAxis.getExtent();\n        // var stackCoord = angle;\n        // if (stackCoord === extent[0] && value > 0) {\n        //     stackCoord = extent[1];\n        // }\n        // else if (stackCoord === extent[1] && value < 0) {\n        //     stackCoord = extent[0];\n        // }\n\n        stacked && (lastStackCoords[stackId][baseValue][sign] = endAngle);\n      }\n\n      data.setItemLayout(idx, {\n        cx: cx,\n        cy: cy,\n        r0: r0,\n        r: r,\n        // Consider that positive angle is anti-clockwise,\n        // while positive radian of sector is clockwise\n        startAngle: -startAngle * Math.PI / 180,\n        endAngle: -endAngle * Math.PI / 180\n      });\n    }\n  }, this);\n}\n/**\n * Calculate bar width and offset for radial bar charts\n */\n\n\nfunction calRadialBar(barSeries, api) {\n  // Columns info on each category axis. Key is polar name\n  var columnsMap = {};\n  zrUtil.each(barSeries, function (seriesModel, idx) {\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;\n    var stackId = getSeriesStackId(seriesModel);\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    };\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n\n    if (barWidth && !stacks[stackId].width) {\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      stacks[stackId].width = barWidth;\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    barGap != null && (columnsOnAxis.gap = barGap);\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column, stack) {\n      var maxWidth = column.maxWidth;\n\n      if (maxWidth && maxWidth < autoWidth) {\n        maxWidth = Math.min(maxWidth, remainedWidth);\n\n        if (column.width) {\n          maxWidth = Math.min(maxWidth, column.width);\n        }\n\n        remainedWidth -= maxWidth;\n        column.width = maxWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n\nvar _default = barLayoutPolar;\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","_number","parsePercent","_dataStackHelper","isDimensionStacked","getSeriesStackId","seriesModel","get","seriesIndex","getAxisKey","axis","dim","barLayoutPolar","seriesType","ecModel","api","width","getWidth","height","getHeight","lastStackCoords","barWidthAndOffset","calRadialBar","filter","getSeriesByType","isSeriesFiltered","coordinateSystem","type","eachSeriesByType","data","getData","polar","baseAxis","getBaseAxis","stackId","columnLayoutInfo","columnOffset","offset","columnWidth","valueAxis","getOtherAxis","center","cx","cy","barMinHeight","barMinAngle","valueDim","mapDimension","baseDim","stacked","valueAxisStart","getExtent","idx","len","count","value","baseValue","isNaN","sign","baseCoord","p","n","r0","r","startAngle","endAngle","radiusSpan","dataToRadius","angle","dataToAngle","Math","abs","angleSpan","radius","setItemLayout","PI","barSeries","columnsMap","each","axisExtent","bandWidth","getBandWidth","columnsOnAxis","remainedWidth","autoWidthCount","categoryGap","gap","stacks","maxWidth","barWidth","barMaxWidth","barGap","barCategoryGap","min","result","coordSysName","barGapPercent","autoWidth","max","column","stack","widthSum","lastColumn","_default","module","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/layout/barPolar.js"],"sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(axis) {\n  return axis.dim;\n}\n/**\n * @param {string} seriesType\n * @param {module:echarts/model/Global} ecModel\n * @param {module:echarts/ExtensionAPI} api\n */\n\n\nfunction barLayoutPolar(seriesType, ecModel, api) {\n  var width = api.getWidth();\n  var height = api.getHeight();\n  var lastStackCoords = {};\n  var barWidthAndOffset = calRadialBar(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {\n    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'polar';\n  }));\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for polar only\n    if (seriesModel.coordinateSystem.type !== 'polar') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = polar.getOtherAxis(baseAxis);\n    var center = seriesModel.get('center') || ['50%', '50%'];\n    var cx = parsePercent(center[0], width);\n    var cy = parsePercent(center[1], height);\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    var barMinAngle = seriesModel.get('barMinAngle') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var valueAxisStart = valueAxis.getExtent()[0];\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n\n      if (isNaN(value)) {\n        continue;\n      }\n\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n      // Only ordinal axis can be stacked.\n\n      if (stacked) {\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            // Positive stack\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var r0;\n      var r;\n      var startAngle;\n      var endAngle; // radial sector\n\n      if (valueAxis.dim === 'radius') {\n        var radiusSpan = valueAxis.dataToRadius(value) - valueAxisStart;\n        var angle = baseAxis.dataToAngle(baseValue);\n\n        if (Math.abs(radiusSpan) < barMinHeight) {\n          radiusSpan = (radiusSpan < 0 ? -1 : 1) * barMinHeight;\n        }\n\n        r0 = baseCoord;\n        r = baseCoord + radiusSpan;\n        startAngle = angle - columnOffset;\n        endAngle = startAngle - columnWidth;\n        stacked && (lastStackCoords[stackId][baseValue][sign] = r);\n      } // tangential sector\n      else {\n          // angleAxis must be clamped.\n          var angleSpan = valueAxis.dataToAngle(value, true) - valueAxisStart;\n          var radius = baseAxis.dataToRadius(baseValue);\n\n          if (Math.abs(angleSpan) < barMinAngle) {\n            angleSpan = (angleSpan < 0 ? -1 : 1) * barMinAngle;\n          }\n\n          r0 = radius + columnOffset;\n          r = r0 + columnWidth;\n          startAngle = baseCoord;\n          endAngle = baseCoord + angleSpan; // if the previous stack is at the end of the ring,\n          // add a round to differentiate it from origin\n          // var extent = angleAxis.getExtent();\n          // var stackCoord = angle;\n          // if (stackCoord === extent[0] && value > 0) {\n          //     stackCoord = extent[1];\n          // }\n          // else if (stackCoord === extent[1] && value < 0) {\n          //     stackCoord = extent[0];\n          // }\n\n          stacked && (lastStackCoords[stackId][baseValue][sign] = endAngle);\n        }\n\n      data.setItemLayout(idx, {\n        cx: cx,\n        cy: cy,\n        r0: r0,\n        r: r,\n        // Consider that positive angle is anti-clockwise,\n        // while positive radian of sector is clockwise\n        startAngle: -startAngle * Math.PI / 180,\n        endAngle: -endAngle * Math.PI / 180\n      });\n    }\n  }, this);\n}\n/**\n * Calculate bar width and offset for radial bar charts\n */\n\n\nfunction calRadialBar(barSeries, api) {\n  // Columns info on each category axis. Key is polar name\n  var columnsMap = {};\n  zrUtil.each(barSeries, function (seriesModel, idx) {\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;\n    var stackId = getSeriesStackId(seriesModel);\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    };\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n\n    if (barWidth && !stacks[stackId].width) {\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      stacks[stackId].width = barWidth;\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    barGap != null && (columnsOnAxis.gap = barGap);\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column, stack) {\n      var maxWidth = column.maxWidth;\n\n      if (maxWidth && maxWidth < autoWidth) {\n        maxWidth = Math.min(maxWidth, remainedWidth);\n\n        if (column.width) {\n          maxWidth = Math.min(maxWidth, column.width);\n        }\n\n        remainedWidth -= maxWidth;\n        column.width = maxWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n\nvar _default = barLayoutPolar;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}