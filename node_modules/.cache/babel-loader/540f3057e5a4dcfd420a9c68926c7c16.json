{"ast":null,"code":"var layout = require(\"../../util/layout\");\n\nvar nest = require(\"../../util/array/nest\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file The layout algorithm of sankey view\n * @author Deqing Li(annong035@gmail.com)\n */\n\nfunction _default(ecModel, api, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var layoutInfo = getViewRect(seriesModel, api);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);\n  });\n}\n/**\n * Get the layout position of the whole view\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width);\n  computeNodeDepths(nodes, edges, height, nodeGap, iterations);\n  computeEdgeDepths(nodes);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var value = Math.max(value1, value2);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n * \n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param  {number} nodeWidth  the dx of the node\n * @param  {number} width  the whole width of the area to draw the view\n */\n\n\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = []; // Storage each node's indegree.\n\n  var indegreeArr = []; //Used to storage the node with indegree is equal to 0.\n\n  var zeroIndegrees = [];\n  var nextNode = [];\n  var x = 0;\n  var kx = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n\n  while (zeroIndegrees.length) {\n    zrUtil.each(zeroIndegrees, function (node) {\n      node.setLayout({\n        x: x\n      }, true);\n      node.setLayout({\n        dx: nodeWidth\n      }, true);\n      zrUtil.each(node.outEdges, function (edge) {\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n\n        if (--indegreeArr[nodeIndex] === 0) {\n          nextNode.push(targetNode);\n        }\n      });\n    });\n    ++x;\n    zeroIndegrees = nextNode;\n    nextNode = [];\n  }\n\n  for (var i = 0; i < remainEdges.length; i++) {}\n\n  moveSinksRight(nodes, x);\n  kx = (width - nodeWidth) / (x - 1);\n  scaleNodeBreadths(nodes, kx);\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} x  value (x-1) use to assign to node without outEdges\n *     as x-position\n */\n\n\nfunction moveSinksRight(nodes, x) {\n  zrUtil.each(nodes, function (node) {\n    if (!node.outEdges.length) {\n      node.setLayout({\n        x: x - 1\n      }, true);\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} kx   multiple used to scale nodes\n */\n\n\nfunction scaleNodeBreadths(nodes, kx) {\n  zrUtil.each(nodes, function (node) {\n    var nodeX = node.getLayout().x * kx;\n    node.setLayout({\n      x: nodeX\n    }, true);\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param {number} iterations  the number of iterations for the algorithm\n */\n\n\nfunction computeNodeDepths(nodes, edges, height, nodeGap, iterations) {\n  var nodesByBreadth = nest().key(function (d) {\n    return d.getLayout().x;\n  }).sortKeys(ascending).entries(nodes).map(function (d) {\n    return d.values;\n  });\n  initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);\n  resolveCollisions(nodesByBreadth, nodeGap, height);\n\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha);\n    resolveCollisions(nodesByBreadth, nodeGap, height);\n    relaxLeftToRight(nodesByBreadth, alpha);\n    resolveCollisions(nodesByBreadth, nodeGap, height);\n  }\n}\n/**\n * Compute the original y-position for each node\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n */\n\n\nfunction initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {\n  var kyArray = [];\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n    var ky = (height - (n - 1) * nodeGap) / sum;\n    kyArray.push(ky);\n  });\n  kyArray.sort(function (a, b) {\n    return a - b;\n  });\n  var ky0 = kyArray[0];\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      node.setLayout({\n        y: i\n      }, true);\n      var nodeDy = node.getLayout().value * ky0;\n      node.setLayout({\n        dy: nodeDy\n      }, true);\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * ky0;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {number} nodeGap  the vertical distance between two nodes\n * @param {number} height  the whole height of the area to draw the view\n */\n\n\nfunction resolveCollisions(nodesByBreadth, nodeGap, height) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var i;\n    nodes.sort(ascendingDepth);\n\n    for (i = 0; i < n; i++) {\n      node = nodes[i];\n      dy = y0 - node.getLayout().y;\n\n      if (dy > 0) {\n        var nodeY = node.getLayout().y + dy;\n        node.setLayout({\n          y: nodeY\n        }, true);\n      }\n\n      y0 = node.getLayout().y + node.getLayout().dy + nodeGap;\n    } // If the bottommost node goes outside the bounds, push it back up\n\n\n    dy = y0 - nodeGap - height;\n\n    if (dy > 0) {\n      var nodeY = node.getLayout().y - dy;\n      node.setLayout({\n        y: nodeY\n      }, true);\n      y0 = node.getLayout().y;\n\n      for (i = n - 2; i >= 0; --i) {\n        node = nodes[i];\n        dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;\n\n        if (dy > 0) {\n          nodeY = node.getLayout().y - dy;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n\n        y0 = node.getLayout().y;\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxRightToLeft(nodesByBreadth, alpha) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);\n        var nodeY = node.getLayout().y + (y - center(node)) * alpha;\n        node.setLayout({\n          y: nodeY\n        }, true);\n      }\n    });\n  });\n}\n\nfunction weightedTarget(edge) {\n  return center(edge.node2) * edge.getValue();\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxLeftToRight(nodesByBreadth, alpha) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);\n        var nodeY = node.getLayout().y + (y - center(node)) * alpha;\n        node.setLayout({\n          y: nodeY\n        }, true);\n      }\n    });\n  });\n}\n\nfunction weightedSource(edge) {\n  return center(edge.node1) * edge.getValue();\n}\n/**\n * Compute the depth(y-position) of each edge\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeEdgeDepths(nodes) {\n  zrUtil.each(nodes, function (node) {\n    node.outEdges.sort(ascendingTargetDepth);\n    node.inEdges.sort(ascendingSourceDepth);\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}\n\nfunction ascendingTargetDepth(a, b) {\n  return a.node2.getLayout().y - b.node2.getLayout().y;\n}\n\nfunction ascendingSourceDepth(a, b) {\n  return a.node1.getLayout().y - b.node1.getLayout().y;\n}\n\nfunction sum(array, f) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n\n  while (++i < len) {\n    var value = +f.call(array, array[i], i);\n\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n\n  return sum;\n}\n\nfunction center(node) {\n  return node.getLayout().y + node.getLayout().dy / 2;\n}\n\nfunction ascendingDepth(a, b) {\n  return a.getLayout().y - b.getLayout().y;\n}\n\nfunction ascending(a, b) {\n  return a - b;\n}\n\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\n\nmodule.exports = _default;","map":{"version":3,"names":["layout","require","nest","zrUtil","_config","__DEV__","_default","ecModel","api","payload","eachSeriesByType","seriesModel","nodeWidth","get","nodeGap","layoutInfo","getViewRect","width","height","graph","getGraph","nodes","edges","computeNodeValues","filteredNodes","filter","node","getLayout","value","iterations","length","layoutSankey","getLayoutRect","getBoxLayoutParams","getWidth","getHeight","computeNodeBreadths","computeNodeDepths","computeEdgeDepths","each","value1","sum","outEdges","getEdgeValue","value2","inEdges","Math","max","setLayout","remainEdges","indegreeArr","zeroIndegrees","nextNode","x","kx","i","push","dx","edge","indexEdge","indexOf","targetNode","node2","nodeIndex","moveSinksRight","scaleNodeBreadths","nodeX","nodesByBreadth","key","d","sortKeys","ascending","entries","map","values","initializeNodeDepth","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","kyArray","n","ky","sort","a","b","ky0","y","nodeDy","dy","edgeDy","getValue","y0","ascendingDepth","nodeY","slice","reverse","weightedTarget","center","weightedSource","node1","ascendingTargetDepth","ascendingSourceDepth","sy","ty","array","f","len","call","isNaN","module","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/chart/sankey/sankeyLayout.js"],"sourcesContent":["var layout = require(\"../../util/layout\");\n\nvar nest = require(\"../../util/array/nest\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file The layout algorithm of sankey view\n * @author Deqing Li(annong035@gmail.com)\n */\nfunction _default(ecModel, api, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var layoutInfo = getViewRect(seriesModel, api);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);\n  });\n}\n/**\n * Get the layout position of the whole view\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width);\n  computeNodeDepths(nodes, edges, height, nodeGap, iterations);\n  computeEdgeDepths(nodes);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var value = Math.max(value1, value2);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n * \n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param  {number} nodeWidth  the dx of the node\n * @param  {number} width  the whole width of the area to draw the view\n */\n\n\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = []; // Storage each node's indegree.\n\n  var indegreeArr = []; //Used to storage the node with indegree is equal to 0.\n\n  var zeroIndegrees = [];\n  var nextNode = [];\n  var x = 0;\n  var kx = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n\n  while (zeroIndegrees.length) {\n    zrUtil.each(zeroIndegrees, function (node) {\n      node.setLayout({\n        x: x\n      }, true);\n      node.setLayout({\n        dx: nodeWidth\n      }, true);\n      zrUtil.each(node.outEdges, function (edge) {\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n\n        if (--indegreeArr[nodeIndex] === 0) {\n          nextNode.push(targetNode);\n        }\n      });\n    });\n    ++x;\n    zeroIndegrees = nextNode;\n    nextNode = [];\n  }\n\n  for (var i = 0; i < remainEdges.length; i++) {}\n\n  moveSinksRight(nodes, x);\n  kx = (width - nodeWidth) / (x - 1);\n  scaleNodeBreadths(nodes, kx);\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} x  value (x-1) use to assign to node without outEdges\n *     as x-position\n */\n\n\nfunction moveSinksRight(nodes, x) {\n  zrUtil.each(nodes, function (node) {\n    if (!node.outEdges.length) {\n      node.setLayout({\n        x: x - 1\n      }, true);\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} kx   multiple used to scale nodes\n */\n\n\nfunction scaleNodeBreadths(nodes, kx) {\n  zrUtil.each(nodes, function (node) {\n    var nodeX = node.getLayout().x * kx;\n    node.setLayout({\n      x: nodeX\n    }, true);\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param {number} iterations  the number of iterations for the algorithm\n */\n\n\nfunction computeNodeDepths(nodes, edges, height, nodeGap, iterations) {\n  var nodesByBreadth = nest().key(function (d) {\n    return d.getLayout().x;\n  }).sortKeys(ascending).entries(nodes).map(function (d) {\n    return d.values;\n  });\n  initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);\n  resolveCollisions(nodesByBreadth, nodeGap, height);\n\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha);\n    resolveCollisions(nodesByBreadth, nodeGap, height);\n    relaxLeftToRight(nodesByBreadth, alpha);\n    resolveCollisions(nodesByBreadth, nodeGap, height);\n  }\n}\n/**\n * Compute the original y-position for each node\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n */\n\n\nfunction initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {\n  var kyArray = [];\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n    var ky = (height - (n - 1) * nodeGap) / sum;\n    kyArray.push(ky);\n  });\n  kyArray.sort(function (a, b) {\n    return a - b;\n  });\n  var ky0 = kyArray[0];\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      node.setLayout({\n        y: i\n      }, true);\n      var nodeDy = node.getLayout().value * ky0;\n      node.setLayout({\n        dy: nodeDy\n      }, true);\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * ky0;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {number} nodeGap  the vertical distance between two nodes\n * @param {number} height  the whole height of the area to draw the view\n */\n\n\nfunction resolveCollisions(nodesByBreadth, nodeGap, height) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var i;\n    nodes.sort(ascendingDepth);\n\n    for (i = 0; i < n; i++) {\n      node = nodes[i];\n      dy = y0 - node.getLayout().y;\n\n      if (dy > 0) {\n        var nodeY = node.getLayout().y + dy;\n        node.setLayout({\n          y: nodeY\n        }, true);\n      }\n\n      y0 = node.getLayout().y + node.getLayout().dy + nodeGap;\n    } // If the bottommost node goes outside the bounds, push it back up\n\n\n    dy = y0 - nodeGap - height;\n\n    if (dy > 0) {\n      var nodeY = node.getLayout().y - dy;\n      node.setLayout({\n        y: nodeY\n      }, true);\n      y0 = node.getLayout().y;\n\n      for (i = n - 2; i >= 0; --i) {\n        node = nodes[i];\n        dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;\n\n        if (dy > 0) {\n          nodeY = node.getLayout().y - dy;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n\n        y0 = node.getLayout().y;\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxRightToLeft(nodesByBreadth, alpha) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);\n        var nodeY = node.getLayout().y + (y - center(node)) * alpha;\n        node.setLayout({\n          y: nodeY\n        }, true);\n      }\n    });\n  });\n}\n\nfunction weightedTarget(edge) {\n  return center(edge.node2) * edge.getValue();\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxLeftToRight(nodesByBreadth, alpha) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);\n        var nodeY = node.getLayout().y + (y - center(node)) * alpha;\n        node.setLayout({\n          y: nodeY\n        }, true);\n      }\n    });\n  });\n}\n\nfunction weightedSource(edge) {\n  return center(edge.node1) * edge.getValue();\n}\n/**\n * Compute the depth(y-position) of each edge\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeEdgeDepths(nodes) {\n  zrUtil.each(nodes, function (node) {\n    node.outEdges.sort(ascendingTargetDepth);\n    node.inEdges.sort(ascendingSourceDepth);\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}\n\nfunction ascendingTargetDepth(a, b) {\n  return a.node2.getLayout().y - b.node2.getLayout().y;\n}\n\nfunction ascendingSourceDepth(a, b) {\n  return a.node1.getLayout().y - b.node1.getLayout().y;\n}\n\nfunction sum(array, f) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n\n  while (++i < len) {\n    var value = +f.call(array, array[i], i);\n\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n\n  return sum;\n}\n\nfunction center(node) {\n  return node.getLayout().y + node.getLayout().dy / 2;\n}\n\nfunction ascendingDepth(a, b) {\n  return a.getLayout().y - b.getLayout().y;\n}\n\nfunction ascending(a, b) {\n  return a - b;\n}\n\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}