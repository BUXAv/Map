{"ast":null,"code":"var _config = require(\"./config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrender = require(\"zrender/lib/zrender\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar colorTool = require(\"zrender/lib/tool/color\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar timsort = require(\"zrender/lib/core/timsort\");\n\nvar Eventful = require(\"zrender/lib/mixin/Eventful\");\n\nvar GlobalModel = require(\"./model/Global\");\n\nvar ExtensionAPI = require(\"./ExtensionAPI\");\n\nvar CoordinateSystemManager = require(\"./CoordinateSystem\");\n\nvar OptionManager = require(\"./model/OptionManager\");\n\nvar backwardCompat = require(\"./preprocessor/backwardCompat\");\n\nvar dataStack = require(\"./processor/dataStack\");\n\nvar ComponentModel = require(\"./model/Component\");\n\nvar SeriesModel = require(\"./model/Series\");\n\nvar ComponentView = require(\"./view/Component\");\n\nvar ChartView = require(\"./view/Chart\");\n\nvar graphic = require(\"./util/graphic\");\n\nvar modelUtil = require(\"./util/model\");\n\nvar _throttle = require(\"./util/throttle\");\n\nvar throttle = _throttle.throttle;\n\nvar seriesColor = require(\"./visual/seriesColor\");\n\nvar aria = require(\"./visual/aria\");\n\nvar loadingDefault = require(\"./loading/default\");\n\nvar Scheduler = require(\"./stream/Scheduler\");\n\nvar lightTheme = require(\"./theme/light\");\n\nvar darkTheme = require(\"./theme/dark\");\n\nrequire(\"./component/dataset\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar assert = zrUtil.assert;\nvar each = zrUtil.each;\nvar isFunction = zrUtil.isFunction;\nvar isObject = zrUtil.isObject;\nvar parseClassType = ComponentModel.parseClassType;\nvar version = '4.1.0';\nvar dependencies = {\n  zrender: '4.0.4'\n};\nvar TEST_FRAME_REMAIN_TIME = 1;\nvar PRIORITY_PROCESSOR_FILTER = 1000;\nvar PRIORITY_PROCESSOR_STATISTIC = 5000;\nvar PRIORITY_VISUAL_LAYOUT = 1000;\nvar PRIORITY_VISUAL_GLOBAL = 2000;\nvar PRIORITY_VISUAL_CHART = 3000;\nvar PRIORITY_VISUAL_COMPONENT = 4000; // FIXME\n// necessary?\n\nvar PRIORITY_VISUAL_BRUSH = 5000;\nvar PRIORITY = {\n  PROCESSOR: {\n    FILTER: PRIORITY_PROCESSOR_FILTER,\n    STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n  },\n  VISUAL: {\n    LAYOUT: PRIORITY_VISUAL_LAYOUT,\n    GLOBAL: PRIORITY_VISUAL_GLOBAL,\n    CHART: PRIORITY_VISUAL_CHART,\n    COMPONENT: PRIORITY_VISUAL_COMPONENT,\n    BRUSH: PRIORITY_VISUAL_BRUSH\n  }\n}; // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n// where they must not be invoked nestedly, except the only case: invoke\n// dispatchAction with updateMethod \"none\" in main process.\n// This flag is used to carry out this rule.\n// All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n\nvar IN_MAIN_PROCESS = '__flagInMainProcess';\nvar OPTION_UPDATED = '__optionUpdated';\nvar ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\nfunction createRegisterEventWithLowercaseName(method) {\n  return function (eventName, handler, context) {\n    // Event name is all lowercase\n    eventName = eventName && eventName.toLowerCase();\n    Eventful.prototype[method].call(this, eventName, handler, context);\n  };\n}\n/**\n * @module echarts~MessageCenter\n */\n\n\nfunction MessageCenter() {\n  Eventful.call(this);\n}\n\nMessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\nMessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\nMessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\nzrUtil.mixin(MessageCenter, Eventful);\n/**\n * @module echarts~ECharts\n */\n\nfunction ECharts(dom, theme, opts) {\n  opts = opts || {}; // Get theme by name\n\n  if (typeof theme === 'string') {\n    theme = themeStorage[theme];\n  }\n  /**\n   * @type {string}\n   */\n\n\n  this.id;\n  /**\n   * Group id\n   * @type {string}\n   */\n\n  this.group;\n  /**\n   * @type {HTMLElement}\n   * @private\n   */\n\n  this._dom = dom;\n  var defaultRenderer = 'canvas';\n  /**\n   * @type {module:zrender/ZRender}\n   * @private\n   */\n\n  var zr = this._zr = zrender.init(dom, {\n    renderer: opts.renderer || defaultRenderer,\n    devicePixelRatio: opts.devicePixelRatio,\n    width: opts.width,\n    height: opts.height\n  });\n  /**\n   * Expect 60 pfs.\n   * @type {Function}\n   * @private\n   */\n\n  this._throttledZrFlush = throttle(zrUtil.bind(zr.flush, zr), 17);\n  var theme = zrUtil.clone(theme);\n  theme && backwardCompat(theme, true);\n  /**\n   * @type {Object}\n   * @private\n   */\n\n  this._theme = theme;\n  /**\n   * @type {Array.<module:echarts/view/Chart>}\n   * @private\n   */\n\n  this._chartsViews = [];\n  /**\n   * @type {Object.<string, module:echarts/view/Chart>}\n   * @private\n   */\n\n  this._chartsMap = {};\n  /**\n   * @type {Array.<module:echarts/view/Component>}\n   * @private\n   */\n\n  this._componentsViews = [];\n  /**\n   * @type {Object.<string, module:echarts/view/Component>}\n   * @private\n   */\n\n  this._componentsMap = {};\n  /**\n   * @type {module:echarts/CoordinateSystem}\n   * @private\n   */\n\n  this._coordSysMgr = new CoordinateSystemManager();\n  /**\n   * @type {module:echarts/ExtensionAPI}\n   * @private\n   */\n\n  var api = this._api = createExtensionAPI(this); // Sort on demand\n\n  function prioritySortFunc(a, b) {\n    return a.__prio - b.__prio;\n  }\n\n  timsort(visualFuncs, prioritySortFunc);\n  timsort(dataProcessorFuncs, prioritySortFunc);\n  /**\n   * @type {module:echarts/stream/Scheduler}\n   */\n\n  this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);\n  Eventful.call(this);\n  /**\n   * @type {module:echarts~MessageCenter}\n   * @private\n   */\n\n  this._messageCenter = new MessageCenter(); // Init mouse events\n\n  this._initEvents(); // In case some people write `window.onresize = chart.resize`\n\n\n  this.resize = zrUtil.bind(this.resize, this); // Can't dispatch action during rendering procedure\n\n  this._pendingActions = [];\n  zr.animation.on('frame', this._onframe, this);\n  bindRenderedEvent(zr, this); // ECharts instance can be used as value.\n\n  zrUtil.setAsPrimitive(this);\n}\n\nvar echartsProto = ECharts.prototype;\n\nechartsProto._onframe = function () {\n  if (this._disposed) {\n    return;\n  }\n\n  var scheduler = this._scheduler; // Lazy update\n\n  if (this[OPTION_UPDATED]) {\n    var silent = this[OPTION_UPDATED].silent;\n    this[IN_MAIN_PROCESS] = true;\n    prepare(this);\n    updateMethods.update.call(this);\n    this[IN_MAIN_PROCESS] = false;\n    this[OPTION_UPDATED] = false;\n    flushPendingActions.call(this, silent);\n    triggerUpdatedEvent.call(this, silent);\n  } // Avoid do both lazy update and progress in one frame.\n  else if (scheduler.unfinished) {\n    // Stream progress.\n    var remainTime = TEST_FRAME_REMAIN_TIME;\n    var ecModel = this._model;\n    var api = this._api;\n    scheduler.unfinished = false;\n\n    do {\n      var startTime = +new Date();\n      scheduler.performSeriesTasks(ecModel); // Currently dataProcessorFuncs do not check threshold.\n\n      scheduler.performDataProcessorTasks(ecModel);\n      updateStreamModes(this, ecModel); // Do not update coordinate system here. Because that coord system update in\n      // each frame is not a good user experience. So we follow the rule that\n      // the extent of the coordinate system is determin in the first frame (the\n      // frame is executed immedietely after task reset.\n      // this._coordSysMgr.update(ecModel, api);\n      // console.log('--- ec frame visual ---', remainTime);\n\n      scheduler.performVisualTasks(ecModel);\n      renderSeries(this, this._model, api, 'remain');\n      remainTime -= +new Date() - startTime;\n    } while (remainTime > 0 && scheduler.unfinished); // Call flush explicitly for trigger finished event.\n\n\n    if (!scheduler.unfinished) {\n      this._zr.flush();\n    } // Else, zr flushing be ensue within the same frame,\n    // because zr flushing is after onframe event.\n\n  }\n};\n/**\n * @return {HTMLElement}\n */\n\n\nechartsProto.getDom = function () {\n  return this._dom;\n};\n/**\n * @return {module:zrender~ZRender}\n */\n\n\nechartsProto.getZr = function () {\n  return this._zr;\n};\n/**\n * Usage:\n * chart.setOption(option, notMerge, lazyUpdate);\n * chart.setOption(option, {\n *     notMerge: ...,\n *     lazyUpdate: ...,\n *     silent: ...\n * });\n *\n * @param {Object} option\n * @param {Object|boolean} [opts] opts or notMerge.\n * @param {boolean} [opts.notMerge=false]\n * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n */\n\n\nechartsProto.setOption = function (option, notMerge, lazyUpdate) {\n  var silent;\n\n  if (isObject(notMerge)) {\n    lazyUpdate = notMerge.lazyUpdate;\n    silent = notMerge.silent;\n    notMerge = notMerge.notMerge;\n  }\n\n  this[IN_MAIN_PROCESS] = true;\n\n  if (!this._model || notMerge) {\n    var optionManager = new OptionManager(this._api);\n    var theme = this._theme;\n    var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\n    ecModel.scheduler = this._scheduler;\n    ecModel.init(null, null, theme, optionManager);\n  }\n\n  this._model.setOption(option, optionPreprocessorFuncs);\n\n  if (lazyUpdate) {\n    this[OPTION_UPDATED] = {\n      silent: silent\n    };\n    this[IN_MAIN_PROCESS] = false;\n  } else {\n    prepare(this);\n    updateMethods.update.call(this); // Ensure zr refresh sychronously, and then pixel in canvas can be\n    // fetched after `setOption`.\n\n    this._zr.flush();\n\n    this[OPTION_UPDATED] = false;\n    this[IN_MAIN_PROCESS] = false;\n    flushPendingActions.call(this, silent);\n    triggerUpdatedEvent.call(this, silent);\n  }\n};\n/**\n * @DEPRECATED\n */\n\n\nechartsProto.setTheme = function () {\n  console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n};\n/**\n * @return {module:echarts/model/Global}\n */\n\n\nechartsProto.getModel = function () {\n  return this._model;\n};\n/**\n * @return {Object}\n */\n\n\nechartsProto.getOption = function () {\n  return this._model && this._model.getOption();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getWidth = function () {\n  return this._zr.getWidth();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getHeight = function () {\n  return this._zr.getHeight();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getDevicePixelRatio = function () {\n  return this._zr.painter.dpr || window.devicePixelRatio || 1;\n};\n/**\n * Get canvas which has all thing rendered\n * @param {Object} opts\n * @param {string} [opts.backgroundColor]\n * @return {string}\n */\n\n\nechartsProto.getRenderedCanvas = function (opts) {\n  if (!env.canvasSupported) {\n    return;\n  }\n\n  opts = opts || {};\n  opts.pixelRatio = opts.pixelRatio || 1;\n  opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');\n  var zr = this._zr; // var list = zr.storage.getDisplayList();\n  // Stop animations\n  // Never works before in init animation, so remove it.\n  // zrUtil.each(list, function (el) {\n  //     el.stopAnimation(true);\n  // });\n\n  return zr.painter.getRenderedCanvas(opts);\n};\n/**\n * Get svg data url\n * @return {string}\n */\n\n\nechartsProto.getSvgDataUrl = function () {\n  if (!env.svgSupported) {\n    return;\n  }\n\n  var zr = this._zr;\n  var list = zr.storage.getDisplayList(); // Stop animations\n\n  zrUtil.each(list, function (el) {\n    el.stopAnimation(true);\n  });\n  return zr.painter.pathToDataUrl();\n};\n/**\n * @return {string}\n * @param {Object} opts\n * @param {string} [opts.type='png']\n * @param {string} [opts.pixelRatio=1]\n * @param {string} [opts.backgroundColor]\n * @param {string} [opts.excludeComponents]\n */\n\n\nechartsProto.getDataURL = function (opts) {\n  opts = opts || {};\n  var excludeComponents = opts.excludeComponents;\n  var ecModel = this._model;\n  var excludesComponentViews = [];\n  var self = this;\n  each(excludeComponents, function (componentType) {\n    ecModel.eachComponent({\n      mainType: componentType\n    }, function (component) {\n      var view = self._componentsMap[component.__viewId];\n\n      if (!view.group.ignore) {\n        excludesComponentViews.push(view);\n        view.group.ignore = true;\n      }\n    });\n  });\n  var url = this._zr.painter.getType() === 'svg' ? this.getSvgDataUrl() : this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));\n  each(excludesComponentViews, function (view) {\n    view.group.ignore = false;\n  });\n  return url;\n};\n/**\n * @return {string}\n * @param {Object} opts\n * @param {string} [opts.type='png']\n * @param {string} [opts.pixelRatio=1]\n * @param {string} [opts.backgroundColor]\n */\n\n\nechartsProto.getConnectedDataURL = function (opts) {\n  if (!env.canvasSupported) {\n    return;\n  }\n\n  var groupId = this.group;\n  var mathMin = Math.min;\n  var mathMax = Math.max;\n  var MAX_NUMBER = Infinity;\n\n  if (connectedGroups[groupId]) {\n    var left = MAX_NUMBER;\n    var top = MAX_NUMBER;\n    var right = -MAX_NUMBER;\n    var bottom = -MAX_NUMBER;\n    var canvasList = [];\n    var dpr = opts && opts.pixelRatio || 1;\n    zrUtil.each(instances, function (chart, id) {\n      if (chart.group === groupId) {\n        var canvas = chart.getRenderedCanvas(zrUtil.clone(opts));\n        var boundingRect = chart.getDom().getBoundingClientRect();\n        left = mathMin(boundingRect.left, left);\n        top = mathMin(boundingRect.top, top);\n        right = mathMax(boundingRect.right, right);\n        bottom = mathMax(boundingRect.bottom, bottom);\n        canvasList.push({\n          dom: canvas,\n          left: boundingRect.left,\n          top: boundingRect.top\n        });\n      }\n    });\n    left *= dpr;\n    top *= dpr;\n    right *= dpr;\n    bottom *= dpr;\n    var width = right - left;\n    var height = bottom - top;\n    var targetCanvas = zrUtil.createCanvas();\n    targetCanvas.width = width;\n    targetCanvas.height = height;\n    var zr = zrender.init(targetCanvas);\n    each(canvasList, function (item) {\n      var img = new graphic.Image({\n        style: {\n          x: item.left * dpr - left,\n          y: item.top * dpr - top,\n          image: item.dom\n        }\n      });\n      zr.add(img);\n    });\n    zr.refreshImmediately();\n    return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n  } else {\n    return this.getDataURL(opts);\n  }\n};\n/**\n * Convert from logical coordinate system to pixel coordinate system.\n * See CoordinateSystem#convertToPixel.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId, geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName,\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {Array|number} result\n */\n\n\nechartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n/**\n * Convert from pixel coordinate system to logical coordinate system.\n * See CoordinateSystem#convertFromPixel.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId / geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {Array|number} result\n */\n\nechartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\nfunction doConvertPixel(methodName, finder, value) {\n  var ecModel = this._model;\n\n  var coordSysList = this._coordSysMgr.getCoordinateSystems();\n\n  var result;\n  finder = modelUtil.parseFinder(ecModel, finder);\n\n  for (var i = 0; i < coordSysList.length; i++) {\n    var coordSys = coordSysList[i];\n\n    if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {\n      return result;\n    }\n  }\n}\n/**\n * Is the specified coordinate systems or components contain the given pixel point.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId / geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName,\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {boolean} result\n */\n\n\nechartsProto.containPixel = function (finder, value) {\n  var ecModel = this._model;\n  var result;\n  finder = modelUtil.parseFinder(ecModel, finder);\n  zrUtil.each(finder, function (models, key) {\n    key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n      var coordSys = model.coordinateSystem;\n\n      if (coordSys && coordSys.containPoint) {\n        result |= !!coordSys.containPoint(value);\n      } else if (key === 'seriesModels') {\n        var view = this._chartsMap[model.__viewId];\n\n        if (view && view.containPoint) {\n          result |= view.containPoint(value, model);\n        } else {}\n      } else {}\n    }, this);\n  }, this);\n  return !!result;\n};\n/**\n * Get visual from series or data.\n * @param {string|Object} finder\n *        If string, e.g., 'series', means {seriesIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            dataIndex / dataIndexInside\n *        }\n *        If dataIndex is not specified, series visual will be fetched,\n *        but not data item visual.\n *        If all of seriesIndex, seriesId, seriesName are not specified,\n *        visual will be fetched from first series.\n * @param {string} visualType 'color', 'symbol', 'symbolSize'\n */\n\n\nechartsProto.getVisual = function (finder, visualType) {\n  var ecModel = this._model;\n  finder = modelUtil.parseFinder(ecModel, finder, {\n    defaultMainType: 'series'\n  });\n  var seriesModel = finder.seriesModel;\n  var data = seriesModel.getData();\n  var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;\n  return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);\n};\n/**\n * Get view of corresponding component model\n * @param  {module:echarts/model/Component} componentModel\n * @return {module:echarts/view/Component}\n */\n\n\nechartsProto.getViewOfComponentModel = function (componentModel) {\n  return this._componentsMap[componentModel.__viewId];\n};\n/**\n * Get view of corresponding series model\n * @param  {module:echarts/model/Series} seriesModel\n * @return {module:echarts/view/Chart}\n */\n\n\nechartsProto.getViewOfSeriesModel = function (seriesModel) {\n  return this._chartsMap[seriesModel.__viewId];\n};\n\nvar updateMethods = {\n  prepareAndUpdate: function (payload) {\n    prepare(this);\n    updateMethods.update.call(this, payload);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  update: function (payload) {\n    // console.profile && console.profile('update');\n    var ecModel = this._model;\n    var api = this._api;\n    var zr = this._zr;\n    var coordSysMgr = this._coordSysMgr;\n    var scheduler = this._scheduler; // update before setOption\n\n    if (!ecModel) {\n      return;\n    }\n\n    scheduler.restoreData(ecModel, payload);\n    scheduler.performSeriesTasks(ecModel); // TODO\n    // Save total ecModel here for undo/redo (after restoring data and before processing data).\n    // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n    // Create new coordinate system each update\n    // In LineView may save the old coordinate system and use it to get the orignal point\n\n    coordSysMgr.create(ecModel, api);\n    scheduler.performDataProcessorTasks(ecModel, payload); // Current stream render is not supported in data process. So we can update\n    // stream modes after data processing, where the filtered data is used to\n    // deteming whether use progressive rendering.\n\n    updateStreamModes(this, ecModel); // We update stream modes before coordinate system updated, then the modes info\n    // can be fetched when coord sys updating (consider the barGrid extent fix). But\n    // the drawback is the full coord info can not be fetched. Fortunately this full\n    // coord is not requied in stream mode updater currently.\n\n    coordSysMgr.update(ecModel, api);\n    clearColorPalette(ecModel);\n    scheduler.performVisualTasks(ecModel, payload);\n    render(this, ecModel, api, payload); // Set background\n\n    var backgroundColor = ecModel.get('backgroundColor') || 'transparent'; // In IE8\n\n    if (!env.canvasSupported) {\n      var colorArr = colorTool.parse(backgroundColor);\n      backgroundColor = colorTool.stringify(colorArr, 'rgb');\n\n      if (colorArr[3] === 0) {\n        backgroundColor = 'transparent';\n      }\n    } else {\n      zr.setBackgroundColor(backgroundColor);\n    }\n\n    performPostUpdateFuncs(ecModel, api); // console.profile && console.profileEnd('update');\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateTransform: function (payload) {\n    var ecModel = this._model;\n    var ecIns = this;\n    var api = this._api; // update before setOption\n\n    if (!ecModel) {\n      return;\n    } // ChartView.markUpdateMethod(payload, 'updateTransform');\n\n\n    var componentDirtyList = [];\n    ecModel.eachComponent(function (componentType, componentModel) {\n      var componentView = ecIns.getViewOfComponentModel(componentModel);\n\n      if (componentView && componentView.__alive) {\n        if (componentView.updateTransform) {\n          var result = componentView.updateTransform(componentModel, ecModel, api, payload);\n          result && result.update && componentDirtyList.push(componentView);\n        } else {\n          componentDirtyList.push(componentView);\n        }\n      }\n    });\n    var seriesDirtyMap = zrUtil.createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      var chartView = ecIns._chartsMap[seriesModel.__viewId];\n\n      if (chartView.updateTransform) {\n        var result = chartView.updateTransform(seriesModel, ecModel, api, payload);\n        result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);\n      } else {\n        seriesDirtyMap.set(seriesModel.uid, 1);\n      }\n    });\n    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);\n\n    this._scheduler.performVisualTasks(ecModel, payload, {\n      setDirty: true,\n      dirtyMap: seriesDirtyMap\n    }); // Currently, not call render of components. Geo render cost a lot.\n    // renderComponents(ecIns, ecModel, api, payload, componentDirtyList);\n\n\n    renderSeries(ecIns, ecModel, api, payload, seriesDirtyMap);\n    performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateView: function (payload) {\n    var ecModel = this._model; // update before setOption\n\n    if (!ecModel) {\n      return;\n    }\n\n    ChartView.markUpdateMethod(payload, 'updateView');\n    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n\n    this._scheduler.performVisualTasks(ecModel, payload, {\n      setDirty: true\n    });\n\n    render(this, this._model, this._api, payload);\n    performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateVisual: function (payload) {\n    updateMethods.update.call(this, payload); // var ecModel = this._model;\n    // // update before setOption\n    // if (!ecModel) {\n    //     return;\n    // }\n    // ChartView.markUpdateMethod(payload, 'updateVisual');\n    // clearColorPalette(ecModel);\n    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // this._scheduler.performVisualTasks(ecModel, payload, {visualType: 'visual', setDirty: true});\n    // render(this, this._model, this._api, payload);\n    // performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateLayout: function (payload) {\n    updateMethods.update.call(this, payload); // var ecModel = this._model;\n    // // update before setOption\n    // if (!ecModel) {\n    //     return;\n    // }\n    // ChartView.markUpdateMethod(payload, 'updateLayout');\n    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);\n    // this._scheduler.performVisualTasks(ecModel, payload, {setDirty: true});\n    // render(this, this._model, this._api, payload);\n    // performPostUpdateFuncs(ecModel, this._api);\n  }\n};\n\nfunction prepare(ecIns) {\n  var ecModel = ecIns._model;\n  var scheduler = ecIns._scheduler;\n  scheduler.restorePipelines(ecModel);\n  scheduler.prepareStageTasks();\n  prepareView(ecIns, 'component', ecModel, scheduler);\n  prepareView(ecIns, 'chart', ecModel, scheduler);\n  scheduler.plan();\n}\n/**\n * @private\n */\n\n\nfunction updateDirectly(ecIns, method, payload, mainType, subType) {\n  var ecModel = ecIns._model; // broadcast\n\n  if (!mainType) {\n    // FIXME\n    // Chart will not be update directly here, except set dirty.\n    // But there is no such scenario now.\n    each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);\n    return;\n  }\n\n  var query = {};\n  query[mainType + 'Id'] = payload[mainType + 'Id'];\n  query[mainType + 'Index'] = payload[mainType + 'Index'];\n  query[mainType + 'Name'] = payload[mainType + 'Name'];\n  var condition = {\n    mainType: mainType,\n    query: query\n  };\n  subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n  var excludeSeriesId = payload.excludeSeriesId;\n\n  if (excludeSeriesId != null) {\n    excludeSeriesId = zrUtil.createHashMap(modelUtil.normalizeToArray(excludeSeriesId));\n  } // If dispatchAction before setOption, do nothing.\n\n\n  ecModel && ecModel.eachComponent(condition, function (model) {\n    if (!excludeSeriesId || excludeSeriesId.get(model.id) == null) {\n      callView(ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId]);\n    }\n  }, ecIns);\n\n  function callView(view) {\n    view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);\n  }\n}\n/**\n * Resize the chart\n * @param {Object} opts\n * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n * @param {boolean} [opts.silent=false]\n */\n\n\nechartsProto.resize = function (opts) {\n  this._zr.resize(opts);\n\n  var ecModel = this._model; // Resize loading effect\n\n  this._loadingFX && this._loadingFX.resize();\n\n  if (!ecModel) {\n    return;\n  }\n\n  var optionChanged = ecModel.resetOption('media');\n  var silent = opts && opts.silent;\n  this[IN_MAIN_PROCESS] = true;\n  optionChanged && prepare(this);\n  updateMethods.update.call(this);\n  this[IN_MAIN_PROCESS] = false;\n  flushPendingActions.call(this, silent);\n  triggerUpdatedEvent.call(this, silent);\n};\n\nfunction updateStreamModes(ecIns, ecModel) {\n  var chartsMap = ecIns._chartsMap;\n  var scheduler = ecIns._scheduler;\n  ecModel.eachSeries(function (seriesModel) {\n    scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);\n  });\n}\n/**\n * Show loading effect\n * @param  {string} [name='default']\n * @param  {Object} [cfg]\n */\n\n\nechartsProto.showLoading = function (name, cfg) {\n  if (isObject(name)) {\n    cfg = name;\n    name = '';\n  }\n\n  name = name || 'default';\n  this.hideLoading();\n\n  if (!loadingEffects[name]) {\n    return;\n  }\n\n  var el = loadingEffects[name](this._api, cfg);\n  var zr = this._zr;\n  this._loadingFX = el;\n  zr.add(el);\n};\n/**\n * Hide loading effect\n */\n\n\nechartsProto.hideLoading = function () {\n  this._loadingFX && this._zr.remove(this._loadingFX);\n  this._loadingFX = null;\n};\n/**\n * @param {Object} eventObj\n * @return {Object}\n */\n\n\nechartsProto.makeActionFromEvent = function (eventObj) {\n  var payload = zrUtil.extend({}, eventObj);\n  payload.type = eventActionMap[eventObj.type];\n  return payload;\n};\n/**\n * @pubilc\n * @param {Object} payload\n * @param {string} [payload.type] Action type\n * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n * @param {boolean} [opt.silent=false] Whether trigger events.\n * @param {boolean} [opt.flush=undefined]\n *                  true: Flush immediately, and then pixel in canvas can be fetched\n *                      immediately. Caution: it might affect performance.\n *                  false: Not not flush.\n *                  undefined: Auto decide whether perform flush.\n */\n\n\nechartsProto.dispatchAction = function (payload, opt) {\n  if (!isObject(opt)) {\n    opt = {\n      silent: !!opt\n    };\n  }\n\n  if (!actions[payload.type]) {\n    return;\n  } // Avoid dispatch action before setOption. Especially in `connect`.\n\n\n  if (!this._model) {\n    return;\n  } // May dispatchAction in rendering procedure\n\n\n  if (this[IN_MAIN_PROCESS]) {\n    this._pendingActions.push(payload);\n\n    return;\n  }\n\n  doDispatchAction.call(this, payload, opt.silent);\n\n  if (opt.flush) {\n    this._zr.flush(true);\n  } else if (opt.flush !== false && env.browser.weChat) {\n    // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n    // hang when sliding page (on touch event), which cause that zr does not\n    // refresh util user interaction finished, which is not expected.\n    // But `dispatchAction` may be called too frequently when pan on touch\n    // screen, which impacts performance if do not throttle them.\n    this._throttledZrFlush();\n  }\n\n  flushPendingActions.call(this, opt.silent);\n  triggerUpdatedEvent.call(this, opt.silent);\n};\n\nfunction doDispatchAction(payload, silent) {\n  var payloadType = payload.type;\n  var escapeConnect = payload.escapeConnect;\n  var actionWrap = actions[payloadType];\n  var actionInfo = actionWrap.actionInfo;\n  var cptType = (actionInfo.update || 'update').split(':');\n  var updateMethod = cptType.pop();\n  cptType = cptType[0] != null && parseClassType(cptType[0]);\n  this[IN_MAIN_PROCESS] = true;\n  var payloads = [payload];\n  var batched = false; // Batch action\n\n  if (payload.batch) {\n    batched = true;\n    payloads = zrUtil.map(payload.batch, function (item) {\n      item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n      item.batch = null;\n      return item;\n    });\n  }\n\n  var eventObjBatch = [];\n  var eventObj;\n  var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n  each(payloads, function (batchItem) {\n    // Action can specify the event by return it.\n    eventObj = actionWrap.action(batchItem, this._model, this._api); // Emit event outside\n\n    eventObj = eventObj || zrUtil.extend({}, batchItem); // Convert type to eventType\n\n    eventObj.type = actionInfo.event || eventObj.type;\n    eventObjBatch.push(eventObj); // light update does not perform data process, layout and visual.\n\n    if (isHighDown) {\n      // method, payload, mainType, subType\n      updateDirectly(this, updateMethod, batchItem, 'series');\n    } else if (cptType) {\n      updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n    }\n  }, this);\n\n  if (updateMethod !== 'none' && !isHighDown && !cptType) {\n    // Still dirty\n    if (this[OPTION_UPDATED]) {\n      // FIXME Pass payload ?\n      prepare(this);\n      updateMethods.update.call(this, payload);\n      this[OPTION_UPDATED] = false;\n    } else {\n      updateMethods[updateMethod].call(this, payload);\n    }\n  } // Follow the rule of action batch\n\n\n  if (batched) {\n    eventObj = {\n      type: actionInfo.event || payloadType,\n      escapeConnect: escapeConnect,\n      batch: eventObjBatch\n    };\n  } else {\n    eventObj = eventObjBatch[0];\n  }\n\n  this[IN_MAIN_PROCESS] = false;\n  !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n}\n\nfunction flushPendingActions(silent) {\n  var pendingActions = this._pendingActions;\n\n  while (pendingActions.length) {\n    var payload = pendingActions.shift();\n    doDispatchAction.call(this, payload, silent);\n  }\n}\n\nfunction triggerUpdatedEvent(silent) {\n  !silent && this.trigger('updated');\n}\n/**\n * Event `rendered` is triggered when zr\n * rendered. It is useful for realtime\n * snapshot (reflect animation).\n *\n * Event `finished` is triggered when:\n * (1) zrender rendering finished.\n * (2) initial animation finished.\n * (3) progressive rendering finished.\n * (4) no pending action.\n * (5) no delayed setOption needs to be processed.\n */\n\n\nfunction bindRenderedEvent(zr, ecIns) {\n  zr.on('rendered', function () {\n    ecIns.trigger('rendered'); // The `finished` event should not be triggered repeatly,\n    // so it should only be triggered when rendering indeed happend\n    // in zrender. (Consider the case that dipatchAction is keep\n    // triggering when mouse move).\n\n    if ( // Although zr is dirty if initial animation is not finished\n    // and this checking is called on frame, we also check\n    // animation finished for robustness.\n    zr.animation.isFinished() && !ecIns[OPTION_UPDATED] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) {\n      ecIns.trigger('finished');\n    }\n  });\n}\n/**\n * @param {Object} params\n * @param {number} params.seriesIndex\n * @param {Array|TypedArray} params.data\n */\n\n\nechartsProto.appendData = function (params) {\n  var seriesIndex = params.seriesIndex;\n  var ecModel = this.getModel();\n  var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n  seriesModel.appendData(params); // Note: `appendData` does not support that update extent of coordinate\n  // system, util some scenario require that. In the expected usage of\n  // `appendData`, the initial extent of coordinate system should better\n  // be fixed by axis `min`/`max` setting or initial data, otherwise if\n  // the extent changed while `appendData`, the location of the painted\n  // graphic elements have to be changed, which make the usage of\n  // `appendData` meaningless.\n\n  this._scheduler.unfinished = true;\n};\n/**\n * Register event\n * @method\n */\n\n\nechartsProto.on = createRegisterEventWithLowercaseName('on');\nechartsProto.off = createRegisterEventWithLowercaseName('off');\nechartsProto.one = createRegisterEventWithLowercaseName('one');\n/**\n * Prepare view instances of charts and components\n * @param  {module:echarts/model/Global} ecModel\n * @private\n */\n\nfunction prepareView(ecIns, type, ecModel, scheduler) {\n  var isComponent = type === 'component';\n  var viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;\n  var viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;\n  var zr = ecIns._zr;\n  var api = ecIns._api;\n\n  for (var i = 0; i < viewList.length; i++) {\n    viewList[i].__alive = false;\n  }\n\n  isComponent ? ecModel.eachComponent(function (componentType, model) {\n    componentType !== 'series' && doPrepare(model);\n  }) : ecModel.eachSeries(doPrepare);\n\n  function doPrepare(model) {\n    // Consider: id same and type changed.\n    var viewId = '_ec_' + model.id + '_' + model.type;\n    var view = viewMap[viewId];\n\n    if (!view) {\n      var classType = parseClassType(model.type);\n      var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);\n      view = new Clazz();\n      view.init(ecModel, api);\n      viewMap[viewId] = view;\n      viewList.push(view);\n      zr.add(view.group);\n    }\n\n    model.__viewId = view.__id = viewId;\n    view.__alive = true;\n    view.__model = model;\n    view.group.__ecComponentInfo = {\n      mainType: model.mainType,\n      index: model.componentIndex\n    };\n    !isComponent && scheduler.prepareView(view, model, ecModel, api);\n  }\n\n  for (var i = 0; i < viewList.length;) {\n    var view = viewList[i];\n\n    if (!view.__alive) {\n      !isComponent && view.renderTask.dispose();\n      zr.remove(view.group);\n      view.dispose(ecModel, api);\n      viewList.splice(i, 1);\n      delete viewMap[view.__id];\n      view.__id = view.group.__ecComponentInfo = null;\n    } else {\n      i++;\n    }\n  }\n} // /**\n//  * Encode visual infomation from data after data processing\n//  *\n//  * @param {module:echarts/model/Global} ecModel\n//  * @param {object} layout\n//  * @param {boolean} [layoutFilter] `true`: only layout,\n//  *                                 `false`: only not layout,\n//  *                                 `null`/`undefined`: all.\n//  * @param {string} taskBaseTag\n//  * @private\n//  */\n// function startVisualEncoding(ecIns, ecModel, api, payload, layoutFilter) {\n//     each(visualFuncs, function (visual, index) {\n//         var isLayout = visual.isLayout;\n//         if (layoutFilter == null\n//             || (layoutFilter === false && !isLayout)\n//             || (layoutFilter === true && isLayout)\n//         ) {\n//             visual.func(ecModel, api, payload);\n//         }\n//     });\n// }\n\n\nfunction clearColorPalette(ecModel) {\n  ecModel.clearColorPalette();\n  ecModel.eachSeries(function (seriesModel) {\n    seriesModel.clearColorPalette();\n  });\n}\n\nfunction render(ecIns, ecModel, api, payload) {\n  renderComponents(ecIns, ecModel, api, payload);\n  each(ecIns._chartsViews, function (chart) {\n    chart.__alive = false;\n  });\n  renderSeries(ecIns, ecModel, api, payload); // Remove groups of unrendered charts\n\n  each(ecIns._chartsViews, function (chart) {\n    if (!chart.__alive) {\n      chart.remove(ecModel, api);\n    }\n  });\n}\n\nfunction renderComponents(ecIns, ecModel, api, payload, dirtyList) {\n  each(dirtyList || ecIns._componentsViews, function (componentView) {\n    var componentModel = componentView.__model;\n    componentView.render(componentModel, ecModel, api, payload);\n    updateZ(componentModel, componentView);\n  });\n}\n/**\n * Render each chart and component\n * @private\n */\n\n\nfunction renderSeries(ecIns, ecModel, api, payload, dirtyMap) {\n  // Render all charts\n  var scheduler = ecIns._scheduler;\n  var unfinished;\n  ecModel.eachSeries(function (seriesModel) {\n    var chartView = ecIns._chartsMap[seriesModel.__viewId];\n    chartView.__alive = true;\n    var renderTask = chartView.renderTask;\n    scheduler.updatePayload(renderTask, payload);\n\n    if (dirtyMap && dirtyMap.get(seriesModel.uid)) {\n      renderTask.dirty();\n    }\n\n    unfinished |= renderTask.perform(scheduler.getPerformArgs(renderTask));\n    chartView.group.silent = !!seriesModel.get('silent');\n    updateZ(seriesModel, chartView);\n    updateBlend(seriesModel, chartView);\n  });\n  scheduler.unfinished |= unfinished; // If use hover layer\n\n  updateHoverLayerStatus(ecIns._zr, ecModel); // Add aria\n\n  aria(ecIns._zr.dom, ecModel);\n}\n\nfunction performPostUpdateFuncs(ecModel, api) {\n  each(postUpdateFuncs, function (func) {\n    func(ecModel, api);\n  });\n}\n\nvar MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];\n/**\n * @private\n */\n\nechartsProto._initEvents = function () {\n  each(MOUSE_EVENT_NAMES, function (eveName) {\n    this._zr.on(eveName, function (e) {\n      var ecModel = this.getModel();\n      var el = e.target;\n      var params; // no e.target when 'globalout'.\n\n      if (eveName === 'globalout') {\n        params = {};\n      } else if (el && el.dataIndex != null) {\n        var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n        params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\n      } // If element has custom eventData of components\n      else if (el && el.eventData) {\n        params = zrUtil.extend({}, el.eventData);\n      }\n\n      if (params) {\n        params.event = e;\n        params.type = eveName;\n        this.trigger(eveName, params);\n      }\n    }, this);\n  }, this);\n  each(eventActionMap, function (actionType, eventType) {\n    this._messageCenter.on(eventType, function (event) {\n      this.trigger(eventType, event);\n    }, this);\n  }, this);\n};\n/**\n * @return {boolean}\n */\n\n\nechartsProto.isDisposed = function () {\n  return this._disposed;\n};\n/**\n * Clear\n */\n\n\nechartsProto.clear = function () {\n  this.setOption({\n    series: []\n  }, true);\n};\n/**\n * Dispose instance\n */\n\n\nechartsProto.dispose = function () {\n  if (this._disposed) {\n    return;\n  }\n\n  this._disposed = true;\n  modelUtil.setAttribute(this.getDom(), DOM_ATTRIBUTE_KEY, '');\n  var api = this._api;\n  var ecModel = this._model;\n  each(this._componentsViews, function (component) {\n    component.dispose(ecModel, api);\n  });\n  each(this._chartsViews, function (chart) {\n    chart.dispose(ecModel, api);\n  }); // Dispose after all views disposed\n\n  this._zr.dispose();\n\n  delete instances[this.id];\n};\n\nzrUtil.mixin(ECharts, Eventful);\n\nfunction updateHoverLayerStatus(zr, ecModel) {\n  var storage = zr.storage;\n  var elCount = 0;\n  storage.traverse(function (el) {\n    if (!el.isGroup) {\n      elCount++;\n    }\n  });\n\n  if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n    storage.traverse(function (el) {\n      if (!el.isGroup) {\n        // Don't switch back.\n        el.useHoverLayer = true;\n      }\n    });\n  }\n}\n/**\n * Update chart progressive and blend.\n * @param {module:echarts/model/Series|module:echarts/model/Component} model\n * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n */\n\n\nfunction updateBlend(seriesModel, chartView) {\n  var blendMode = seriesModel.get('blendMode') || null;\n  chartView.group.traverse(function (el) {\n    // FIXME marker and other components\n    if (!el.isGroup) {\n      // Only set if blendMode is changed. In case element is incremental and don't wan't to rerender.\n      if (el.style.blend !== blendMode) {\n        el.setStyle('blend', blendMode);\n      }\n    }\n\n    if (el.eachPendingDisplayable) {\n      el.eachPendingDisplayable(function (displayable) {\n        displayable.setStyle('blend', blendMode);\n      });\n    }\n  });\n}\n/**\n * @param {module:echarts/model/Series|module:echarts/model/Component} model\n * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n */\n\n\nfunction updateZ(model, view) {\n  var z = model.get('z');\n  var zlevel = model.get('zlevel'); // Set z and zlevel\n\n  view.group.traverse(function (el) {\n    if (el.type !== 'group') {\n      z != null && (el.z = z);\n      zlevel != null && (el.zlevel = zlevel);\n    }\n  });\n}\n\nfunction createExtensionAPI(ecInstance) {\n  var coordSysMgr = ecInstance._coordSysMgr;\n  return zrUtil.extend(new ExtensionAPI(ecInstance), {\n    // Inject methods\n    getCoordinateSystems: zrUtil.bind(coordSysMgr.getCoordinateSystems, coordSysMgr),\n    getComponentByElement: function (el) {\n      while (el) {\n        var modelInfo = el.__ecComponentInfo;\n\n        if (modelInfo != null) {\n          return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);\n        }\n\n        el = el.parent;\n      }\n    }\n  });\n}\n/**\n * @type {Object} key: actionType.\n * @inner\n */\n\n\nvar actions = {};\n/**\n * Map eventType to actionType\n * @type {Object}\n */\n\nvar eventActionMap = {};\n/**\n * Data processor functions of each stage\n * @type {Array.<Object.<string, Function>>}\n * @inner\n */\n\nvar dataProcessorFuncs = [];\n/**\n * @type {Array.<Function>}\n * @inner\n */\n\nvar optionPreprocessorFuncs = [];\n/**\n * @type {Array.<Function>}\n * @inner\n */\n\nvar postUpdateFuncs = [];\n/**\n * Visual encoding functions of each stage\n * @type {Array.<Object.<string, Function>>}\n */\n\nvar visualFuncs = [];\n/**\n * Theme storage\n * @type {Object.<key, Object>}\n */\n\nvar themeStorage = {};\n/**\n * Loading effects\n */\n\nvar loadingEffects = {};\nvar instances = {};\nvar connectedGroups = {};\nvar idBase = new Date() - 0;\nvar groupIdBase = new Date() - 0;\nvar DOM_ATTRIBUTE_KEY = '_echarts_instance_';\nvar mapDataStores = {};\n\nfunction enableConnect(chart) {\n  var STATUS_PENDING = 0;\n  var STATUS_UPDATING = 1;\n  var STATUS_UPDATED = 2;\n  var STATUS_KEY = '__connectUpdateStatus';\n\n  function updateConnectedChartsStatus(charts, status) {\n    for (var i = 0; i < charts.length; i++) {\n      var otherChart = charts[i];\n      otherChart[STATUS_KEY] = status;\n    }\n  }\n\n  each(eventActionMap, function (actionType, eventType) {\n    chart._messageCenter.on(eventType, function (event) {\n      if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n        if (event && event.escapeConnect) {\n          return;\n        }\n\n        var action = chart.makeActionFromEvent(event);\n        var otherCharts = [];\n        each(instances, function (otherChart) {\n          if (otherChart !== chart && otherChart.group === chart.group) {\n            otherCharts.push(otherChart);\n          }\n        });\n        updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n        each(otherCharts, function (otherChart) {\n          if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n            otherChart.dispatchAction(action);\n          }\n        });\n        updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n      }\n    });\n  });\n}\n/**\n * @param {HTMLElement} dom\n * @param {Object} [theme]\n * @param {Object} opts\n * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n * @param {string} [opts.renderer] Currently only 'canvas' is supported.\n * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n *                              Can be 'auto' (the same as null/undefined)\n * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n *                               Can be 'auto' (the same as null/undefined)\n */\n\n\nfunction init(dom, theme, opts) {\n  var existInstance = getInstanceByDom(dom);\n\n  if (existInstance) {\n    return existInstance;\n  }\n\n  var chart = new ECharts(dom, theme, opts);\n  chart.id = 'ec_' + idBase++;\n  instances[chart.id] = chart;\n  modelUtil.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);\n  enableConnect(chart);\n  return chart;\n}\n/**\n * @return {string|Array.<module:echarts~ECharts>} groupId\n */\n\n\nfunction connect(groupId) {\n  // Is array of charts\n  if (zrUtil.isArray(groupId)) {\n    var charts = groupId;\n    groupId = null; // If any chart has group\n\n    each(charts, function (chart) {\n      if (chart.group != null) {\n        groupId = chart.group;\n      }\n    });\n    groupId = groupId || 'g_' + groupIdBase++;\n    each(charts, function (chart) {\n      chart.group = groupId;\n    });\n  }\n\n  connectedGroups[groupId] = true;\n  return groupId;\n}\n/**\n * @DEPRECATED\n * @return {string} groupId\n */\n\n\nfunction disConnect(groupId) {\n  connectedGroups[groupId] = false;\n}\n/**\n * @return {string} groupId\n */\n\n\nvar disconnect = disConnect;\n/**\n * Dispose a chart instance\n * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n */\n\nfunction dispose(chart) {\n  if (typeof chart === 'string') {\n    chart = instances[chart];\n  } else if (!(chart instanceof ECharts)) {\n    // Try to treat as dom\n    chart = getInstanceByDom(chart);\n  }\n\n  if (chart instanceof ECharts && !chart.isDisposed()) {\n    chart.dispose();\n  }\n}\n/**\n * @param  {HTMLElement} dom\n * @return {echarts~ECharts}\n */\n\n\nfunction getInstanceByDom(dom) {\n  return instances[modelUtil.getAttribute(dom, DOM_ATTRIBUTE_KEY)];\n}\n/**\n * @param {string} key\n * @return {echarts~ECharts}\n */\n\n\nfunction getInstanceById(key) {\n  return instances[key];\n}\n/**\n * Register theme\n */\n\n\nfunction registerTheme(name, theme) {\n  themeStorage[name] = theme;\n}\n/**\n * Register option preprocessor\n * @param {Function} preprocessorFunc\n */\n\n\nfunction registerPreprocessor(preprocessorFunc) {\n  optionPreprocessorFuncs.push(preprocessorFunc);\n}\n/**\n * @param {number} [priority=1000]\n * @param {Object|Function} processor\n */\n\n\nfunction registerProcessor(priority, processor) {\n  normalizeRegister(dataProcessorFuncs, priority, processor, PRIORITY_PROCESSOR_FILTER);\n}\n/**\n * Register postUpdater\n * @param {Function} postUpdateFunc\n */\n\n\nfunction registerPostUpdate(postUpdateFunc) {\n  postUpdateFuncs.push(postUpdateFunc);\n}\n/**\n * Usage:\n * registerAction('someAction', 'someEvent', function () { ... });\n * registerAction('someAction', function () { ... });\n * registerAction(\n *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n *     function () { ... }\n * );\n *\n * @param {(string|Object)} actionInfo\n * @param {string} actionInfo.type\n * @param {string} [actionInfo.event]\n * @param {string} [actionInfo.update]\n * @param {string} [eventName]\n * @param {Function} action\n */\n\n\nfunction registerAction(actionInfo, eventName, action) {\n  if (typeof eventName === 'function') {\n    action = eventName;\n    eventName = '';\n  }\n\n  var actionType = isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {\n    event: eventName\n  }][0]; // Event name is all lowercase\n\n  actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n  eventName = actionInfo.event; // Validate action type and event name.\n\n  assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n  if (!actions[actionType]) {\n    actions[actionType] = {\n      action: action,\n      actionInfo: actionInfo\n    };\n  }\n\n  eventActionMap[eventName] = actionType;\n}\n/**\n * @param {string} type\n * @param {*} CoordinateSystem\n */\n\n\nfunction registerCoordinateSystem(type, CoordinateSystem) {\n  CoordinateSystemManager.register(type, CoordinateSystem);\n}\n/**\n * Get dimensions of specified coordinate system.\n * @param {string} type\n * @return {Array.<string|Object>}\n */\n\n\nfunction getCoordinateSystemDimensions(type) {\n  var coordSysCreator = CoordinateSystemManager.get(type);\n\n  if (coordSysCreator) {\n    return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();\n  }\n}\n/**\n * Layout is a special stage of visual encoding\n * Most visual encoding like color are common for different chart\n * But each chart has it's own layout algorithm\n *\n * @param {number} [priority=1000]\n * @param {Function} layoutTask\n */\n\n\nfunction registerLayout(priority, layoutTask) {\n  normalizeRegister(visualFuncs, priority, layoutTask, PRIORITY_VISUAL_LAYOUT, 'layout');\n}\n/**\n * @param {number} [priority=3000]\n * @param {module:echarts/stream/Task} visualTask\n */\n\n\nfunction registerVisual(priority, visualTask) {\n  normalizeRegister(visualFuncs, priority, visualTask, PRIORITY_VISUAL_CHART, 'visual');\n}\n/**\n * @param {Object|Function} fn: {seriesType, createOnAllSeries, performRawSeries, reset}\n */\n\n\nfunction normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {\n  if (isFunction(priority) || isObject(priority)) {\n    fn = priority;\n    priority = defaultPriority;\n  }\n\n  var stageHandler = Scheduler.wrapStageHandler(fn, visualType);\n  stageHandler.__prio = priority;\n  stageHandler.__raw = fn;\n  targetList.push(stageHandler);\n  return stageHandler;\n}\n/**\n * @param {string} name\n */\n\n\nfunction registerLoading(name, loadingFx) {\n  loadingEffects[name] = loadingFx;\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendComponentModel(opts\n/*, superClass*/\n) {\n  // var Clazz = ComponentModel;\n  // if (superClass) {\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n  // }\n  return ComponentModel.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendComponentView(opts\n/*, superClass*/\n) {\n  // var Clazz = ComponentView;\n  // if (superClass) {\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n  // }\n  return ComponentView.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendSeriesModel(opts\n/*, superClass*/\n) {\n  // var Clazz = SeriesModel;\n  // if (superClass) {\n  //     superClass = 'series.' + superClass.replace('series.', '');\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n  // }\n  return SeriesModel.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendChartView(opts\n/*, superClass*/\n) {\n  // var Clazz = ChartView;\n  // if (superClass) {\n  //     superClass = superClass.replace('series.', '');\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ChartView.getClass(classType.main, true);\n  // }\n  return ChartView.extend(opts);\n}\n/**\n * ZRender need a canvas context to do measureText.\n * But in node environment canvas may be created by node-canvas.\n * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n *\n * Be careful of using it in the browser.\n *\n * @param {Function} creator\n * @example\n *     var Canvas = require('canvas');\n *     var echarts = require('echarts');\n *     echarts.setCanvasCreator(function () {\n *         // Small size is enough.\n *         return new Canvas(32, 32);\n *     });\n */\n\n\nfunction setCanvasCreator(creator) {\n  zrUtil.$override('createCanvas', creator);\n}\n/**\n * @param {string} mapName\n * @param {Object|string} geoJson\n * @param {Object} [specialAreas]\n *\n * @example\n *     $.get('USA.json', function (geoJson) {\n *         echarts.registerMap('USA', geoJson);\n *         // Or\n *         echarts.registerMap('USA', {\n *             geoJson: geoJson,\n *             specialAreas: {}\n *         })\n *     });\n */\n\n\nfunction registerMap(mapName, geoJson, specialAreas) {\n  if (geoJson.geoJson && !geoJson.features) {\n    specialAreas = geoJson.specialAreas;\n    geoJson = geoJson.geoJson;\n  }\n\n  if (typeof geoJson === 'string') {\n    geoJson = typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(geoJson) : new Function('return (' + geoJson + ');')();\n  }\n\n  mapDataStores[mapName] = {\n    geoJson: geoJson,\n    specialAreas: specialAreas\n  };\n}\n/**\n * @param {string} mapName\n * @return {Object}\n */\n\n\nfunction getMap(mapName) {\n  return mapDataStores[mapName];\n}\n\nregisterVisual(PRIORITY_VISUAL_GLOBAL, seriesColor);\nregisterPreprocessor(backwardCompat);\nregisterProcessor(PRIORITY_PROCESSOR_STATISTIC, dataStack);\nregisterLoading('default', loadingDefault); // Default actions\n\nregisterAction({\n  type: 'highlight',\n  event: 'highlight',\n  update: 'highlight'\n}, zrUtil.noop);\nregisterAction({\n  type: 'downplay',\n  event: 'downplay',\n  update: 'downplay'\n}, zrUtil.noop); // Default theme\n\nregisterTheme('light', lightTheme);\nregisterTheme('dark', darkTheme); // For backward compatibility, where the namespace `dataTool` will\n// be mounted on `echarts` is the extension `dataTool` is imported.\n\nvar dataTool = {};\nexports.version = version;\nexports.dependencies = dependencies;\nexports.PRIORITY = PRIORITY;\nexports.init = init;\nexports.connect = connect;\nexports.disConnect = disConnect;\nexports.disconnect = disconnect;\nexports.dispose = dispose;\nexports.getInstanceByDom = getInstanceByDom;\nexports.getInstanceById = getInstanceById;\nexports.registerTheme = registerTheme;\nexports.registerPreprocessor = registerPreprocessor;\nexports.registerProcessor = registerProcessor;\nexports.registerPostUpdate = registerPostUpdate;\nexports.registerAction = registerAction;\nexports.registerCoordinateSystem = registerCoordinateSystem;\nexports.getCoordinateSystemDimensions = getCoordinateSystemDimensions;\nexports.registerLayout = registerLayout;\nexports.registerVisual = registerVisual;\nexports.registerLoading = registerLoading;\nexports.extendComponentModel = extendComponentModel;\nexports.extendComponentView = extendComponentView;\nexports.extendSeriesModel = extendSeriesModel;\nexports.extendChartView = extendChartView;\nexports.setCanvasCreator = setCanvasCreator;\nexports.registerMap = registerMap;\nexports.getMap = getMap;\nexports.dataTool = dataTool;\n\nvar ___ec_export = require(\"./export\");\n\n(function () {\n  for (var key in ___ec_export) {\n    if (___ec_export.hasOwnProperty(key)) {\n      exports[key] = ___ec_export[key];\n    }\n  }\n})();","map":{"version":3,"names":["_config","require","__DEV__","zrender","zrUtil","colorTool","env","timsort","Eventful","GlobalModel","ExtensionAPI","CoordinateSystemManager","OptionManager","backwardCompat","dataStack","ComponentModel","SeriesModel","ComponentView","ChartView","graphic","modelUtil","_throttle","throttle","seriesColor","aria","loadingDefault","Scheduler","lightTheme","darkTheme","assert","each","isFunction","isObject","parseClassType","version","dependencies","TEST_FRAME_REMAIN_TIME","PRIORITY_PROCESSOR_FILTER","PRIORITY_PROCESSOR_STATISTIC","PRIORITY_VISUAL_LAYOUT","PRIORITY_VISUAL_GLOBAL","PRIORITY_VISUAL_CHART","PRIORITY_VISUAL_COMPONENT","PRIORITY_VISUAL_BRUSH","PRIORITY","PROCESSOR","FILTER","STATISTIC","VISUAL","LAYOUT","GLOBAL","CHART","COMPONENT","BRUSH","IN_MAIN_PROCESS","OPTION_UPDATED","ACTION_REG","createRegisterEventWithLowercaseName","method","eventName","handler","context","toLowerCase","prototype","call","MessageCenter","on","off","one","mixin","ECharts","dom","theme","opts","themeStorage","id","group","_dom","defaultRenderer","zr","_zr","init","renderer","devicePixelRatio","width","height","_throttledZrFlush","bind","flush","clone","_theme","_chartsViews","_chartsMap","_componentsViews","_componentsMap","_coordSysMgr","api","_api","createExtensionAPI","prioritySortFunc","a","b","__prio","visualFuncs","dataProcessorFuncs","_scheduler","_messageCenter","_initEvents","resize","_pendingActions","animation","_onframe","bindRenderedEvent","setAsPrimitive","echartsProto","_disposed","scheduler","silent","prepare","updateMethods","update","flushPendingActions","triggerUpdatedEvent","unfinished","remainTime","ecModel","_model","startTime","Date","performSeriesTasks","performDataProcessorTasks","updateStreamModes","performVisualTasks","renderSeries","getDom","getZr","setOption","option","notMerge","lazyUpdate","optionManager","optionPreprocessorFuncs","setTheme","console","log","getModel","getOption","getWidth","getHeight","getDevicePixelRatio","painter","dpr","window","getRenderedCanvas","canvasSupported","pixelRatio","backgroundColor","get","getSvgDataUrl","svgSupported","list","storage","getDisplayList","el","stopAnimation","pathToDataUrl","getDataURL","excludeComponents","excludesComponentViews","self","componentType","eachComponent","mainType","component","view","__viewId","ignore","push","url","getType","toDataURL","type","getConnectedDataURL","groupId","mathMin","Math","min","mathMax","max","MAX_NUMBER","Infinity","connectedGroups","left","top","right","bottom","canvasList","instances","chart","canvas","boundingRect","getBoundingClientRect","targetCanvas","createCanvas","item","img","Image","style","x","y","image","add","refreshImmediately","convertToPixel","curry","doConvertPixel","convertFromPixel","methodName","finder","value","coordSysList","getCoordinateSystems","result","parseFinder","i","length","coordSys","containPixel","models","key","indexOf","model","coordinateSystem","containPoint","getVisual","visualType","defaultMainType","seriesModel","data","getData","dataIndexInside","hasOwnProperty","indexOfRawIndex","dataIndex","getItemVisual","getViewOfComponentModel","componentModel","getViewOfSeriesModel","prepareAndUpdate","payload","coordSysMgr","restoreData","create","clearColorPalette","render","colorArr","parse","stringify","setBackgroundColor","performPostUpdateFuncs","updateTransform","ecIns","componentDirtyList","componentView","__alive","seriesDirtyMap","createHashMap","eachSeries","chartView","set","uid","setDirty","dirtyMap","updateView","markUpdateMethod","updateVisual","updateLayout","restorePipelines","prepareStageTasks","prepareView","plan","updateDirectly","subType","concat","callView","query","condition","excludeSeriesId","normalizeToArray","__model","_loadingFX","optionChanged","resetOption","chartsMap","showLoading","name","cfg","hideLoading","loadingEffects","remove","makeActionFromEvent","eventObj","extend","eventActionMap","dispatchAction","opt","actions","doDispatchAction","browser","weChat","payloadType","escapeConnect","actionWrap","actionInfo","cptType","split","updateMethod","pop","payloads","batched","batch","map","defaults","eventObjBatch","isHighDown","batchItem","action","event","main","sub","trigger","pendingActions","shift","isFinished","appendData","params","seriesIndex","getSeriesByIndex","isComponent","viewList","viewMap","doPrepare","viewId","classType","Clazz","getClass","__id","__ecComponentInfo","index","componentIndex","renderTask","dispose","splice","renderComponents","dirtyList","updateZ","updatePayload","dirty","perform","getPerformArgs","updateBlend","updateHoverLayerStatus","postUpdateFuncs","func","MOUSE_EVENT_NAMES","eveName","e","target","dataModel","getDataParams","dataType","eventData","actionType","eventType","isDisposed","clear","series","setAttribute","DOM_ATTRIBUTE_KEY","elCount","traverse","isGroup","node","useHoverLayer","blendMode","blend","setStyle","eachPendingDisplayable","displayable","z","zlevel","ecInstance","getComponentByElement","modelInfo","getComponent","parent","idBase","groupIdBase","mapDataStores","enableConnect","STATUS_PENDING","STATUS_UPDATING","STATUS_UPDATED","STATUS_KEY","updateConnectedChartsStatus","charts","status","otherChart","otherCharts","existInstance","getInstanceByDom","connect","isArray","disConnect","disconnect","getAttribute","getInstanceById","registerTheme","registerPreprocessor","preprocessorFunc","registerProcessor","priority","processor","normalizeRegister","registerPostUpdate","postUpdateFunc","registerAction","test","registerCoordinateSystem","CoordinateSystem","register","getCoordinateSystemDimensions","coordSysCreator","getDimensionsInfo","dimensions","slice","registerLayout","layoutTask","registerVisual","visualTask","targetList","fn","defaultPriority","stageHandler","wrapStageHandler","__raw","registerLoading","loadingFx","extendComponentModel","extendComponentView","extendSeriesModel","extendChartView","setCanvasCreator","creator","$override","registerMap","mapName","geoJson","specialAreas","features","JSON","Function","getMap","noop","dataTool","exports","___ec_export"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/echarts.js"],"sourcesContent":["var _config = require(\"./config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrender = require(\"zrender/lib/zrender\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar colorTool = require(\"zrender/lib/tool/color\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar timsort = require(\"zrender/lib/core/timsort\");\n\nvar Eventful = require(\"zrender/lib/mixin/Eventful\");\n\nvar GlobalModel = require(\"./model/Global\");\n\nvar ExtensionAPI = require(\"./ExtensionAPI\");\n\nvar CoordinateSystemManager = require(\"./CoordinateSystem\");\n\nvar OptionManager = require(\"./model/OptionManager\");\n\nvar backwardCompat = require(\"./preprocessor/backwardCompat\");\n\nvar dataStack = require(\"./processor/dataStack\");\n\nvar ComponentModel = require(\"./model/Component\");\n\nvar SeriesModel = require(\"./model/Series\");\n\nvar ComponentView = require(\"./view/Component\");\n\nvar ChartView = require(\"./view/Chart\");\n\nvar graphic = require(\"./util/graphic\");\n\nvar modelUtil = require(\"./util/model\");\n\nvar _throttle = require(\"./util/throttle\");\n\nvar throttle = _throttle.throttle;\n\nvar seriesColor = require(\"./visual/seriesColor\");\n\nvar aria = require(\"./visual/aria\");\n\nvar loadingDefault = require(\"./loading/default\");\n\nvar Scheduler = require(\"./stream/Scheduler\");\n\nvar lightTheme = require(\"./theme/light\");\n\nvar darkTheme = require(\"./theme/dark\");\n\nrequire(\"./component/dataset\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar assert = zrUtil.assert;\nvar each = zrUtil.each;\nvar isFunction = zrUtil.isFunction;\nvar isObject = zrUtil.isObject;\nvar parseClassType = ComponentModel.parseClassType;\nvar version = '4.1.0';\nvar dependencies = {\n  zrender: '4.0.4'\n};\nvar TEST_FRAME_REMAIN_TIME = 1;\nvar PRIORITY_PROCESSOR_FILTER = 1000;\nvar PRIORITY_PROCESSOR_STATISTIC = 5000;\nvar PRIORITY_VISUAL_LAYOUT = 1000;\nvar PRIORITY_VISUAL_GLOBAL = 2000;\nvar PRIORITY_VISUAL_CHART = 3000;\nvar PRIORITY_VISUAL_COMPONENT = 4000; // FIXME\n// necessary?\n\nvar PRIORITY_VISUAL_BRUSH = 5000;\nvar PRIORITY = {\n  PROCESSOR: {\n    FILTER: PRIORITY_PROCESSOR_FILTER,\n    STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n  },\n  VISUAL: {\n    LAYOUT: PRIORITY_VISUAL_LAYOUT,\n    GLOBAL: PRIORITY_VISUAL_GLOBAL,\n    CHART: PRIORITY_VISUAL_CHART,\n    COMPONENT: PRIORITY_VISUAL_COMPONENT,\n    BRUSH: PRIORITY_VISUAL_BRUSH\n  }\n}; // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n// where they must not be invoked nestedly, except the only case: invoke\n// dispatchAction with updateMethod \"none\" in main process.\n// This flag is used to carry out this rule.\n// All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n\nvar IN_MAIN_PROCESS = '__flagInMainProcess';\nvar OPTION_UPDATED = '__optionUpdated';\nvar ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\nfunction createRegisterEventWithLowercaseName(method) {\n  return function (eventName, handler, context) {\n    // Event name is all lowercase\n    eventName = eventName && eventName.toLowerCase();\n    Eventful.prototype[method].call(this, eventName, handler, context);\n  };\n}\n/**\n * @module echarts~MessageCenter\n */\n\n\nfunction MessageCenter() {\n  Eventful.call(this);\n}\n\nMessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\nMessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\nMessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\nzrUtil.mixin(MessageCenter, Eventful);\n/**\n * @module echarts~ECharts\n */\n\nfunction ECharts(dom, theme, opts) {\n  opts = opts || {}; // Get theme by name\n\n  if (typeof theme === 'string') {\n    theme = themeStorage[theme];\n  }\n  /**\n   * @type {string}\n   */\n\n\n  this.id;\n  /**\n   * Group id\n   * @type {string}\n   */\n\n  this.group;\n  /**\n   * @type {HTMLElement}\n   * @private\n   */\n\n  this._dom = dom;\n  var defaultRenderer = 'canvas';\n\n  /**\n   * @type {module:zrender/ZRender}\n   * @private\n   */\n  var zr = this._zr = zrender.init(dom, {\n    renderer: opts.renderer || defaultRenderer,\n    devicePixelRatio: opts.devicePixelRatio,\n    width: opts.width,\n    height: opts.height\n  });\n  /**\n   * Expect 60 pfs.\n   * @type {Function}\n   * @private\n   */\n\n  this._throttledZrFlush = throttle(zrUtil.bind(zr.flush, zr), 17);\n  var theme = zrUtil.clone(theme);\n  theme && backwardCompat(theme, true);\n  /**\n   * @type {Object}\n   * @private\n   */\n\n  this._theme = theme;\n  /**\n   * @type {Array.<module:echarts/view/Chart>}\n   * @private\n   */\n\n  this._chartsViews = [];\n  /**\n   * @type {Object.<string, module:echarts/view/Chart>}\n   * @private\n   */\n\n  this._chartsMap = {};\n  /**\n   * @type {Array.<module:echarts/view/Component>}\n   * @private\n   */\n\n  this._componentsViews = [];\n  /**\n   * @type {Object.<string, module:echarts/view/Component>}\n   * @private\n   */\n\n  this._componentsMap = {};\n  /**\n   * @type {module:echarts/CoordinateSystem}\n   * @private\n   */\n\n  this._coordSysMgr = new CoordinateSystemManager();\n  /**\n   * @type {module:echarts/ExtensionAPI}\n   * @private\n   */\n\n  var api = this._api = createExtensionAPI(this); // Sort on demand\n\n  function prioritySortFunc(a, b) {\n    return a.__prio - b.__prio;\n  }\n\n  timsort(visualFuncs, prioritySortFunc);\n  timsort(dataProcessorFuncs, prioritySortFunc);\n  /**\n   * @type {module:echarts/stream/Scheduler}\n   */\n\n  this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);\n  Eventful.call(this);\n  /**\n   * @type {module:echarts~MessageCenter}\n   * @private\n   */\n\n  this._messageCenter = new MessageCenter(); // Init mouse events\n\n  this._initEvents(); // In case some people write `window.onresize = chart.resize`\n\n\n  this.resize = zrUtil.bind(this.resize, this); // Can't dispatch action during rendering procedure\n\n  this._pendingActions = [];\n  zr.animation.on('frame', this._onframe, this);\n  bindRenderedEvent(zr, this); // ECharts instance can be used as value.\n\n  zrUtil.setAsPrimitive(this);\n}\n\nvar echartsProto = ECharts.prototype;\n\nechartsProto._onframe = function () {\n  if (this._disposed) {\n    return;\n  }\n\n  var scheduler = this._scheduler; // Lazy update\n\n  if (this[OPTION_UPDATED]) {\n    var silent = this[OPTION_UPDATED].silent;\n    this[IN_MAIN_PROCESS] = true;\n    prepare(this);\n    updateMethods.update.call(this);\n    this[IN_MAIN_PROCESS] = false;\n    this[OPTION_UPDATED] = false;\n    flushPendingActions.call(this, silent);\n    triggerUpdatedEvent.call(this, silent);\n  } // Avoid do both lazy update and progress in one frame.\n  else if (scheduler.unfinished) {\n      // Stream progress.\n      var remainTime = TEST_FRAME_REMAIN_TIME;\n      var ecModel = this._model;\n      var api = this._api;\n      scheduler.unfinished = false;\n\n      do {\n        var startTime = +new Date();\n        scheduler.performSeriesTasks(ecModel); // Currently dataProcessorFuncs do not check threshold.\n\n        scheduler.performDataProcessorTasks(ecModel);\n        updateStreamModes(this, ecModel); // Do not update coordinate system here. Because that coord system update in\n        // each frame is not a good user experience. So we follow the rule that\n        // the extent of the coordinate system is determin in the first frame (the\n        // frame is executed immedietely after task reset.\n        // this._coordSysMgr.update(ecModel, api);\n        // console.log('--- ec frame visual ---', remainTime);\n\n        scheduler.performVisualTasks(ecModel);\n        renderSeries(this, this._model, api, 'remain');\n        remainTime -= +new Date() - startTime;\n      } while (remainTime > 0 && scheduler.unfinished); // Call flush explicitly for trigger finished event.\n\n\n      if (!scheduler.unfinished) {\n        this._zr.flush();\n      } // Else, zr flushing be ensue within the same frame,\n      // because zr flushing is after onframe event.\n\n    }\n};\n/**\n * @return {HTMLElement}\n */\n\n\nechartsProto.getDom = function () {\n  return this._dom;\n};\n/**\n * @return {module:zrender~ZRender}\n */\n\n\nechartsProto.getZr = function () {\n  return this._zr;\n};\n/**\n * Usage:\n * chart.setOption(option, notMerge, lazyUpdate);\n * chart.setOption(option, {\n *     notMerge: ...,\n *     lazyUpdate: ...,\n *     silent: ...\n * });\n *\n * @param {Object} option\n * @param {Object|boolean} [opts] opts or notMerge.\n * @param {boolean} [opts.notMerge=false]\n * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n */\n\n\nechartsProto.setOption = function (option, notMerge, lazyUpdate) {\n  var silent;\n\n  if (isObject(notMerge)) {\n    lazyUpdate = notMerge.lazyUpdate;\n    silent = notMerge.silent;\n    notMerge = notMerge.notMerge;\n  }\n\n  this[IN_MAIN_PROCESS] = true;\n\n  if (!this._model || notMerge) {\n    var optionManager = new OptionManager(this._api);\n    var theme = this._theme;\n    var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\n    ecModel.scheduler = this._scheduler;\n    ecModel.init(null, null, theme, optionManager);\n  }\n\n  this._model.setOption(option, optionPreprocessorFuncs);\n\n  if (lazyUpdate) {\n    this[OPTION_UPDATED] = {\n      silent: silent\n    };\n    this[IN_MAIN_PROCESS] = false;\n  } else {\n    prepare(this);\n    updateMethods.update.call(this); // Ensure zr refresh sychronously, and then pixel in canvas can be\n    // fetched after `setOption`.\n\n    this._zr.flush();\n\n    this[OPTION_UPDATED] = false;\n    this[IN_MAIN_PROCESS] = false;\n    flushPendingActions.call(this, silent);\n    triggerUpdatedEvent.call(this, silent);\n  }\n};\n/**\n * @DEPRECATED\n */\n\n\nechartsProto.setTheme = function () {\n  console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n};\n/**\n * @return {module:echarts/model/Global}\n */\n\n\nechartsProto.getModel = function () {\n  return this._model;\n};\n/**\n * @return {Object}\n */\n\n\nechartsProto.getOption = function () {\n  return this._model && this._model.getOption();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getWidth = function () {\n  return this._zr.getWidth();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getHeight = function () {\n  return this._zr.getHeight();\n};\n/**\n * @return {number}\n */\n\n\nechartsProto.getDevicePixelRatio = function () {\n  return this._zr.painter.dpr || window.devicePixelRatio || 1;\n};\n/**\n * Get canvas which has all thing rendered\n * @param {Object} opts\n * @param {string} [opts.backgroundColor]\n * @return {string}\n */\n\n\nechartsProto.getRenderedCanvas = function (opts) {\n  if (!env.canvasSupported) {\n    return;\n  }\n\n  opts = opts || {};\n  opts.pixelRatio = opts.pixelRatio || 1;\n  opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');\n  var zr = this._zr; // var list = zr.storage.getDisplayList();\n  // Stop animations\n  // Never works before in init animation, so remove it.\n  // zrUtil.each(list, function (el) {\n  //     el.stopAnimation(true);\n  // });\n\n  return zr.painter.getRenderedCanvas(opts);\n};\n/**\n * Get svg data url\n * @return {string}\n */\n\n\nechartsProto.getSvgDataUrl = function () {\n  if (!env.svgSupported) {\n    return;\n  }\n\n  var zr = this._zr;\n  var list = zr.storage.getDisplayList(); // Stop animations\n\n  zrUtil.each(list, function (el) {\n    el.stopAnimation(true);\n  });\n  return zr.painter.pathToDataUrl();\n};\n/**\n * @return {string}\n * @param {Object} opts\n * @param {string} [opts.type='png']\n * @param {string} [opts.pixelRatio=1]\n * @param {string} [opts.backgroundColor]\n * @param {string} [opts.excludeComponents]\n */\n\n\nechartsProto.getDataURL = function (opts) {\n  opts = opts || {};\n  var excludeComponents = opts.excludeComponents;\n  var ecModel = this._model;\n  var excludesComponentViews = [];\n  var self = this;\n  each(excludeComponents, function (componentType) {\n    ecModel.eachComponent({\n      mainType: componentType\n    }, function (component) {\n      var view = self._componentsMap[component.__viewId];\n\n      if (!view.group.ignore) {\n        excludesComponentViews.push(view);\n        view.group.ignore = true;\n      }\n    });\n  });\n  var url = this._zr.painter.getType() === 'svg' ? this.getSvgDataUrl() : this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));\n  each(excludesComponentViews, function (view) {\n    view.group.ignore = false;\n  });\n  return url;\n};\n/**\n * @return {string}\n * @param {Object} opts\n * @param {string} [opts.type='png']\n * @param {string} [opts.pixelRatio=1]\n * @param {string} [opts.backgroundColor]\n */\n\n\nechartsProto.getConnectedDataURL = function (opts) {\n  if (!env.canvasSupported) {\n    return;\n  }\n\n  var groupId = this.group;\n  var mathMin = Math.min;\n  var mathMax = Math.max;\n  var MAX_NUMBER = Infinity;\n\n  if (connectedGroups[groupId]) {\n    var left = MAX_NUMBER;\n    var top = MAX_NUMBER;\n    var right = -MAX_NUMBER;\n    var bottom = -MAX_NUMBER;\n    var canvasList = [];\n    var dpr = opts && opts.pixelRatio || 1;\n    zrUtil.each(instances, function (chart, id) {\n      if (chart.group === groupId) {\n        var canvas = chart.getRenderedCanvas(zrUtil.clone(opts));\n        var boundingRect = chart.getDom().getBoundingClientRect();\n        left = mathMin(boundingRect.left, left);\n        top = mathMin(boundingRect.top, top);\n        right = mathMax(boundingRect.right, right);\n        bottom = mathMax(boundingRect.bottom, bottom);\n        canvasList.push({\n          dom: canvas,\n          left: boundingRect.left,\n          top: boundingRect.top\n        });\n      }\n    });\n    left *= dpr;\n    top *= dpr;\n    right *= dpr;\n    bottom *= dpr;\n    var width = right - left;\n    var height = bottom - top;\n    var targetCanvas = zrUtil.createCanvas();\n    targetCanvas.width = width;\n    targetCanvas.height = height;\n    var zr = zrender.init(targetCanvas);\n    each(canvasList, function (item) {\n      var img = new graphic.Image({\n        style: {\n          x: item.left * dpr - left,\n          y: item.top * dpr - top,\n          image: item.dom\n        }\n      });\n      zr.add(img);\n    });\n    zr.refreshImmediately();\n    return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n  } else {\n    return this.getDataURL(opts);\n  }\n};\n/**\n * Convert from logical coordinate system to pixel coordinate system.\n * See CoordinateSystem#convertToPixel.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId, geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName,\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {Array|number} result\n */\n\n\nechartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n/**\n * Convert from pixel coordinate system to logical coordinate system.\n * See CoordinateSystem#convertFromPixel.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId / geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {Array|number} result\n */\n\nechartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\nfunction doConvertPixel(methodName, finder, value) {\n  var ecModel = this._model;\n\n  var coordSysList = this._coordSysMgr.getCoordinateSystems();\n\n  var result;\n  finder = modelUtil.parseFinder(ecModel, finder);\n\n  for (var i = 0; i < coordSysList.length; i++) {\n    var coordSys = coordSysList[i];\n\n    if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {\n      return result;\n    }\n  }\n}\n/**\n * Is the specified coordinate systems or components contain the given pixel point.\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            geoIndex / geoId / geoName,\n *            bmapIndex / bmapId / bmapName,\n *            xAxisIndex / xAxisId / xAxisName,\n *            yAxisIndex / yAxisId / yAxisName,\n *            gridIndex / gridId / gridName,\n *            ... (can be extended)\n *        }\n * @param {Array|number} value\n * @return {boolean} result\n */\n\n\nechartsProto.containPixel = function (finder, value) {\n  var ecModel = this._model;\n  var result;\n  finder = modelUtil.parseFinder(ecModel, finder);\n  zrUtil.each(finder, function (models, key) {\n    key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n      var coordSys = model.coordinateSystem;\n\n      if (coordSys && coordSys.containPoint) {\n        result |= !!coordSys.containPoint(value);\n      } else if (key === 'seriesModels') {\n        var view = this._chartsMap[model.__viewId];\n\n        if (view && view.containPoint) {\n          result |= view.containPoint(value, model);\n        } else {}\n      } else {}\n    }, this);\n  }, this);\n  return !!result;\n};\n/**\n * Get visual from series or data.\n * @param {string|Object} finder\n *        If string, e.g., 'series', means {seriesIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex / seriesId / seriesName,\n *            dataIndex / dataIndexInside\n *        }\n *        If dataIndex is not specified, series visual will be fetched,\n *        but not data item visual.\n *        If all of seriesIndex, seriesId, seriesName are not specified,\n *        visual will be fetched from first series.\n * @param {string} visualType 'color', 'symbol', 'symbolSize'\n */\n\n\nechartsProto.getVisual = function (finder, visualType) {\n  var ecModel = this._model;\n  finder = modelUtil.parseFinder(ecModel, finder, {\n    defaultMainType: 'series'\n  });\n  var seriesModel = finder.seriesModel;\n  var data = seriesModel.getData();\n  var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;\n  return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);\n};\n/**\n * Get view of corresponding component model\n * @param  {module:echarts/model/Component} componentModel\n * @return {module:echarts/view/Component}\n */\n\n\nechartsProto.getViewOfComponentModel = function (componentModel) {\n  return this._componentsMap[componentModel.__viewId];\n};\n/**\n * Get view of corresponding series model\n * @param  {module:echarts/model/Series} seriesModel\n * @return {module:echarts/view/Chart}\n */\n\n\nechartsProto.getViewOfSeriesModel = function (seriesModel) {\n  return this._chartsMap[seriesModel.__viewId];\n};\n\nvar updateMethods = {\n  prepareAndUpdate: function (payload) {\n    prepare(this);\n    updateMethods.update.call(this, payload);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  update: function (payload) {\n    // console.profile && console.profile('update');\n    var ecModel = this._model;\n    var api = this._api;\n    var zr = this._zr;\n    var coordSysMgr = this._coordSysMgr;\n    var scheduler = this._scheduler; // update before setOption\n\n    if (!ecModel) {\n      return;\n    }\n\n    scheduler.restoreData(ecModel, payload);\n    scheduler.performSeriesTasks(ecModel); // TODO\n    // Save total ecModel here for undo/redo (after restoring data and before processing data).\n    // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n    // Create new coordinate system each update\n    // In LineView may save the old coordinate system and use it to get the orignal point\n\n    coordSysMgr.create(ecModel, api);\n    scheduler.performDataProcessorTasks(ecModel, payload); // Current stream render is not supported in data process. So we can update\n    // stream modes after data processing, where the filtered data is used to\n    // deteming whether use progressive rendering.\n\n    updateStreamModes(this, ecModel); // We update stream modes before coordinate system updated, then the modes info\n    // can be fetched when coord sys updating (consider the barGrid extent fix). But\n    // the drawback is the full coord info can not be fetched. Fortunately this full\n    // coord is not requied in stream mode updater currently.\n\n    coordSysMgr.update(ecModel, api);\n    clearColorPalette(ecModel);\n    scheduler.performVisualTasks(ecModel, payload);\n    render(this, ecModel, api, payload); // Set background\n\n    var backgroundColor = ecModel.get('backgroundColor') || 'transparent'; // In IE8\n\n    if (!env.canvasSupported) {\n      var colorArr = colorTool.parse(backgroundColor);\n      backgroundColor = colorTool.stringify(colorArr, 'rgb');\n\n      if (colorArr[3] === 0) {\n        backgroundColor = 'transparent';\n      }\n    } else {\n      zr.setBackgroundColor(backgroundColor);\n    }\n\n    performPostUpdateFuncs(ecModel, api); // console.profile && console.profileEnd('update');\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateTransform: function (payload) {\n    var ecModel = this._model;\n    var ecIns = this;\n    var api = this._api; // update before setOption\n\n    if (!ecModel) {\n      return;\n    } // ChartView.markUpdateMethod(payload, 'updateTransform');\n\n\n    var componentDirtyList = [];\n    ecModel.eachComponent(function (componentType, componentModel) {\n      var componentView = ecIns.getViewOfComponentModel(componentModel);\n\n      if (componentView && componentView.__alive) {\n        if (componentView.updateTransform) {\n          var result = componentView.updateTransform(componentModel, ecModel, api, payload);\n          result && result.update && componentDirtyList.push(componentView);\n        } else {\n          componentDirtyList.push(componentView);\n        }\n      }\n    });\n    var seriesDirtyMap = zrUtil.createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      var chartView = ecIns._chartsMap[seriesModel.__viewId];\n\n      if (chartView.updateTransform) {\n        var result = chartView.updateTransform(seriesModel, ecModel, api, payload);\n        result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);\n      } else {\n        seriesDirtyMap.set(seriesModel.uid, 1);\n      }\n    });\n    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);\n\n    this._scheduler.performVisualTasks(ecModel, payload, {\n      setDirty: true,\n      dirtyMap: seriesDirtyMap\n    }); // Currently, not call render of components. Geo render cost a lot.\n    // renderComponents(ecIns, ecModel, api, payload, componentDirtyList);\n\n\n    renderSeries(ecIns, ecModel, api, payload, seriesDirtyMap);\n    performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateView: function (payload) {\n    var ecModel = this._model; // update before setOption\n\n    if (!ecModel) {\n      return;\n    }\n\n    ChartView.markUpdateMethod(payload, 'updateView');\n    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n\n    this._scheduler.performVisualTasks(ecModel, payload, {\n      setDirty: true\n    });\n\n    render(this, this._model, this._api, payload);\n    performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateVisual: function (payload) {\n    updateMethods.update.call(this, payload); // var ecModel = this._model;\n    // // update before setOption\n    // if (!ecModel) {\n    //     return;\n    // }\n    // ChartView.markUpdateMethod(payload, 'updateVisual');\n    // clearColorPalette(ecModel);\n    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // this._scheduler.performVisualTasks(ecModel, payload, {visualType: 'visual', setDirty: true});\n    // render(this, this._model, this._api, payload);\n    // performPostUpdateFuncs(ecModel, this._api);\n  },\n\n  /**\n   * @param {Object} payload\n   * @private\n   */\n  updateLayout: function (payload) {\n    updateMethods.update.call(this, payload); // var ecModel = this._model;\n    // // update before setOption\n    // if (!ecModel) {\n    //     return;\n    // }\n    // ChartView.markUpdateMethod(payload, 'updateLayout');\n    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.\n    // // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);\n    // this._scheduler.performVisualTasks(ecModel, payload, {setDirty: true});\n    // render(this, this._model, this._api, payload);\n    // performPostUpdateFuncs(ecModel, this._api);\n  }\n};\n\nfunction prepare(ecIns) {\n  var ecModel = ecIns._model;\n  var scheduler = ecIns._scheduler;\n  scheduler.restorePipelines(ecModel);\n  scheduler.prepareStageTasks();\n  prepareView(ecIns, 'component', ecModel, scheduler);\n  prepareView(ecIns, 'chart', ecModel, scheduler);\n  scheduler.plan();\n}\n/**\n * @private\n */\n\n\nfunction updateDirectly(ecIns, method, payload, mainType, subType) {\n  var ecModel = ecIns._model; // broadcast\n\n  if (!mainType) {\n    // FIXME\n    // Chart will not be update directly here, except set dirty.\n    // But there is no such scenario now.\n    each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);\n    return;\n  }\n\n  var query = {};\n  query[mainType + 'Id'] = payload[mainType + 'Id'];\n  query[mainType + 'Index'] = payload[mainType + 'Index'];\n  query[mainType + 'Name'] = payload[mainType + 'Name'];\n  var condition = {\n    mainType: mainType,\n    query: query\n  };\n  subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n  var excludeSeriesId = payload.excludeSeriesId;\n\n  if (excludeSeriesId != null) {\n    excludeSeriesId = zrUtil.createHashMap(modelUtil.normalizeToArray(excludeSeriesId));\n  } // If dispatchAction before setOption, do nothing.\n\n\n  ecModel && ecModel.eachComponent(condition, function (model) {\n    if (!excludeSeriesId || excludeSeriesId.get(model.id) == null) {\n      callView(ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId]);\n    }\n  }, ecIns);\n\n  function callView(view) {\n    view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);\n  }\n}\n/**\n * Resize the chart\n * @param {Object} opts\n * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n * @param {boolean} [opts.silent=false]\n */\n\n\nechartsProto.resize = function (opts) {\n  this._zr.resize(opts);\n\n  var ecModel = this._model; // Resize loading effect\n\n  this._loadingFX && this._loadingFX.resize();\n\n  if (!ecModel) {\n    return;\n  }\n\n  var optionChanged = ecModel.resetOption('media');\n  var silent = opts && opts.silent;\n  this[IN_MAIN_PROCESS] = true;\n  optionChanged && prepare(this);\n  updateMethods.update.call(this);\n  this[IN_MAIN_PROCESS] = false;\n  flushPendingActions.call(this, silent);\n  triggerUpdatedEvent.call(this, silent);\n};\n\nfunction updateStreamModes(ecIns, ecModel) {\n  var chartsMap = ecIns._chartsMap;\n  var scheduler = ecIns._scheduler;\n  ecModel.eachSeries(function (seriesModel) {\n    scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);\n  });\n}\n/**\n * Show loading effect\n * @param  {string} [name='default']\n * @param  {Object} [cfg]\n */\n\n\nechartsProto.showLoading = function (name, cfg) {\n  if (isObject(name)) {\n    cfg = name;\n    name = '';\n  }\n\n  name = name || 'default';\n  this.hideLoading();\n\n  if (!loadingEffects[name]) {\n    return;\n  }\n\n  var el = loadingEffects[name](this._api, cfg);\n  var zr = this._zr;\n  this._loadingFX = el;\n  zr.add(el);\n};\n/**\n * Hide loading effect\n */\n\n\nechartsProto.hideLoading = function () {\n  this._loadingFX && this._zr.remove(this._loadingFX);\n  this._loadingFX = null;\n};\n/**\n * @param {Object} eventObj\n * @return {Object}\n */\n\n\nechartsProto.makeActionFromEvent = function (eventObj) {\n  var payload = zrUtil.extend({}, eventObj);\n  payload.type = eventActionMap[eventObj.type];\n  return payload;\n};\n/**\n * @pubilc\n * @param {Object} payload\n * @param {string} [payload.type] Action type\n * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n * @param {boolean} [opt.silent=false] Whether trigger events.\n * @param {boolean} [opt.flush=undefined]\n *                  true: Flush immediately, and then pixel in canvas can be fetched\n *                      immediately. Caution: it might affect performance.\n *                  false: Not not flush.\n *                  undefined: Auto decide whether perform flush.\n */\n\n\nechartsProto.dispatchAction = function (payload, opt) {\n  if (!isObject(opt)) {\n    opt = {\n      silent: !!opt\n    };\n  }\n\n  if (!actions[payload.type]) {\n    return;\n  } // Avoid dispatch action before setOption. Especially in `connect`.\n\n\n  if (!this._model) {\n    return;\n  } // May dispatchAction in rendering procedure\n\n\n  if (this[IN_MAIN_PROCESS]) {\n    this._pendingActions.push(payload);\n\n    return;\n  }\n\n  doDispatchAction.call(this, payload, opt.silent);\n\n  if (opt.flush) {\n    this._zr.flush(true);\n  } else if (opt.flush !== false && env.browser.weChat) {\n    // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n    // hang when sliding page (on touch event), which cause that zr does not\n    // refresh util user interaction finished, which is not expected.\n    // But `dispatchAction` may be called too frequently when pan on touch\n    // screen, which impacts performance if do not throttle them.\n    this._throttledZrFlush();\n  }\n\n  flushPendingActions.call(this, opt.silent);\n  triggerUpdatedEvent.call(this, opt.silent);\n};\n\nfunction doDispatchAction(payload, silent) {\n  var payloadType = payload.type;\n  var escapeConnect = payload.escapeConnect;\n  var actionWrap = actions[payloadType];\n  var actionInfo = actionWrap.actionInfo;\n  var cptType = (actionInfo.update || 'update').split(':');\n  var updateMethod = cptType.pop();\n  cptType = cptType[0] != null && parseClassType(cptType[0]);\n  this[IN_MAIN_PROCESS] = true;\n  var payloads = [payload];\n  var batched = false; // Batch action\n\n  if (payload.batch) {\n    batched = true;\n    payloads = zrUtil.map(payload.batch, function (item) {\n      item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n      item.batch = null;\n      return item;\n    });\n  }\n\n  var eventObjBatch = [];\n  var eventObj;\n  var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n  each(payloads, function (batchItem) {\n    // Action can specify the event by return it.\n    eventObj = actionWrap.action(batchItem, this._model, this._api); // Emit event outside\n\n    eventObj = eventObj || zrUtil.extend({}, batchItem); // Convert type to eventType\n\n    eventObj.type = actionInfo.event || eventObj.type;\n    eventObjBatch.push(eventObj); // light update does not perform data process, layout and visual.\n\n    if (isHighDown) {\n      // method, payload, mainType, subType\n      updateDirectly(this, updateMethod, batchItem, 'series');\n    } else if (cptType) {\n      updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n    }\n  }, this);\n\n  if (updateMethod !== 'none' && !isHighDown && !cptType) {\n    // Still dirty\n    if (this[OPTION_UPDATED]) {\n      // FIXME Pass payload ?\n      prepare(this);\n      updateMethods.update.call(this, payload);\n      this[OPTION_UPDATED] = false;\n    } else {\n      updateMethods[updateMethod].call(this, payload);\n    }\n  } // Follow the rule of action batch\n\n\n  if (batched) {\n    eventObj = {\n      type: actionInfo.event || payloadType,\n      escapeConnect: escapeConnect,\n      batch: eventObjBatch\n    };\n  } else {\n    eventObj = eventObjBatch[0];\n  }\n\n  this[IN_MAIN_PROCESS] = false;\n  !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n}\n\nfunction flushPendingActions(silent) {\n  var pendingActions = this._pendingActions;\n\n  while (pendingActions.length) {\n    var payload = pendingActions.shift();\n    doDispatchAction.call(this, payload, silent);\n  }\n}\n\nfunction triggerUpdatedEvent(silent) {\n  !silent && this.trigger('updated');\n}\n/**\n * Event `rendered` is triggered when zr\n * rendered. It is useful for realtime\n * snapshot (reflect animation).\n *\n * Event `finished` is triggered when:\n * (1) zrender rendering finished.\n * (2) initial animation finished.\n * (3) progressive rendering finished.\n * (4) no pending action.\n * (5) no delayed setOption needs to be processed.\n */\n\n\nfunction bindRenderedEvent(zr, ecIns) {\n  zr.on('rendered', function () {\n    ecIns.trigger('rendered'); // The `finished` event should not be triggered repeatly,\n    // so it should only be triggered when rendering indeed happend\n    // in zrender. (Consider the case that dipatchAction is keep\n    // triggering when mouse move).\n\n    if ( // Although zr is dirty if initial animation is not finished\n    // and this checking is called on frame, we also check\n    // animation finished for robustness.\n    zr.animation.isFinished() && !ecIns[OPTION_UPDATED] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) {\n      ecIns.trigger('finished');\n    }\n  });\n}\n/**\n * @param {Object} params\n * @param {number} params.seriesIndex\n * @param {Array|TypedArray} params.data\n */\n\n\nechartsProto.appendData = function (params) {\n  var seriesIndex = params.seriesIndex;\n  var ecModel = this.getModel();\n  var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n  seriesModel.appendData(params); // Note: `appendData` does not support that update extent of coordinate\n  // system, util some scenario require that. In the expected usage of\n  // `appendData`, the initial extent of coordinate system should better\n  // be fixed by axis `min`/`max` setting or initial data, otherwise if\n  // the extent changed while `appendData`, the location of the painted\n  // graphic elements have to be changed, which make the usage of\n  // `appendData` meaningless.\n\n  this._scheduler.unfinished = true;\n};\n/**\n * Register event\n * @method\n */\n\n\nechartsProto.on = createRegisterEventWithLowercaseName('on');\nechartsProto.off = createRegisterEventWithLowercaseName('off');\nechartsProto.one = createRegisterEventWithLowercaseName('one');\n/**\n * Prepare view instances of charts and components\n * @param  {module:echarts/model/Global} ecModel\n * @private\n */\n\nfunction prepareView(ecIns, type, ecModel, scheduler) {\n  var isComponent = type === 'component';\n  var viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;\n  var viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;\n  var zr = ecIns._zr;\n  var api = ecIns._api;\n\n  for (var i = 0; i < viewList.length; i++) {\n    viewList[i].__alive = false;\n  }\n\n  isComponent ? ecModel.eachComponent(function (componentType, model) {\n    componentType !== 'series' && doPrepare(model);\n  }) : ecModel.eachSeries(doPrepare);\n\n  function doPrepare(model) {\n    // Consider: id same and type changed.\n    var viewId = '_ec_' + model.id + '_' + model.type;\n    var view = viewMap[viewId];\n\n    if (!view) {\n      var classType = parseClassType(model.type);\n      var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);\n      view = new Clazz();\n      view.init(ecModel, api);\n      viewMap[viewId] = view;\n      viewList.push(view);\n      zr.add(view.group);\n    }\n\n    model.__viewId = view.__id = viewId;\n    view.__alive = true;\n    view.__model = model;\n    view.group.__ecComponentInfo = {\n      mainType: model.mainType,\n      index: model.componentIndex\n    };\n    !isComponent && scheduler.prepareView(view, model, ecModel, api);\n  }\n\n  for (var i = 0; i < viewList.length;) {\n    var view = viewList[i];\n\n    if (!view.__alive) {\n      !isComponent && view.renderTask.dispose();\n      zr.remove(view.group);\n      view.dispose(ecModel, api);\n      viewList.splice(i, 1);\n      delete viewMap[view.__id];\n      view.__id = view.group.__ecComponentInfo = null;\n    } else {\n      i++;\n    }\n  }\n} // /**\n//  * Encode visual infomation from data after data processing\n//  *\n//  * @param {module:echarts/model/Global} ecModel\n//  * @param {object} layout\n//  * @param {boolean} [layoutFilter] `true`: only layout,\n//  *                                 `false`: only not layout,\n//  *                                 `null`/`undefined`: all.\n//  * @param {string} taskBaseTag\n//  * @private\n//  */\n// function startVisualEncoding(ecIns, ecModel, api, payload, layoutFilter) {\n//     each(visualFuncs, function (visual, index) {\n//         var isLayout = visual.isLayout;\n//         if (layoutFilter == null\n//             || (layoutFilter === false && !isLayout)\n//             || (layoutFilter === true && isLayout)\n//         ) {\n//             visual.func(ecModel, api, payload);\n//         }\n//     });\n// }\n\n\nfunction clearColorPalette(ecModel) {\n  ecModel.clearColorPalette();\n  ecModel.eachSeries(function (seriesModel) {\n    seriesModel.clearColorPalette();\n  });\n}\n\nfunction render(ecIns, ecModel, api, payload) {\n  renderComponents(ecIns, ecModel, api, payload);\n  each(ecIns._chartsViews, function (chart) {\n    chart.__alive = false;\n  });\n  renderSeries(ecIns, ecModel, api, payload); // Remove groups of unrendered charts\n\n  each(ecIns._chartsViews, function (chart) {\n    if (!chart.__alive) {\n      chart.remove(ecModel, api);\n    }\n  });\n}\n\nfunction renderComponents(ecIns, ecModel, api, payload, dirtyList) {\n  each(dirtyList || ecIns._componentsViews, function (componentView) {\n    var componentModel = componentView.__model;\n    componentView.render(componentModel, ecModel, api, payload);\n    updateZ(componentModel, componentView);\n  });\n}\n/**\n * Render each chart and component\n * @private\n */\n\n\nfunction renderSeries(ecIns, ecModel, api, payload, dirtyMap) {\n  // Render all charts\n  var scheduler = ecIns._scheduler;\n  var unfinished;\n  ecModel.eachSeries(function (seriesModel) {\n    var chartView = ecIns._chartsMap[seriesModel.__viewId];\n    chartView.__alive = true;\n    var renderTask = chartView.renderTask;\n    scheduler.updatePayload(renderTask, payload);\n\n    if (dirtyMap && dirtyMap.get(seriesModel.uid)) {\n      renderTask.dirty();\n    }\n\n    unfinished |= renderTask.perform(scheduler.getPerformArgs(renderTask));\n    chartView.group.silent = !!seriesModel.get('silent');\n    updateZ(seriesModel, chartView);\n    updateBlend(seriesModel, chartView);\n  });\n  scheduler.unfinished |= unfinished; // If use hover layer\n\n  updateHoverLayerStatus(ecIns._zr, ecModel); // Add aria\n\n  aria(ecIns._zr.dom, ecModel);\n}\n\nfunction performPostUpdateFuncs(ecModel, api) {\n  each(postUpdateFuncs, function (func) {\n    func(ecModel, api);\n  });\n}\n\nvar MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];\n/**\n * @private\n */\n\nechartsProto._initEvents = function () {\n  each(MOUSE_EVENT_NAMES, function (eveName) {\n    this._zr.on(eveName, function (e) {\n      var ecModel = this.getModel();\n      var el = e.target;\n      var params; // no e.target when 'globalout'.\n\n      if (eveName === 'globalout') {\n        params = {};\n      } else if (el && el.dataIndex != null) {\n        var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n        params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\n      } // If element has custom eventData of components\n      else if (el && el.eventData) {\n          params = zrUtil.extend({}, el.eventData);\n        }\n\n      if (params) {\n        params.event = e;\n        params.type = eveName;\n        this.trigger(eveName, params);\n      }\n    }, this);\n  }, this);\n  each(eventActionMap, function (actionType, eventType) {\n    this._messageCenter.on(eventType, function (event) {\n      this.trigger(eventType, event);\n    }, this);\n  }, this);\n};\n/**\n * @return {boolean}\n */\n\n\nechartsProto.isDisposed = function () {\n  return this._disposed;\n};\n/**\n * Clear\n */\n\n\nechartsProto.clear = function () {\n  this.setOption({\n    series: []\n  }, true);\n};\n/**\n * Dispose instance\n */\n\n\nechartsProto.dispose = function () {\n  if (this._disposed) {\n    return;\n  }\n\n  this._disposed = true;\n  modelUtil.setAttribute(this.getDom(), DOM_ATTRIBUTE_KEY, '');\n  var api = this._api;\n  var ecModel = this._model;\n  each(this._componentsViews, function (component) {\n    component.dispose(ecModel, api);\n  });\n  each(this._chartsViews, function (chart) {\n    chart.dispose(ecModel, api);\n  }); // Dispose after all views disposed\n\n  this._zr.dispose();\n\n  delete instances[this.id];\n};\n\nzrUtil.mixin(ECharts, Eventful);\n\nfunction updateHoverLayerStatus(zr, ecModel) {\n  var storage = zr.storage;\n  var elCount = 0;\n  storage.traverse(function (el) {\n    if (!el.isGroup) {\n      elCount++;\n    }\n  });\n\n  if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n    storage.traverse(function (el) {\n      if (!el.isGroup) {\n        // Don't switch back.\n        el.useHoverLayer = true;\n      }\n    });\n  }\n}\n/**\n * Update chart progressive and blend.\n * @param {module:echarts/model/Series|module:echarts/model/Component} model\n * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n */\n\n\nfunction updateBlend(seriesModel, chartView) {\n  var blendMode = seriesModel.get('blendMode') || null;\n  chartView.group.traverse(function (el) {\n    // FIXME marker and other components\n    if (!el.isGroup) {\n      // Only set if blendMode is changed. In case element is incremental and don't wan't to rerender.\n      if (el.style.blend !== blendMode) {\n        el.setStyle('blend', blendMode);\n      }\n    }\n\n    if (el.eachPendingDisplayable) {\n      el.eachPendingDisplayable(function (displayable) {\n        displayable.setStyle('blend', blendMode);\n      });\n    }\n  });\n}\n/**\n * @param {module:echarts/model/Series|module:echarts/model/Component} model\n * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n */\n\n\nfunction updateZ(model, view) {\n  var z = model.get('z');\n  var zlevel = model.get('zlevel'); // Set z and zlevel\n\n  view.group.traverse(function (el) {\n    if (el.type !== 'group') {\n      z != null && (el.z = z);\n      zlevel != null && (el.zlevel = zlevel);\n    }\n  });\n}\n\nfunction createExtensionAPI(ecInstance) {\n  var coordSysMgr = ecInstance._coordSysMgr;\n  return zrUtil.extend(new ExtensionAPI(ecInstance), {\n    // Inject methods\n    getCoordinateSystems: zrUtil.bind(coordSysMgr.getCoordinateSystems, coordSysMgr),\n    getComponentByElement: function (el) {\n      while (el) {\n        var modelInfo = el.__ecComponentInfo;\n\n        if (modelInfo != null) {\n          return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);\n        }\n\n        el = el.parent;\n      }\n    }\n  });\n}\n/**\n * @type {Object} key: actionType.\n * @inner\n */\n\n\nvar actions = {};\n/**\n * Map eventType to actionType\n * @type {Object}\n */\n\nvar eventActionMap = {};\n/**\n * Data processor functions of each stage\n * @type {Array.<Object.<string, Function>>}\n * @inner\n */\n\nvar dataProcessorFuncs = [];\n/**\n * @type {Array.<Function>}\n * @inner\n */\n\nvar optionPreprocessorFuncs = [];\n/**\n * @type {Array.<Function>}\n * @inner\n */\n\nvar postUpdateFuncs = [];\n/**\n * Visual encoding functions of each stage\n * @type {Array.<Object.<string, Function>>}\n */\n\nvar visualFuncs = [];\n/**\n * Theme storage\n * @type {Object.<key, Object>}\n */\n\nvar themeStorage = {};\n/**\n * Loading effects\n */\n\nvar loadingEffects = {};\nvar instances = {};\nvar connectedGroups = {};\nvar idBase = new Date() - 0;\nvar groupIdBase = new Date() - 0;\nvar DOM_ATTRIBUTE_KEY = '_echarts_instance_';\nvar mapDataStores = {};\n\nfunction enableConnect(chart) {\n  var STATUS_PENDING = 0;\n  var STATUS_UPDATING = 1;\n  var STATUS_UPDATED = 2;\n  var STATUS_KEY = '__connectUpdateStatus';\n\n  function updateConnectedChartsStatus(charts, status) {\n    for (var i = 0; i < charts.length; i++) {\n      var otherChart = charts[i];\n      otherChart[STATUS_KEY] = status;\n    }\n  }\n\n  each(eventActionMap, function (actionType, eventType) {\n    chart._messageCenter.on(eventType, function (event) {\n      if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n        if (event && event.escapeConnect) {\n          return;\n        }\n\n        var action = chart.makeActionFromEvent(event);\n        var otherCharts = [];\n        each(instances, function (otherChart) {\n          if (otherChart !== chart && otherChart.group === chart.group) {\n            otherCharts.push(otherChart);\n          }\n        });\n        updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n        each(otherCharts, function (otherChart) {\n          if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n            otherChart.dispatchAction(action);\n          }\n        });\n        updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n      }\n    });\n  });\n}\n/**\n * @param {HTMLElement} dom\n * @param {Object} [theme]\n * @param {Object} opts\n * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n * @param {string} [opts.renderer] Currently only 'canvas' is supported.\n * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n *                              Can be 'auto' (the same as null/undefined)\n * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n *                               Can be 'auto' (the same as null/undefined)\n */\n\n\nfunction init(dom, theme, opts) {\n  var existInstance = getInstanceByDom(dom);\n\n  if (existInstance) {\n    return existInstance;\n  }\n\n  var chart = new ECharts(dom, theme, opts);\n  chart.id = 'ec_' + idBase++;\n  instances[chart.id] = chart;\n  modelUtil.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);\n  enableConnect(chart);\n  return chart;\n}\n/**\n * @return {string|Array.<module:echarts~ECharts>} groupId\n */\n\n\nfunction connect(groupId) {\n  // Is array of charts\n  if (zrUtil.isArray(groupId)) {\n    var charts = groupId;\n    groupId = null; // If any chart has group\n\n    each(charts, function (chart) {\n      if (chart.group != null) {\n        groupId = chart.group;\n      }\n    });\n    groupId = groupId || 'g_' + groupIdBase++;\n    each(charts, function (chart) {\n      chart.group = groupId;\n    });\n  }\n\n  connectedGroups[groupId] = true;\n  return groupId;\n}\n/**\n * @DEPRECATED\n * @return {string} groupId\n */\n\n\nfunction disConnect(groupId) {\n  connectedGroups[groupId] = false;\n}\n/**\n * @return {string} groupId\n */\n\n\nvar disconnect = disConnect;\n/**\n * Dispose a chart instance\n * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n */\n\nfunction dispose(chart) {\n  if (typeof chart === 'string') {\n    chart = instances[chart];\n  } else if (!(chart instanceof ECharts)) {\n    // Try to treat as dom\n    chart = getInstanceByDom(chart);\n  }\n\n  if (chart instanceof ECharts && !chart.isDisposed()) {\n    chart.dispose();\n  }\n}\n/**\n * @param  {HTMLElement} dom\n * @return {echarts~ECharts}\n */\n\n\nfunction getInstanceByDom(dom) {\n  return instances[modelUtil.getAttribute(dom, DOM_ATTRIBUTE_KEY)];\n}\n/**\n * @param {string} key\n * @return {echarts~ECharts}\n */\n\n\nfunction getInstanceById(key) {\n  return instances[key];\n}\n/**\n * Register theme\n */\n\n\nfunction registerTheme(name, theme) {\n  themeStorage[name] = theme;\n}\n/**\n * Register option preprocessor\n * @param {Function} preprocessorFunc\n */\n\n\nfunction registerPreprocessor(preprocessorFunc) {\n  optionPreprocessorFuncs.push(preprocessorFunc);\n}\n/**\n * @param {number} [priority=1000]\n * @param {Object|Function} processor\n */\n\n\nfunction registerProcessor(priority, processor) {\n  normalizeRegister(dataProcessorFuncs, priority, processor, PRIORITY_PROCESSOR_FILTER);\n}\n/**\n * Register postUpdater\n * @param {Function} postUpdateFunc\n */\n\n\nfunction registerPostUpdate(postUpdateFunc) {\n  postUpdateFuncs.push(postUpdateFunc);\n}\n/**\n * Usage:\n * registerAction('someAction', 'someEvent', function () { ... });\n * registerAction('someAction', function () { ... });\n * registerAction(\n *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n *     function () { ... }\n * );\n *\n * @param {(string|Object)} actionInfo\n * @param {string} actionInfo.type\n * @param {string} [actionInfo.event]\n * @param {string} [actionInfo.update]\n * @param {string} [eventName]\n * @param {Function} action\n */\n\n\nfunction registerAction(actionInfo, eventName, action) {\n  if (typeof eventName === 'function') {\n    action = eventName;\n    eventName = '';\n  }\n\n  var actionType = isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {\n    event: eventName\n  }][0]; // Event name is all lowercase\n\n  actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n  eventName = actionInfo.event; // Validate action type and event name.\n\n  assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n  if (!actions[actionType]) {\n    actions[actionType] = {\n      action: action,\n      actionInfo: actionInfo\n    };\n  }\n\n  eventActionMap[eventName] = actionType;\n}\n/**\n * @param {string} type\n * @param {*} CoordinateSystem\n */\n\n\nfunction registerCoordinateSystem(type, CoordinateSystem) {\n  CoordinateSystemManager.register(type, CoordinateSystem);\n}\n/**\n * Get dimensions of specified coordinate system.\n * @param {string} type\n * @return {Array.<string|Object>}\n */\n\n\nfunction getCoordinateSystemDimensions(type) {\n  var coordSysCreator = CoordinateSystemManager.get(type);\n\n  if (coordSysCreator) {\n    return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();\n  }\n}\n/**\n * Layout is a special stage of visual encoding\n * Most visual encoding like color are common for different chart\n * But each chart has it's own layout algorithm\n *\n * @param {number} [priority=1000]\n * @param {Function} layoutTask\n */\n\n\nfunction registerLayout(priority, layoutTask) {\n  normalizeRegister(visualFuncs, priority, layoutTask, PRIORITY_VISUAL_LAYOUT, 'layout');\n}\n/**\n * @param {number} [priority=3000]\n * @param {module:echarts/stream/Task} visualTask\n */\n\n\nfunction registerVisual(priority, visualTask) {\n  normalizeRegister(visualFuncs, priority, visualTask, PRIORITY_VISUAL_CHART, 'visual');\n}\n/**\n * @param {Object|Function} fn: {seriesType, createOnAllSeries, performRawSeries, reset}\n */\n\n\nfunction normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {\n  if (isFunction(priority) || isObject(priority)) {\n    fn = priority;\n    priority = defaultPriority;\n  }\n\n  var stageHandler = Scheduler.wrapStageHandler(fn, visualType);\n  stageHandler.__prio = priority;\n  stageHandler.__raw = fn;\n  targetList.push(stageHandler);\n  return stageHandler;\n}\n/**\n * @param {string} name\n */\n\n\nfunction registerLoading(name, loadingFx) {\n  loadingEffects[name] = loadingFx;\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendComponentModel(opts\n/*, superClass*/\n) {\n  // var Clazz = ComponentModel;\n  // if (superClass) {\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n  // }\n  return ComponentModel.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendComponentView(opts\n/*, superClass*/\n) {\n  // var Clazz = ComponentView;\n  // if (superClass) {\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n  // }\n  return ComponentView.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendSeriesModel(opts\n/*, superClass*/\n) {\n  // var Clazz = SeriesModel;\n  // if (superClass) {\n  //     superClass = 'series.' + superClass.replace('series.', '');\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n  // }\n  return SeriesModel.extend(opts);\n}\n/**\n * @param {Object} opts\n * @param {string} [superClass]\n */\n\n\nfunction extendChartView(opts\n/*, superClass*/\n) {\n  // var Clazz = ChartView;\n  // if (superClass) {\n  //     superClass = superClass.replace('series.', '');\n  //     var classType = parseClassType(superClass);\n  //     Clazz = ChartView.getClass(classType.main, true);\n  // }\n  return ChartView.extend(opts);\n}\n/**\n * ZRender need a canvas context to do measureText.\n * But in node environment canvas may be created by node-canvas.\n * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n *\n * Be careful of using it in the browser.\n *\n * @param {Function} creator\n * @example\n *     var Canvas = require('canvas');\n *     var echarts = require('echarts');\n *     echarts.setCanvasCreator(function () {\n *         // Small size is enough.\n *         return new Canvas(32, 32);\n *     });\n */\n\n\nfunction setCanvasCreator(creator) {\n  zrUtil.$override('createCanvas', creator);\n}\n/**\n * @param {string} mapName\n * @param {Object|string} geoJson\n * @param {Object} [specialAreas]\n *\n * @example\n *     $.get('USA.json', function (geoJson) {\n *         echarts.registerMap('USA', geoJson);\n *         // Or\n *         echarts.registerMap('USA', {\n *             geoJson: geoJson,\n *             specialAreas: {}\n *         })\n *     });\n */\n\n\nfunction registerMap(mapName, geoJson, specialAreas) {\n  if (geoJson.geoJson && !geoJson.features) {\n    specialAreas = geoJson.specialAreas;\n    geoJson = geoJson.geoJson;\n  }\n\n  if (typeof geoJson === 'string') {\n    geoJson = typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(geoJson) : new Function('return (' + geoJson + ');')();\n  }\n\n  mapDataStores[mapName] = {\n    geoJson: geoJson,\n    specialAreas: specialAreas\n  };\n}\n/**\n * @param {string} mapName\n * @return {Object}\n */\n\n\nfunction getMap(mapName) {\n  return mapDataStores[mapName];\n}\n\nregisterVisual(PRIORITY_VISUAL_GLOBAL, seriesColor);\nregisterPreprocessor(backwardCompat);\nregisterProcessor(PRIORITY_PROCESSOR_STATISTIC, dataStack);\nregisterLoading('default', loadingDefault); // Default actions\n\nregisterAction({\n  type: 'highlight',\n  event: 'highlight',\n  update: 'highlight'\n}, zrUtil.noop);\nregisterAction({\n  type: 'downplay',\n  event: 'downplay',\n  update: 'downplay'\n}, zrUtil.noop); // Default theme\n\nregisterTheme('light', lightTheme);\nregisterTheme('dark', darkTheme); // For backward compatibility, where the namespace `dataTool` will\n// be mounted on `echarts` is the extension `dataTool` is imported.\n\nvar dataTool = {};\nexports.version = version;\nexports.dependencies = dependencies;\nexports.PRIORITY = PRIORITY;\nexports.init = init;\nexports.connect = connect;\nexports.disConnect = disConnect;\nexports.disconnect = disconnect;\nexports.dispose = dispose;\nexports.getInstanceByDom = getInstanceByDom;\nexports.getInstanceById = getInstanceById;\nexports.registerTheme = registerTheme;\nexports.registerPreprocessor = registerPreprocessor;\nexports.registerProcessor = registerProcessor;\nexports.registerPostUpdate = registerPostUpdate;\nexports.registerAction = registerAction;\nexports.registerCoordinateSystem = registerCoordinateSystem;\nexports.getCoordinateSystemDimensions = getCoordinateSystemDimensions;\nexports.registerLayout = registerLayout;\nexports.registerVisual = registerVisual;\nexports.registerLoading = registerLoading;\nexports.extendComponentModel = extendComponentModel;\nexports.extendComponentView = extendComponentView;\nexports.extendSeriesModel = extendSeriesModel;\nexports.extendChartView = extendChartView;\nexports.setCanvasCreator = setCanvasCreator;\nexports.registerMap = registerMap;\nexports.getMap = getMap;\nexports.dataTool = dataTool;\nvar ___ec_export = require(\"./export\");\n(function () {\n    for (var key in ___ec_export) {\n        if (___ec_export.hasOwnProperty(key)) {\n            exports[key] = ___ec_export[key];\n        }\n    }\n})();"],"mappings":"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"},"metadata":{},"sourceType":"script"}