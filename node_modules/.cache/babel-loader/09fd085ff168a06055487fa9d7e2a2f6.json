{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Model = require(\"../../model/Model\");\n\nvar AxisView = require(\"./AxisView\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];\n\nfunction getAxisLineShape(polar, rExtent, angle) {\n  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());\n  var start = polar.coordToPoint([rExtent[0], angle]);\n  var end = polar.coordToPoint([rExtent[1], angle]);\n  return {\n    x1: start[0],\n    y1: start[1],\n    x2: end[0],\n    y2: end[1]\n  };\n}\n\nfunction getRadiusIdx(polar) {\n  var radiusAxis = polar.getRadiusAxis();\n  return radiusAxis.inverse ? 0 : 1;\n} // Remove the last tick which will overlap the first tick\n\n\nfunction fixAngleOverlap(list) {\n  var firstItem = list[0];\n  var lastItem = list[list.length - 1];\n\n  if (firstItem && lastItem && Math.abs(Math.abs(firstItem.coord - lastItem.coord) - 360) < 1e-4) {\n    list.pop();\n  }\n}\n\nvar _default = AxisView.extend({\n  type: 'angleAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (angleAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!angleAxisModel.get('show')) {\n      return;\n    }\n\n    var angleAxis = angleAxisModel.axis;\n    var polar = angleAxis.polar;\n    var radiusExtent = polar.getRadiusAxis().getExtent();\n    var ticksAngles = angleAxis.getTicksCoords();\n    var labels = zrUtil.map(angleAxis.getViewLabels(), function (labelItem) {\n      var labelItem = zrUtil.clone(labelItem);\n      labelItem.coord = angleAxis.dataToCoord(labelItem.tickValue);\n      return labelItem;\n    });\n    fixAngleOverlap(labels);\n    fixAngleOverlap(ticksAngles);\n    zrUtil.each(elementList, function (name) {\n      if (angleAxisModel.get(name + '.show') && (!angleAxis.scale.isBlank() || name === 'axisLine')) {\n        this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent, labels);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');\n    var circle = new graphic.Circle({\n      shape: {\n        cx: polar.cx,\n        cy: polar.cy,\n        r: radiusExtent[getRadiusIdx(polar)]\n      },\n      style: lineStyleModel.getLineStyle(),\n      z2: 1,\n      silent: true\n    });\n    circle.style.fill = null;\n    this.group.add(circle);\n  },\n\n  /**\n   * @private\n   */\n  _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = zrUtil.map(ticksAngles, function (tickAngleItem) {\n      return new graphic.Line({\n        shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngleItem.coord)\n      });\n    });\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      })\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent, labels) {\n    var rawCategoryData = angleAxisModel.getCategories(true);\n    var commonLabelModel = angleAxisModel.getModel('axisLabel');\n    var labelMargin = commonLabelModel.get('margin'); // Use length of ticksAngles because it may remove the last tick to avoid overlapping\n\n    zrUtil.each(labels, function (labelItem, idx) {\n      var labelModel = commonLabelModel;\n      var tickValue = labelItem.tickValue;\n      var r = radiusExtent[getRadiusIdx(polar)];\n      var p = polar.coordToPoint([r + labelMargin, labelItem.coord]);\n      var cx = polar.cx;\n      var cy = polar.cy;\n      var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';\n      var labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';\n\n      if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {\n        labelModel = new Model(rawCategoryData[tickValue].textStyle, commonLabelModel, commonLabelModel.ecModel);\n      }\n\n      var textEl = new graphic.Text({\n        silent: true\n      });\n      this.group.add(textEl);\n      graphic.setTextStyle(textEl.style, labelModel, {\n        x: p[0],\n        y: p[1],\n        textFill: labelModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\n        text: labelItem.formattedLabel,\n        textAlign: labelTextAlign,\n        textVerticalAlign: labelTextVerticalAlign\n      });\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var splitLineModel = angleAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i].coord)\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length]\n        }, lineStyleModel.getLineStyle()),\n        silent: true,\n        z: angleAxisModel.get('z')\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    if (!ticksAngles.length) {\n      return;\n    }\n\n    var splitAreaModel = angleAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var RADIAN = Math.PI / 180;\n    var prevAngle = -ticksAngles[0].coord * RADIAN;\n    var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\n    var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\n    var clockwise = angleAxisModel.get('clockwise');\n\n    for (var i = 1; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: r0,\n          r: r1,\n          startAngle: prevAngle,\n          endAngle: -ticksAngles[i].coord * RADIAN,\n          clockwise: clockwise\n        },\n        silent: true\n      }));\n      prevAngle = -ticksAngles[i].coord * RADIAN;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","graphic","Model","AxisView","elementList","getAxisLineShape","polar","rExtent","angle","slice","reverse","start","coordToPoint","end","x1","y1","x2","y2","getRadiusIdx","radiusAxis","getRadiusAxis","inverse","fixAngleOverlap","list","firstItem","lastItem","length","Math","abs","coord","pop","_default","extend","type","axisPointerClass","render","angleAxisModel","ecModel","group","removeAll","get","angleAxis","axis","radiusExtent","getExtent","ticksAngles","getTicksCoords","labels","map","getViewLabels","labelItem","clone","dataToCoord","tickValue","each","name","scale","isBlank","_axisLine","lineStyleModel","getModel","circle","Circle","shape","cx","cy","r","style","getLineStyle","z2","silent","fill","add","_axisTick","tickModel","tickLen","radius","lines","tickAngleItem","Line","mergePath","defaults","stroke","_axisLabel","rawCategoryData","getCategories","commonLabelModel","labelMargin","idx","labelModel","p","labelTextAlign","labelTextVerticalAlign","textStyle","textEl","Text","setTextStyle","x","y","textFill","getTextColor","text","formattedLabel","textAlign","textVerticalAlign","_splitLine","splitLineModel","lineColors","lineCount","Array","splitLines","i","colorIndex","push","z","_splitArea","splitAreaModel","areaStyleModel","areaColors","splitAreas","RADIAN","PI","prevAngle","r0","min","r1","max","clockwise","Sector","startAngle","endAngle","getAreaStyle","module","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/component/axis/AngleAxisView.js"],"sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Model = require(\"../../model/Model\");\n\nvar AxisView = require(\"./AxisView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];\n\nfunction getAxisLineShape(polar, rExtent, angle) {\n  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());\n  var start = polar.coordToPoint([rExtent[0], angle]);\n  var end = polar.coordToPoint([rExtent[1], angle]);\n  return {\n    x1: start[0],\n    y1: start[1],\n    x2: end[0],\n    y2: end[1]\n  };\n}\n\nfunction getRadiusIdx(polar) {\n  var radiusAxis = polar.getRadiusAxis();\n  return radiusAxis.inverse ? 0 : 1;\n} // Remove the last tick which will overlap the first tick\n\n\nfunction fixAngleOverlap(list) {\n  var firstItem = list[0];\n  var lastItem = list[list.length - 1];\n\n  if (firstItem && lastItem && Math.abs(Math.abs(firstItem.coord - lastItem.coord) - 360) < 1e-4) {\n    list.pop();\n  }\n}\n\nvar _default = AxisView.extend({\n  type: 'angleAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (angleAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!angleAxisModel.get('show')) {\n      return;\n    }\n\n    var angleAxis = angleAxisModel.axis;\n    var polar = angleAxis.polar;\n    var radiusExtent = polar.getRadiusAxis().getExtent();\n    var ticksAngles = angleAxis.getTicksCoords();\n    var labels = zrUtil.map(angleAxis.getViewLabels(), function (labelItem) {\n      var labelItem = zrUtil.clone(labelItem);\n      labelItem.coord = angleAxis.dataToCoord(labelItem.tickValue);\n      return labelItem;\n    });\n    fixAngleOverlap(labels);\n    fixAngleOverlap(ticksAngles);\n    zrUtil.each(elementList, function (name) {\n      if (angleAxisModel.get(name + '.show') && (!angleAxis.scale.isBlank() || name === 'axisLine')) {\n        this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent, labels);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');\n    var circle = new graphic.Circle({\n      shape: {\n        cx: polar.cx,\n        cy: polar.cy,\n        r: radiusExtent[getRadiusIdx(polar)]\n      },\n      style: lineStyleModel.getLineStyle(),\n      z2: 1,\n      silent: true\n    });\n    circle.style.fill = null;\n    this.group.add(circle);\n  },\n\n  /**\n   * @private\n   */\n  _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = zrUtil.map(ticksAngles, function (tickAngleItem) {\n      return new graphic.Line({\n        shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngleItem.coord)\n      });\n    });\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      })\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent, labels) {\n    var rawCategoryData = angleAxisModel.getCategories(true);\n    var commonLabelModel = angleAxisModel.getModel('axisLabel');\n    var labelMargin = commonLabelModel.get('margin'); // Use length of ticksAngles because it may remove the last tick to avoid overlapping\n\n    zrUtil.each(labels, function (labelItem, idx) {\n      var labelModel = commonLabelModel;\n      var tickValue = labelItem.tickValue;\n      var r = radiusExtent[getRadiusIdx(polar)];\n      var p = polar.coordToPoint([r + labelMargin, labelItem.coord]);\n      var cx = polar.cx;\n      var cy = polar.cy;\n      var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';\n      var labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';\n\n      if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {\n        labelModel = new Model(rawCategoryData[tickValue].textStyle, commonLabelModel, commonLabelModel.ecModel);\n      }\n\n      var textEl = new graphic.Text({\n        silent: true\n      });\n      this.group.add(textEl);\n      graphic.setTextStyle(textEl.style, labelModel, {\n        x: p[0],\n        y: p[1],\n        textFill: labelModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\n        text: labelItem.formattedLabel,\n        textAlign: labelTextAlign,\n        textVerticalAlign: labelTextVerticalAlign\n      });\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var splitLineModel = angleAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i].coord)\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length]\n        }, lineStyleModel.getLineStyle()),\n        silent: true,\n        z: angleAxisModel.get('z')\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    if (!ticksAngles.length) {\n      return;\n    }\n\n    var splitAreaModel = angleAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var RADIAN = Math.PI / 180;\n    var prevAngle = -ticksAngles[0].coord * RADIAN;\n    var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\n    var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\n    var clockwise = angleAxisModel.get('clockwise');\n\n    for (var i = 1; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: r0,\n          r: r1,\n          startAngle: prevAngle,\n          endAngle: -ticksAngles[i].coord * RADIAN,\n          clockwise: clockwise\n        },\n        silent: true\n      }));\n      prevAngle = -ticksAngles[i].coord * RADIAN;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n\nmodule.exports = _default;"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,mBAAD,CAAnB;;AAEA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,WAAW,GAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,WAAnD,CAAlB;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,OAAjC,EAA0CC,KAA1C,EAAiD;EAC/CD,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAApB,KAA4BA,OAAO,GAAGA,OAAO,CAACE,KAAR,GAAgBC,OAAhB,EAAtC;EACA,IAAIC,KAAK,GAAGL,KAAK,CAACM,YAAN,CAAmB,CAACL,OAAO,CAAC,CAAD,CAAR,EAAaC,KAAb,CAAnB,CAAZ;EACA,IAAIK,GAAG,GAAGP,KAAK,CAACM,YAAN,CAAmB,CAACL,OAAO,CAAC,CAAD,CAAR,EAAaC,KAAb,CAAnB,CAAV;EACA,OAAO;IACLM,EAAE,EAAEH,KAAK,CAAC,CAAD,CADJ;IAELI,EAAE,EAAEJ,KAAK,CAAC,CAAD,CAFJ;IAGLK,EAAE,EAAEH,GAAG,CAAC,CAAD,CAHF;IAILI,EAAE,EAAEJ,GAAG,CAAC,CAAD;EAJF,CAAP;AAMD;;AAED,SAASK,YAAT,CAAsBZ,KAAtB,EAA6B;EAC3B,IAAIa,UAAU,GAAGb,KAAK,CAACc,aAAN,EAAjB;EACA,OAAOD,UAAU,CAACE,OAAX,GAAqB,CAArB,GAAyB,CAAhC;AACD,C,CAAC;;;AAGF,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;EAC7B,IAAIC,SAAS,GAAGD,IAAI,CAAC,CAAD,CAApB;EACA,IAAIE,QAAQ,GAAGF,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAAnB;;EAEA,IAAIF,SAAS,IAAIC,QAAb,IAAyBE,IAAI,CAACC,GAAL,CAASD,IAAI,CAACC,GAAL,CAASJ,SAAS,CAACK,KAAV,GAAkBJ,QAAQ,CAACI,KAApC,IAA6C,GAAtD,IAA6D,IAA1F,EAAgG;IAC9FN,IAAI,CAACO,GAAL;EACD;AACF;;AAED,IAAIC,QAAQ,GAAG5B,QAAQ,CAAC6B,MAAT,CAAgB;EAC7BC,IAAI,EAAE,WADuB;EAE7BC,gBAAgB,EAAE,kBAFW;EAG7BC,MAAM,EAAE,UAAUC,cAAV,EAA0BC,OAA1B,EAAmC;IACzC,KAAKC,KAAL,CAAWC,SAAX;;IAEA,IAAI,CAACH,cAAc,CAACI,GAAf,CAAmB,MAAnB,CAAL,EAAiC;MAC/B;IACD;;IAED,IAAIC,SAAS,GAAGL,cAAc,CAACM,IAA/B;IACA,IAAIpC,KAAK,GAAGmC,SAAS,CAACnC,KAAtB;IACA,IAAIqC,YAAY,GAAGrC,KAAK,CAACc,aAAN,GAAsBwB,SAAtB,EAAnB;IACA,IAAIC,WAAW,GAAGJ,SAAS,CAACK,cAAV,EAAlB;IACA,IAAIC,MAAM,GAAGhD,MAAM,CAACiD,GAAP,CAAWP,SAAS,CAACQ,aAAV,EAAX,EAAsC,UAAUC,SAAV,EAAqB;MACtE,IAAIA,SAAS,GAAGnD,MAAM,CAACoD,KAAP,CAAaD,SAAb,CAAhB;MACAA,SAAS,CAACrB,KAAV,GAAkBY,SAAS,CAACW,WAAV,CAAsBF,SAAS,CAACG,SAAhC,CAAlB;MACA,OAAOH,SAAP;IACD,CAJY,CAAb;IAKA5B,eAAe,CAACyB,MAAD,CAAf;IACAzB,eAAe,CAACuB,WAAD,CAAf;IACA9C,MAAM,CAACuD,IAAP,CAAYlD,WAAZ,EAAyB,UAAUmD,IAAV,EAAgB;MACvC,IAAInB,cAAc,CAACI,GAAf,CAAmBe,IAAI,GAAG,OAA1B,MAAuC,CAACd,SAAS,CAACe,KAAV,CAAgBC,OAAhB,EAAD,IAA8BF,IAAI,KAAK,UAA9E,CAAJ,EAA+F;QAC7F,KAAK,MAAMA,IAAX,EAAiBnB,cAAjB,EAAiC9B,KAAjC,EAAwCuC,WAAxC,EAAqDF,YAArD,EAAmEI,MAAnE;MACD;IACF,CAJD,EAIG,IAJH;EAKD,CA1B4B;;EA4B7B;AACF;AACA;EACEW,SAAS,EAAE,UAAUtB,cAAV,EAA0B9B,KAA1B,EAAiCuC,WAAjC,EAA8CF,YAA9C,EAA4D;IACrE,IAAIgB,cAAc,GAAGvB,cAAc,CAACwB,QAAf,CAAwB,oBAAxB,CAArB;IACA,IAAIC,MAAM,GAAG,IAAI5D,OAAO,CAAC6D,MAAZ,CAAmB;MAC9BC,KAAK,EAAE;QACLC,EAAE,EAAE1D,KAAK,CAAC0D,EADL;QAELC,EAAE,EAAE3D,KAAK,CAAC2D,EAFL;QAGLC,CAAC,EAAEvB,YAAY,CAACzB,YAAY,CAACZ,KAAD,CAAb;MAHV,CADuB;MAM9B6D,KAAK,EAAER,cAAc,CAACS,YAAf,EANuB;MAO9BC,EAAE,EAAE,CAP0B;MAQ9BC,MAAM,EAAE;IARsB,CAAnB,CAAb;IAUAT,MAAM,CAACM,KAAP,CAAaI,IAAb,GAAoB,IAApB;IACA,KAAKjC,KAAL,CAAWkC,GAAX,CAAeX,MAAf;EACD,CA7C4B;;EA+C7B;AACF;AACA;EACEY,SAAS,EAAE,UAAUrC,cAAV,EAA0B9B,KAA1B,EAAiCuC,WAAjC,EAA8CF,YAA9C,EAA4D;IACrE,IAAI+B,SAAS,GAAGtC,cAAc,CAACwB,QAAf,CAAwB,UAAxB,CAAhB;IACA,IAAIe,OAAO,GAAG,CAACD,SAAS,CAAClC,GAAV,CAAc,QAAd,IAA0B,CAAC,CAA3B,GAA+B,CAAhC,IAAqCkC,SAAS,CAAClC,GAAV,CAAc,QAAd,CAAnD;IACA,IAAIoC,MAAM,GAAGjC,YAAY,CAACzB,YAAY,CAACZ,KAAD,CAAb,CAAzB;IACA,IAAIuE,KAAK,GAAG9E,MAAM,CAACiD,GAAP,CAAWH,WAAX,EAAwB,UAAUiC,aAAV,EAAyB;MAC3D,OAAO,IAAI7E,OAAO,CAAC8E,IAAZ,CAAiB;QACtBhB,KAAK,EAAE1D,gBAAgB,CAACC,KAAD,EAAQ,CAACsE,MAAD,EAASA,MAAM,GAAGD,OAAlB,CAAR,EAAoCG,aAAa,CAACjD,KAAlD;MADD,CAAjB,CAAP;IAGD,CAJW,CAAZ;IAKA,KAAKS,KAAL,CAAWkC,GAAX,CAAevE,OAAO,CAAC+E,SAAR,CAAkBH,KAAlB,EAAyB;MACtCV,KAAK,EAAEpE,MAAM,CAACkF,QAAP,CAAgBP,SAAS,CAACd,QAAV,CAAmB,WAAnB,EAAgCQ,YAAhC,EAAhB,EAAgE;QACrEc,MAAM,EAAE9C,cAAc,CAACI,GAAf,CAAmB,0BAAnB;MAD6D,CAAhE;IAD+B,CAAzB,CAAf;EAKD,CAhE4B;;EAkE7B;AACF;AACA;EACE2C,UAAU,EAAE,UAAU/C,cAAV,EAA0B9B,KAA1B,EAAiCuC,WAAjC,EAA8CF,YAA9C,EAA4DI,MAA5D,EAAoE;IAC9E,IAAIqC,eAAe,GAAGhD,cAAc,CAACiD,aAAf,CAA6B,IAA7B,CAAtB;IACA,IAAIC,gBAAgB,GAAGlD,cAAc,CAACwB,QAAf,CAAwB,WAAxB,CAAvB;IACA,IAAI2B,WAAW,GAAGD,gBAAgB,CAAC9C,GAAjB,CAAqB,QAArB,CAAlB,CAH8E,CAG5B;;IAElDzC,MAAM,CAACuD,IAAP,CAAYP,MAAZ,EAAoB,UAAUG,SAAV,EAAqBsC,GAArB,EAA0B;MAC5C,IAAIC,UAAU,GAAGH,gBAAjB;MACA,IAAIjC,SAAS,GAAGH,SAAS,CAACG,SAA1B;MACA,IAAIa,CAAC,GAAGvB,YAAY,CAACzB,YAAY,CAACZ,KAAD,CAAb,CAApB;MACA,IAAIoF,CAAC,GAAGpF,KAAK,CAACM,YAAN,CAAmB,CAACsD,CAAC,GAAGqB,WAAL,EAAkBrC,SAAS,CAACrB,KAA5B,CAAnB,CAAR;MACA,IAAImC,EAAE,GAAG1D,KAAK,CAAC0D,EAAf;MACA,IAAIC,EAAE,GAAG3D,KAAK,CAAC2D,EAAf;MACA,IAAI0B,cAAc,GAAGhE,IAAI,CAACC,GAAL,CAAS8D,CAAC,CAAC,CAAD,CAAD,GAAO1B,EAAhB,IAAsBE,CAAtB,GAA0B,GAA1B,GAAgC,QAAhC,GAA2CwB,CAAC,CAAC,CAAD,CAAD,GAAO1B,EAAP,GAAY,MAAZ,GAAqB,OAArF;MACA,IAAI4B,sBAAsB,GAAGjE,IAAI,CAACC,GAAL,CAAS8D,CAAC,CAAC,CAAD,CAAD,GAAOzB,EAAhB,IAAsBC,CAAtB,GAA0B,GAA1B,GAAgC,QAAhC,GAA2CwB,CAAC,CAAC,CAAD,CAAD,GAAOzB,EAAP,GAAY,KAAZ,GAAoB,QAA5F;;MAEA,IAAImB,eAAe,IAAIA,eAAe,CAAC/B,SAAD,CAAlC,IAAiD+B,eAAe,CAAC/B,SAAD,CAAf,CAA2BwC,SAAhF,EAA2F;QACzFJ,UAAU,GAAG,IAAIvF,KAAJ,CAAUkF,eAAe,CAAC/B,SAAD,CAAf,CAA2BwC,SAArC,EAAgDP,gBAAhD,EAAkEA,gBAAgB,CAACjD,OAAnF,CAAb;MACD;;MAED,IAAIyD,MAAM,GAAG,IAAI7F,OAAO,CAAC8F,IAAZ,CAAiB;QAC5BzB,MAAM,EAAE;MADoB,CAAjB,CAAb;MAGA,KAAKhC,KAAL,CAAWkC,GAAX,CAAesB,MAAf;MACA7F,OAAO,CAAC+F,YAAR,CAAqBF,MAAM,CAAC3B,KAA5B,EAAmCsB,UAAnC,EAA+C;QAC7CQ,CAAC,EAAEP,CAAC,CAAC,CAAD,CADyC;QAE7CQ,CAAC,EAAER,CAAC,CAAC,CAAD,CAFyC;QAG7CS,QAAQ,EAAEV,UAAU,CAACW,YAAX,MAA6BhE,cAAc,CAACI,GAAf,CAAmB,0BAAnB,CAHM;QAI7C6D,IAAI,EAAEnD,SAAS,CAACoD,cAJ6B;QAK7CC,SAAS,EAAEZ,cALkC;QAM7Ca,iBAAiB,EAAEZ;MAN0B,CAA/C;IAQD,CA1BD,EA0BG,IA1BH;EA2BD,CArG4B;;EAuG7B;AACF;AACA;EACEa,UAAU,EAAE,UAAUrE,cAAV,EAA0B9B,KAA1B,EAAiCuC,WAAjC,EAA8CF,YAA9C,EAA4D;IACtE,IAAI+D,cAAc,GAAGtE,cAAc,CAACwB,QAAf,CAAwB,WAAxB,CAArB;IACA,IAAID,cAAc,GAAG+C,cAAc,CAAC9C,QAAf,CAAwB,WAAxB,CAArB;IACA,IAAI+C,UAAU,GAAGhD,cAAc,CAACnB,GAAf,CAAmB,OAAnB,CAAjB;IACA,IAAIoE,SAAS,GAAG,CAAhB;IACAD,UAAU,GAAGA,UAAU,YAAYE,KAAtB,GAA8BF,UAA9B,GAA2C,CAACA,UAAD,CAAxD;IACA,IAAIG,UAAU,GAAG,EAAjB;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlE,WAAW,CAACnB,MAAhC,EAAwCqF,CAAC,EAAzC,EAA6C;MAC3C,IAAIC,UAAU,GAAGJ,SAAS,KAAKD,UAAU,CAACjF,MAA1C;MACAoF,UAAU,CAACE,UAAD,CAAV,GAAyBF,UAAU,CAACE,UAAD,CAAV,IAA0B,EAAnD;MACAF,UAAU,CAACE,UAAD,CAAV,CAAuBC,IAAvB,CAA4B,IAAIhH,OAAO,CAAC8E,IAAZ,CAAiB;QAC3ChB,KAAK,EAAE1D,gBAAgB,CAACC,KAAD,EAAQqC,YAAR,EAAsBE,WAAW,CAACkE,CAAD,CAAX,CAAelF,KAArC;MADoB,CAAjB,CAA5B;IAGD,CAdqE,CAcpE;IACF;;;IAGA,KAAK,IAAIkF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACpF,MAA/B,EAAuCqF,CAAC,EAAxC,EAA4C;MAC1C,KAAKzE,KAAL,CAAWkC,GAAX,CAAevE,OAAO,CAAC+E,SAAR,CAAkB8B,UAAU,CAACC,CAAD,CAA5B,EAAiC;QAC9C5C,KAAK,EAAEpE,MAAM,CAACkF,QAAP,CAAgB;UACrBC,MAAM,EAAEyB,UAAU,CAACI,CAAC,GAAGJ,UAAU,CAACjF,MAAhB;QADG,CAAhB,EAEJiC,cAAc,CAACS,YAAf,EAFI,CADuC;QAI9CE,MAAM,EAAE,IAJsC;QAK9C4C,CAAC,EAAE9E,cAAc,CAACI,GAAf,CAAmB,GAAnB;MAL2C,CAAjC,CAAf;IAOD;EACF,CArI4B;;EAuI7B;AACF;AACA;EACE2E,UAAU,EAAE,UAAU/E,cAAV,EAA0B9B,KAA1B,EAAiCuC,WAAjC,EAA8CF,YAA9C,EAA4D;IACtE,IAAI,CAACE,WAAW,CAACnB,MAAjB,EAAyB;MACvB;IACD;;IAED,IAAI0F,cAAc,GAAGhF,cAAc,CAACwB,QAAf,CAAwB,WAAxB,CAArB;IACA,IAAIyD,cAAc,GAAGD,cAAc,CAACxD,QAAf,CAAwB,WAAxB,CAArB;IACA,IAAI0D,UAAU,GAAGD,cAAc,CAAC7E,GAAf,CAAmB,OAAnB,CAAjB;IACA,IAAIoE,SAAS,GAAG,CAAhB;IACAU,UAAU,GAAGA,UAAU,YAAYT,KAAtB,GAA8BS,UAA9B,GAA2C,CAACA,UAAD,CAAxD;IACA,IAAIC,UAAU,GAAG,EAAjB;IACA,IAAIC,MAAM,GAAG7F,IAAI,CAAC8F,EAAL,GAAU,GAAvB;IACA,IAAIC,SAAS,GAAG,CAAC7E,WAAW,CAAC,CAAD,CAAX,CAAehB,KAAhB,GAAwB2F,MAAxC;IACA,IAAIG,EAAE,GAAGhG,IAAI,CAACiG,GAAL,CAASjF,YAAY,CAAC,CAAD,CAArB,EAA0BA,YAAY,CAAC,CAAD,CAAtC,CAAT;IACA,IAAIkF,EAAE,GAAGlG,IAAI,CAACmG,GAAL,CAASnF,YAAY,CAAC,CAAD,CAArB,EAA0BA,YAAY,CAAC,CAAD,CAAtC,CAAT;IACA,IAAIoF,SAAS,GAAG3F,cAAc,CAACI,GAAf,CAAmB,WAAnB,CAAhB;;IAEA,KAAK,IAAIuE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlE,WAAW,CAACnB,MAAhC,EAAwCqF,CAAC,EAAzC,EAA6C;MAC3C,IAAIC,UAAU,GAAGJ,SAAS,KAAKU,UAAU,CAAC5F,MAA1C;MACA6F,UAAU,CAACP,UAAD,CAAV,GAAyBO,UAAU,CAACP,UAAD,CAAV,IAA0B,EAAnD;MACAO,UAAU,CAACP,UAAD,CAAV,CAAuBC,IAAvB,CAA4B,IAAIhH,OAAO,CAAC+H,MAAZ,CAAmB;QAC7CjE,KAAK,EAAE;UACLC,EAAE,EAAE1D,KAAK,CAAC0D,EADL;UAELC,EAAE,EAAE3D,KAAK,CAAC2D,EAFL;UAGL0D,EAAE,EAAEA,EAHC;UAILzD,CAAC,EAAE2D,EAJE;UAKLI,UAAU,EAAEP,SALP;UAMLQ,QAAQ,EAAE,CAACrF,WAAW,CAACkE,CAAD,CAAX,CAAelF,KAAhB,GAAwB2F,MAN7B;UAOLO,SAAS,EAAEA;QAPN,CADsC;QAU7CzD,MAAM,EAAE;MAVqC,CAAnB,CAA5B;MAYAoD,SAAS,GAAG,CAAC7E,WAAW,CAACkE,CAAD,CAAX,CAAelF,KAAhB,GAAwB2F,MAApC;IACD,CAjCqE,CAiCpE;IACF;;;IAGA,KAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,UAAU,CAAC7F,MAA/B,EAAuCqF,CAAC,EAAxC,EAA4C;MAC1C,KAAKzE,KAAL,CAAWkC,GAAX,CAAevE,OAAO,CAAC+E,SAAR,CAAkBuC,UAAU,CAACR,CAAD,CAA5B,EAAiC;QAC9C5C,KAAK,EAAEpE,MAAM,CAACkF,QAAP,CAAgB;UACrBV,IAAI,EAAE+C,UAAU,CAACP,CAAC,GAAGO,UAAU,CAAC5F,MAAhB;QADK,CAAhB,EAEJ2F,cAAc,CAACc,YAAf,EAFI,CADuC;QAI9C7D,MAAM,EAAE;MAJsC,CAAjC,CAAf;IAMD;EACF;AAvL4B,CAAhB,CAAf;;AA0LA8D,MAAM,CAACC,OAAP,GAAiBtG,QAAjB"},"metadata":{},"sourceType":"script"}