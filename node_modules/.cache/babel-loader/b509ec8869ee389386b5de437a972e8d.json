{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar cartesianAxisHelper = require(\"../../coord/cartesian/cartesianAxisHelper\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitArea', 'splitLine']; // function getAlignWithLabel(model, axisModel) {\n//     var alignWithLabel = model.get('alignWithLabel');\n//     if (alignWithLabel === 'auto') {\n//         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\n//     }\n//     return alignWithLabel;\n// }\n\nvar CartesianAxisView = AxisView.extend({\n  type: 'cartesianAxis',\n  axisPointerClass: 'CartesianAxisPointer',\n\n  /**\n   * @override\n   */\n  render: function (axisModel, ecModel, api, payload) {\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var gridModel = axisModel.getCoordSysModel();\n    var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (axisModel.get(name + '.show')) {\n        this['_' + name](axisModel, gridModel);\n      }\n    }, this);\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n    CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n  },\n  remove: function () {\n    this._splitAreaColors = null;\n  },\n\n  /**\n   * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n   * @param {module:echarts/coord/cartesian/GridModel} gridModel\n   * @private\n   */\n  _splitLine: function (axisModel, gridModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = []; // Simple optimization\n    // Batching the lines if color are the same\n\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      var tickValue = ticksCoords[i].tickValue;\n\n      this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\n        anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: zrUtil.defaults({\n          stroke: lineColors[colorIndex]\n        }, lineStyle),\n        silent: true\n      })));\n    }\n  },\n\n  /**\n   * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n   * @param {module:echarts/coord/cartesian/GridModel} gridModel\n   * @private\n   */\n  _splitArea: function (axisModel, gridModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitAreaModel = axisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitAreaModel,\n      clamp: true\n    });\n\n    if (!ticksCoords.length) {\n      return;\n    } // For Making appropriate splitArea animation, the color and anid\n    // should be corresponding to previous one if possible.\n\n\n    var areaColorsLen = areaColors.length;\n    var lastSplitAreaColors = this._splitAreaColors;\n    var newSplitAreaColors = zrUtil.createHashMap();\n    var colorIndex = 0;\n\n    if (lastSplitAreaColors) {\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var cIndex = lastSplitAreaColors.get(ticksCoords[i].tickValue);\n\n        if (cIndex != null) {\n          colorIndex = (cIndex + (areaColorsLen - 1) * i) % areaColorsLen;\n          break;\n        }\n      }\n    }\n\n    var prev = axis.toGlobalCoord(ticksCoords[0].coord);\n    var areaStyle = areaStyleModel.getAreaStyle();\n    areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\n\n    for (var i = 1; i < ticksCoords.length; i++) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n      var x;\n      var y;\n      var width;\n      var height;\n\n      if (axis.isHorizontal()) {\n        x = prev;\n        y = gridRect.y;\n        width = tickCoord - x;\n        height = gridRect.height;\n        prev = x + width;\n      } else {\n        x = gridRect.x;\n        y = prev;\n        width = gridRect.width;\n        height = tickCoord - y;\n        prev = y + height;\n      }\n\n      var tickValue = ticksCoords[i - 1].tickValue;\n      tickValue != null && newSplitAreaColors.set(tickValue, colorIndex);\n\n      this._axisGroup.add(new graphic.Rect({\n        anid: tickValue != null ? 'area_' + tickValue : null,\n        shape: {\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        },\n        style: zrUtil.defaults({\n          fill: areaColors[colorIndex]\n        }, areaStyle),\n        silent: true\n      }));\n\n      colorIndex = (colorIndex + 1) % areaColorsLen;\n    }\n\n    this._splitAreaColors = newSplitAreaColors;\n  }\n});\nCartesianAxisView.extend({\n  type: 'xAxis'\n});\nCartesianAxisView.extend({\n  type: 'yAxis'\n});","map":{"version":3,"names":["zrUtil","require","graphic","AxisBuilder","AxisView","cartesianAxisHelper","axisBuilderAttrs","selfBuilderAttrs","CartesianAxisView","extend","type","axisPointerClass","render","axisModel","ecModel","api","payload","group","removeAll","oldAxisGroup","_axisGroup","Group","add","get","gridModel","getCoordSysModel","layout","axisBuilder","each","getGroup","name","groupTransition","superCall","remove","_splitAreaColors","_splitLine","axis","scale","isBlank","splitLineModel","getModel","lineStyleModel","lineColors","isArray","gridRect","coordinateSystem","getRect","isHorizontal","lineCount","ticksCoords","getTicksCoords","tickModel","p1","p2","lineStyle","getLineStyle","i","length","tickCoord","toGlobalCoord","coord","y","height","x","width","colorIndex","tickValue","Line","subPixelOptimizeLine","anid","shape","x1","y1","x2","y2","style","defaults","stroke","silent","_splitArea","splitAreaModel","areaStyleModel","areaColors","clamp","areaColorsLen","lastSplitAreaColors","newSplitAreaColors","createHashMap","cIndex","prev","areaStyle","getAreaStyle","set","Rect","fill"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/component/axis/CartesianAxisView.js"],"sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar cartesianAxisHelper = require(\"../../coord/cartesian/cartesianAxisHelper\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitArea', 'splitLine']; // function getAlignWithLabel(model, axisModel) {\n//     var alignWithLabel = model.get('alignWithLabel');\n//     if (alignWithLabel === 'auto') {\n//         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\n//     }\n//     return alignWithLabel;\n// }\n\nvar CartesianAxisView = AxisView.extend({\n  type: 'cartesianAxis',\n  axisPointerClass: 'CartesianAxisPointer',\n\n  /**\n   * @override\n   */\n  render: function (axisModel, ecModel, api, payload) {\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var gridModel = axisModel.getCoordSysModel();\n    var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (axisModel.get(name + '.show')) {\n        this['_' + name](axisModel, gridModel);\n      }\n    }, this);\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n    CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n  },\n  remove: function () {\n    this._splitAreaColors = null;\n  },\n\n  /**\n   * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n   * @param {module:echarts/coord/cartesian/GridModel} gridModel\n   * @private\n   */\n  _splitLine: function (axisModel, gridModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = []; // Simple optimization\n    // Batching the lines if color are the same\n\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      var tickValue = ticksCoords[i].tickValue;\n\n      this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\n        anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: zrUtil.defaults({\n          stroke: lineColors[colorIndex]\n        }, lineStyle),\n        silent: true\n      })));\n    }\n  },\n\n  /**\n   * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n   * @param {module:echarts/coord/cartesian/GridModel} gridModel\n   * @private\n   */\n  _splitArea: function (axisModel, gridModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitAreaModel = axisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitAreaModel,\n      clamp: true\n    });\n\n    if (!ticksCoords.length) {\n      return;\n    } // For Making appropriate splitArea animation, the color and anid\n    // should be corresponding to previous one if possible.\n\n\n    var areaColorsLen = areaColors.length;\n    var lastSplitAreaColors = this._splitAreaColors;\n    var newSplitAreaColors = zrUtil.createHashMap();\n    var colorIndex = 0;\n\n    if (lastSplitAreaColors) {\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var cIndex = lastSplitAreaColors.get(ticksCoords[i].tickValue);\n\n        if (cIndex != null) {\n          colorIndex = (cIndex + (areaColorsLen - 1) * i) % areaColorsLen;\n          break;\n        }\n      }\n    }\n\n    var prev = axis.toGlobalCoord(ticksCoords[0].coord);\n    var areaStyle = areaStyleModel.getAreaStyle();\n    areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\n\n    for (var i = 1; i < ticksCoords.length; i++) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n      var x;\n      var y;\n      var width;\n      var height;\n\n      if (axis.isHorizontal()) {\n        x = prev;\n        y = gridRect.y;\n        width = tickCoord - x;\n        height = gridRect.height;\n        prev = x + width;\n      } else {\n        x = gridRect.x;\n        y = prev;\n        width = gridRect.width;\n        height = tickCoord - y;\n        prev = y + height;\n      }\n\n      var tickValue = ticksCoords[i - 1].tickValue;\n      tickValue != null && newSplitAreaColors.set(tickValue, colorIndex);\n\n      this._axisGroup.add(new graphic.Rect({\n        anid: tickValue != null ? 'area_' + tickValue : null,\n        shape: {\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        },\n        style: zrUtil.defaults({\n          fill: areaColors[colorIndex]\n        }, areaStyle),\n        silent: true\n      }));\n\n      colorIndex = (colorIndex + 1) % areaColorsLen;\n    }\n\n    this._splitAreaColors = newSplitAreaColors;\n  }\n});\nCartesianAxisView.extend({\n  type: 'xAxis'\n});\nCartesianAxisView.extend({\n  type: 'yAxis'\n});"],"mappings":"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"},"metadata":{},"sourceType":"script"}