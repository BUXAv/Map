{"ast":null,"code":"var _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar retrieve = _util.retrieve;\nvar each = _util.each;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Helper for model references.\n * There are many manners to refer axis/coordSys.\n */\n// TODO\n// merge relevant logic to this file?\n// check: \"modelHelper\" of tooltip and \"BrushTargetManager\".\n\n/**\n * @return {Object} For example:\n * {\n *     coordSysName: 'cartesian2d',\n *     coordSysDims: ['x', 'y', ...],\n *     axisMap: HashMap({\n *         x: xAxisModel,\n *         y: yAxisModel\n *     }),\n *     categoryAxisMap: HashMap({\n *         x: xAxisModel,\n *         y: undefined\n *     }),\n *     // It also indicate that whether there is category axis.\n *     firstCategoryDimIndex: 1,\n *     // To replace user specified encode.\n * }\n */\n\nfunction getCoordSysDefineBySeries(seriesModel) {\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var result = {\n    coordSysName: coordSysName,\n    coordSysDims: [],\n    axisMap: createHashMap(),\n    categoryAxisMap: createHashMap()\n  };\n  var fetch = fetchers[coordSysName];\n\n  if (fetch) {\n    fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);\n    return result;\n  }\n}\n\nvar fetchers = {\n  cartesian2d: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var xAxisModel = seriesModel.getReferringComponents('xAxis')[0];\n    var yAxisModel = seriesModel.getReferringComponents('yAxis')[0];\n    result.coordSysDims = ['x', 'y'];\n    axisMap.set('x', xAxisModel);\n    axisMap.set('y', yAxisModel);\n\n    if (isCategory(xAxisModel)) {\n      categoryAxisMap.set('x', xAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(yAxisModel)) {\n      categoryAxisMap.set('y', yAxisModel);\n      result.firstCategoryDimIndex = 1;\n    }\n  },\n  singleAxis: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var singleAxisModel = seriesModel.getReferringComponents('singleAxis')[0];\n    result.coordSysDims = ['single'];\n    axisMap.set('single', singleAxisModel);\n\n    if (isCategory(singleAxisModel)) {\n      categoryAxisMap.set('single', singleAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n  },\n  polar: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var polarModel = seriesModel.getReferringComponents('polar')[0];\n    var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n    var angleAxisModel = polarModel.findAxisModel('angleAxis');\n    result.coordSysDims = ['radius', 'angle'];\n    axisMap.set('radius', radiusAxisModel);\n    axisMap.set('angle', angleAxisModel);\n\n    if (isCategory(radiusAxisModel)) {\n      categoryAxisMap.set('radius', radiusAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(angleAxisModel)) {\n      categoryAxisMap.set('angle', angleAxisModel);\n      result.firstCategoryDimIndex = 1;\n    }\n  },\n  geo: function (seriesModel, result, axisMap, categoryAxisMap) {\n    result.coordSysDims = ['lng', 'lat'];\n  },\n  parallel: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var ecModel = seriesModel.ecModel;\n    var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n    var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();\n    each(parallelModel.parallelAxisIndex, function (axisIndex, index) {\n      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\n      var axisDim = coordSysDims[index];\n      axisMap.set(axisDim, axisModel);\n\n      if (isCategory(axisModel) && result.firstCategoryDimIndex == null) {\n        categoryAxisMap.set(axisDim, axisModel);\n        result.firstCategoryDimIndex = index;\n      }\n    });\n  }\n};\n\nfunction isCategory(axisModel) {\n  return axisModel.get('type') === 'category';\n}\n\nexports.getCoordSysDefineBySeries = getCoordSysDefineBySeries;","map":{"version":3,"names":["_config","require","__DEV__","_util","createHashMap","retrieve","each","getCoordSysDefineBySeries","seriesModel","coordSysName","get","result","coordSysDims","axisMap","categoryAxisMap","fetch","fetchers","cartesian2d","xAxisModel","getReferringComponents","yAxisModel","set","isCategory","firstCategoryDimIndex","singleAxis","singleAxisModel","polar","polarModel","radiusAxisModel","findAxisModel","angleAxisModel","geo","parallel","ecModel","parallelModel","getComponent","dimensions","slice","parallelAxisIndex","axisIndex","index","axisModel","axisDim","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/model/referHelper.js"],"sourcesContent":["var _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar retrieve = _util.retrieve;\nvar each = _util.each;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Helper for model references.\n * There are many manners to refer axis/coordSys.\n */\n// TODO\n// merge relevant logic to this file?\n// check: \"modelHelper\" of tooltip and \"BrushTargetManager\".\n\n/**\n * @return {Object} For example:\n * {\n *     coordSysName: 'cartesian2d',\n *     coordSysDims: ['x', 'y', ...],\n *     axisMap: HashMap({\n *         x: xAxisModel,\n *         y: yAxisModel\n *     }),\n *     categoryAxisMap: HashMap({\n *         x: xAxisModel,\n *         y: undefined\n *     }),\n *     // It also indicate that whether there is category axis.\n *     firstCategoryDimIndex: 1,\n *     // To replace user specified encode.\n * }\n */\nfunction getCoordSysDefineBySeries(seriesModel) {\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var result = {\n    coordSysName: coordSysName,\n    coordSysDims: [],\n    axisMap: createHashMap(),\n    categoryAxisMap: createHashMap()\n  };\n  var fetch = fetchers[coordSysName];\n\n  if (fetch) {\n    fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);\n    return result;\n  }\n}\n\nvar fetchers = {\n  cartesian2d: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var xAxisModel = seriesModel.getReferringComponents('xAxis')[0];\n    var yAxisModel = seriesModel.getReferringComponents('yAxis')[0];\n    result.coordSysDims = ['x', 'y'];\n    axisMap.set('x', xAxisModel);\n    axisMap.set('y', yAxisModel);\n\n    if (isCategory(xAxisModel)) {\n      categoryAxisMap.set('x', xAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(yAxisModel)) {\n      categoryAxisMap.set('y', yAxisModel);\n      result.firstCategoryDimIndex = 1;\n    }\n  },\n  singleAxis: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var singleAxisModel = seriesModel.getReferringComponents('singleAxis')[0];\n    result.coordSysDims = ['single'];\n    axisMap.set('single', singleAxisModel);\n\n    if (isCategory(singleAxisModel)) {\n      categoryAxisMap.set('single', singleAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n  },\n  polar: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var polarModel = seriesModel.getReferringComponents('polar')[0];\n    var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n    var angleAxisModel = polarModel.findAxisModel('angleAxis');\n    result.coordSysDims = ['radius', 'angle'];\n    axisMap.set('radius', radiusAxisModel);\n    axisMap.set('angle', angleAxisModel);\n\n    if (isCategory(radiusAxisModel)) {\n      categoryAxisMap.set('radius', radiusAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(angleAxisModel)) {\n      categoryAxisMap.set('angle', angleAxisModel);\n      result.firstCategoryDimIndex = 1;\n    }\n  },\n  geo: function (seriesModel, result, axisMap, categoryAxisMap) {\n    result.coordSysDims = ['lng', 'lat'];\n  },\n  parallel: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var ecModel = seriesModel.ecModel;\n    var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n    var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();\n    each(parallelModel.parallelAxisIndex, function (axisIndex, index) {\n      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\n      var axisDim = coordSysDims[index];\n      axisMap.set(axisDim, axisModel);\n\n      if (isCategory(axisModel) && result.firstCategoryDimIndex == null) {\n        categoryAxisMap.set(axisDim, axisModel);\n        result.firstCategoryDimIndex = index;\n      }\n    });\n  }\n};\n\nfunction isCategory(axisModel) {\n  return axisModel.get('type') === 'category';\n}\n\nexports.getCoordSysDefineBySeries = getCoordSysDefineBySeries;"],"mappings":"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"},"metadata":{},"sourceType":"script"}