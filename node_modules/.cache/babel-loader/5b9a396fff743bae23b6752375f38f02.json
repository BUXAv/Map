{"ast":null,"code":"require(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nrequire(\"core-js/modules/esnext.typed-array.find-last.js\");\n\nrequire(\"core-js/modules/esnext.typed-array.find-last-index.js\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n\nvar createRenderPlanner = require(\"../chart/helper/createRenderPlanner\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar STACK_PREFIX = '__ec_stack_';\nvar LARGE_BAR_MIN_WIDTH = 0.5;\nvar LargeArr = typeof Float32Array !== 'undefined' ? Float32Array : Array;\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(axis) {\n  return axis.dim + axis.index;\n}\n/**\n * @param {Object} opt\n * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.\n * @param {number} opt.count Positive interger.\n * @param {number} [opt.barWidth]\n * @param {number} [opt.barMaxWidth]\n * @param {number} [opt.barGap]\n * @param {number} [opt.barCategoryGap]\n * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.\n */\n\n\nfunction getLayoutOnAxis(opt) {\n  var params = [];\n  var baseAxis = opt.axis;\n  var axisKey = 'axis0';\n\n  if (baseAxis.type !== 'category') {\n    return;\n  }\n\n  var bandWidth = baseAxis.getBandWidth();\n\n  for (var i = 0; i < opt.count || 0; i++) {\n    params.push(zrUtil.defaults({\n      bandWidth: bandWidth,\n      axisKey: axisKey,\n      stackId: STACK_PREFIX + i\n    }, opt));\n  }\n\n  var widthAndOffsets = doCalBarWidthAndOffset(params);\n  var result = [];\n\n  for (var i = 0; i < opt.count; i++) {\n    var item = widthAndOffsets[axisKey][STACK_PREFIX + i];\n    item.offsetCenter = item.offset + item.width / 2;\n    result.push(item);\n  }\n\n  return result;\n}\n\nfunction prepareLayoutBarSeries(seriesType, ecModel) {\n  var seriesModels = [];\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for cartesian2d only\n    if (isOnCartesian(seriesModel) && !isInLargeMode(seriesModel)) {\n      seriesModels.push(seriesModel);\n    }\n  });\n  return seriesModels;\n}\n\nfunction makeColumnLayout(barSeries) {\n  var seriesInfoList = [];\n  zrUtil.each(barSeries, function (seriesModel) {\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n    seriesInfoList.push({\n      bandWidth: bandWidth,\n      barWidth: barWidth,\n      barMaxWidth: barMaxWidth,\n      barGap: barGap,\n      barCategoryGap: barCategoryGap,\n      axisKey: getAxisKey(baseAxis),\n      stackId: getSeriesStackId(seriesModel)\n    });\n  });\n  return doCalBarWidthAndOffset(seriesInfoList);\n}\n\nfunction doCalBarWidthAndOffset(seriesInfoList) {\n  // Columns info on each category axis. Key is cartesian name\n  var columnsMap = {};\n  zrUtil.each(seriesInfoList, function (seriesInfo, idx) {\n    var axisKey = seriesInfo.axisKey;\n    var bandWidth = seriesInfo.bandWidth;\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = seriesInfo.stackId;\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    }; // Caution: In a single coordinate system, these barGrid attributes\n    // will be shared by series. Consider that they have default values,\n    // only the attributes set on the last series will work.\n    // Do not change this fact unless there will be a break change.\n    // TODO\n\n    var barWidth = seriesInfo.barWidth;\n\n    if (barWidth && !stacks[stackId].width) {\n      // See #6312, do not restrict width.\n      stacks[stackId].width = barWidth;\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    var barMaxWidth = seriesInfo.barMaxWidth;\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    var barGap = seriesInfo.barGap;\n    barGap != null && (columnsOnAxis.gap = barGap);\n    var barCategoryGap = seriesInfo.barCategoryGap;\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column, stack) {\n      var maxWidth = column.maxWidth;\n\n      if (maxWidth && maxWidth < autoWidth) {\n        maxWidth = Math.min(maxWidth, remainedWidth);\n\n        if (column.width) {\n          maxWidth = Math.min(maxWidth, column.width);\n        }\n\n        remainedWidth -= maxWidth;\n        column.width = maxWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n/**\n * @param {Object} barWidthAndOffset The result of makeColumnLayout\n * @param {module:echarts/coord/Axis} axis\n * @param {module:echarts/model/Series} [seriesModel] If not provided, return all.\n * @return {Object} {stackId: {offset, width}} or {offset, width} if seriesModel provided.\n */\n\n\nfunction retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {\n  if (barWidthAndOffset && axis) {\n    var result = barWidthAndOffset[getAxisKey(axis)];\n\n    if (result != null && seriesModel != null) {\n      result = result[getSeriesStackId(seriesModel)];\n    }\n\n    return result;\n  }\n}\n/**\n * @param {string} seriesType\n * @param {module:echarts/model/Global} ecModel\n */\n\n\nfunction layout(seriesType, ecModel) {\n  var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);\n  var barWidthAndOffset = makeColumnLayout(seriesModels);\n  var lastStackCoords = {};\n  var lastStackCoordsOrigin = {};\n  zrUtil.each(seriesModels, function (seriesModel) {\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = cartesian.getOtherAxis(baseAxis);\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\n\n    data.setLayout({\n      offset: columnOffset,\n      size: columnWidth\n    });\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var isValueAxisH = valueAxis.isHorizontal();\n    var valueAxisStart = getValueAxisStart(baseAxis, valueAxis, stacked);\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n\n      if (isNaN(value)) {\n        continue;\n      }\n\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n\n      if (stacked) {\n        // Only ordinal axis can be stacked.\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            // Positive stack\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var x;\n      var y;\n      var width;\n      var height;\n\n      if (isValueAxisH) {\n        var coord = cartesian.dataToPoint([value, baseValue]);\n        x = baseCoord;\n        y = coord[1] + columnOffset;\n        width = coord[0] - valueAxisStart;\n        height = columnWidth;\n\n        if (Math.abs(width) < barMinHeight) {\n          width = (width < 0 ? -1 : 1) * barMinHeight;\n        }\n\n        stacked && (lastStackCoords[stackId][baseValue][sign] += width);\n      } else {\n        var coord = cartesian.dataToPoint([baseValue, value]);\n        x = coord[0] + columnOffset;\n        y = baseCoord;\n        width = columnWidth;\n        height = coord[1] - valueAxisStart;\n\n        if (Math.abs(height) < barMinHeight) {\n          // Include zero to has a positive bar\n          height = (height <= 0 ? -1 : 1) * barMinHeight;\n        }\n\n        stacked && (lastStackCoords[stackId][baseValue][sign] += height);\n      }\n\n      data.setItemLayout(idx, {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    }\n  }, this);\n} // TODO: Do not support stack in large mode yet.\n\n\nvar largeLayout = {\n  seriesType: 'bar',\n  plan: createRenderPlanner(),\n  reset: function (seriesModel) {\n    if (!isOnCartesian(seriesModel) || !isInLargeMode(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var valueAxis = cartesian.getOtherAxis(baseAxis);\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var valueAxisHorizontal = valueAxis.isHorizontal();\n    var valueDimIdx = valueAxisHorizontal ? 0 : 1;\n    var barWidth = retrieveColumnLayout(makeColumnLayout([seriesModel]), baseAxis, seriesModel).width;\n\n    if (!(barWidth > LARGE_BAR_MIN_WIDTH)) {\n      // jshint ignore:line\n      barWidth = LARGE_BAR_MIN_WIDTH;\n    }\n\n    return {\n      progress: progress\n    };\n\n    function progress(params, data) {\n      var largePoints = new LargeArr(params.count * 2);\n      var dataIndex;\n      var coord = [];\n      var valuePair = [];\n      var offset = 0;\n\n      while ((dataIndex = params.next()) != null) {\n        valuePair[valueDimIdx] = data.get(valueDim, dataIndex);\n        valuePair[1 - valueDimIdx] = data.get(baseDim, dataIndex);\n        coord = cartesian.dataToPoint(valuePair, null, coord);\n        largePoints[offset++] = coord[0];\n        largePoints[offset++] = coord[1];\n      }\n\n      data.setLayout({\n        largePoints: largePoints,\n        barWidth: barWidth,\n        valueAxisStart: getValueAxisStart(baseAxis, valueAxis, false),\n        valueAxisHorizontal: valueAxisHorizontal\n      });\n    }\n  }\n};\n\nfunction isOnCartesian(seriesModel) {\n  return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';\n}\n\nfunction isInLargeMode(seriesModel) {\n  return seriesModel.pipelineContext && seriesModel.pipelineContext.large;\n}\n\nfunction getValueAxisStart(baseAxis, valueAxis, stacked) {\n  return zrUtil.indexOf(baseAxis.getAxesOnZeroOf(), valueAxis) >= 0 || stacked ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0)) : valueAxis.getGlobalExtent()[0];\n}\n\nexports.getLayoutOnAxis = getLayoutOnAxis;\nexports.prepareLayoutBarSeries = prepareLayoutBarSeries;\nexports.makeColumnLayout = makeColumnLayout;\nexports.retrieveColumnLayout = retrieveColumnLayout;\nexports.layout = layout;\nexports.largeLayout = largeLayout;","map":{"version":3,"names":["zrUtil","require","_number","parsePercent","_dataStackHelper","isDimensionStacked","createRenderPlanner","STACK_PREFIX","LARGE_BAR_MIN_WIDTH","LargeArr","Float32Array","Array","getSeriesStackId","seriesModel","get","seriesIndex","getAxisKey","axis","dim","index","getLayoutOnAxis","opt","params","baseAxis","axisKey","type","bandWidth","getBandWidth","i","count","push","defaults","stackId","widthAndOffsets","doCalBarWidthAndOffset","result","item","offsetCenter","offset","width","prepareLayoutBarSeries","seriesType","ecModel","seriesModels","eachSeriesByType","isOnCartesian","isInLargeMode","makeColumnLayout","barSeries","seriesInfoList","each","data","getData","cartesian","coordinateSystem","getBaseAxis","axisExtent","getExtent","Math","abs","barWidth","barMaxWidth","barGap","barCategoryGap","columnsMap","seriesInfo","idx","columnsOnAxis","remainedWidth","autoWidthCount","categoryGap","gap","stacks","maxWidth","min","coordSysName","barGapPercent","autoWidth","max","column","stack","widthSum","lastColumn","retrieveColumnLayout","barWidthAndOffset","layout","lastStackCoords","lastStackCoordsOrigin","columnLayoutInfo","columnOffset","columnWidth","valueAxis","getOtherAxis","barMinHeight","setLayout","size","valueDim","mapDimension","baseDim","stacked","isValueAxisH","isHorizontal","valueAxisStart","getValueAxisStart","len","value","baseValue","isNaN","sign","baseCoord","p","n","x","y","height","coord","dataToPoint","setItemLayout","largeLayout","plan","reset","valueAxisHorizontal","valueDimIdx","progress","largePoints","dataIndex","valuePair","next","pipelineContext","large","indexOf","getAxesOnZeroOf","toGlobalCoord","dataToCoord","getGlobalExtent","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/layout/barGrid.js"],"sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n\nvar createRenderPlanner = require(\"../chart/helper/createRenderPlanner\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar STACK_PREFIX = '__ec_stack_';\nvar LARGE_BAR_MIN_WIDTH = 0.5;\nvar LargeArr = typeof Float32Array !== 'undefined' ? Float32Array : Array;\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(axis) {\n  return axis.dim + axis.index;\n}\n/**\n * @param {Object} opt\n * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.\n * @param {number} opt.count Positive interger.\n * @param {number} [opt.barWidth]\n * @param {number} [opt.barMaxWidth]\n * @param {number} [opt.barGap]\n * @param {number} [opt.barCategoryGap]\n * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.\n */\n\n\nfunction getLayoutOnAxis(opt) {\n  var params = [];\n  var baseAxis = opt.axis;\n  var axisKey = 'axis0';\n\n  if (baseAxis.type !== 'category') {\n    return;\n  }\n\n  var bandWidth = baseAxis.getBandWidth();\n\n  for (var i = 0; i < opt.count || 0; i++) {\n    params.push(zrUtil.defaults({\n      bandWidth: bandWidth,\n      axisKey: axisKey,\n      stackId: STACK_PREFIX + i\n    }, opt));\n  }\n\n  var widthAndOffsets = doCalBarWidthAndOffset(params);\n  var result = [];\n\n  for (var i = 0; i < opt.count; i++) {\n    var item = widthAndOffsets[axisKey][STACK_PREFIX + i];\n    item.offsetCenter = item.offset + item.width / 2;\n    result.push(item);\n  }\n\n  return result;\n}\n\nfunction prepareLayoutBarSeries(seriesType, ecModel) {\n  var seriesModels = [];\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for cartesian2d only\n    if (isOnCartesian(seriesModel) && !isInLargeMode(seriesModel)) {\n      seriesModels.push(seriesModel);\n    }\n  });\n  return seriesModels;\n}\n\nfunction makeColumnLayout(barSeries) {\n  var seriesInfoList = [];\n  zrUtil.each(barSeries, function (seriesModel) {\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n    seriesInfoList.push({\n      bandWidth: bandWidth,\n      barWidth: barWidth,\n      barMaxWidth: barMaxWidth,\n      barGap: barGap,\n      barCategoryGap: barCategoryGap,\n      axisKey: getAxisKey(baseAxis),\n      stackId: getSeriesStackId(seriesModel)\n    });\n  });\n  return doCalBarWidthAndOffset(seriesInfoList);\n}\n\nfunction doCalBarWidthAndOffset(seriesInfoList) {\n  // Columns info on each category axis. Key is cartesian name\n  var columnsMap = {};\n  zrUtil.each(seriesInfoList, function (seriesInfo, idx) {\n    var axisKey = seriesInfo.axisKey;\n    var bandWidth = seriesInfo.bandWidth;\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = seriesInfo.stackId;\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    }; // Caution: In a single coordinate system, these barGrid attributes\n    // will be shared by series. Consider that they have default values,\n    // only the attributes set on the last series will work.\n    // Do not change this fact unless there will be a break change.\n    // TODO\n\n    var barWidth = seriesInfo.barWidth;\n\n    if (barWidth && !stacks[stackId].width) {\n      // See #6312, do not restrict width.\n      stacks[stackId].width = barWidth;\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    var barMaxWidth = seriesInfo.barMaxWidth;\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    var barGap = seriesInfo.barGap;\n    barGap != null && (columnsOnAxis.gap = barGap);\n    var barCategoryGap = seriesInfo.barCategoryGap;\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column, stack) {\n      var maxWidth = column.maxWidth;\n\n      if (maxWidth && maxWidth < autoWidth) {\n        maxWidth = Math.min(maxWidth, remainedWidth);\n\n        if (column.width) {\n          maxWidth = Math.min(maxWidth, column.width);\n        }\n\n        remainedWidth -= maxWidth;\n        column.width = maxWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n/**\n * @param {Object} barWidthAndOffset The result of makeColumnLayout\n * @param {module:echarts/coord/Axis} axis\n * @param {module:echarts/model/Series} [seriesModel] If not provided, return all.\n * @return {Object} {stackId: {offset, width}} or {offset, width} if seriesModel provided.\n */\n\n\nfunction retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {\n  if (barWidthAndOffset && axis) {\n    var result = barWidthAndOffset[getAxisKey(axis)];\n\n    if (result != null && seriesModel != null) {\n      result = result[getSeriesStackId(seriesModel)];\n    }\n\n    return result;\n  }\n}\n/**\n * @param {string} seriesType\n * @param {module:echarts/model/Global} ecModel\n */\n\n\nfunction layout(seriesType, ecModel) {\n  var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);\n  var barWidthAndOffset = makeColumnLayout(seriesModels);\n  var lastStackCoords = {};\n  var lastStackCoordsOrigin = {};\n  zrUtil.each(seriesModels, function (seriesModel) {\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = cartesian.getOtherAxis(baseAxis);\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\n\n    data.setLayout({\n      offset: columnOffset,\n      size: columnWidth\n    });\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var isValueAxisH = valueAxis.isHorizontal();\n    var valueAxisStart = getValueAxisStart(baseAxis, valueAxis, stacked);\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n\n      if (isNaN(value)) {\n        continue;\n      }\n\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n\n      if (stacked) {\n        // Only ordinal axis can be stacked.\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            // Positive stack\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var x;\n      var y;\n      var width;\n      var height;\n\n      if (isValueAxisH) {\n        var coord = cartesian.dataToPoint([value, baseValue]);\n        x = baseCoord;\n        y = coord[1] + columnOffset;\n        width = coord[0] - valueAxisStart;\n        height = columnWidth;\n\n        if (Math.abs(width) < barMinHeight) {\n          width = (width < 0 ? -1 : 1) * barMinHeight;\n        }\n\n        stacked && (lastStackCoords[stackId][baseValue][sign] += width);\n      } else {\n        var coord = cartesian.dataToPoint([baseValue, value]);\n        x = coord[0] + columnOffset;\n        y = baseCoord;\n        width = columnWidth;\n        height = coord[1] - valueAxisStart;\n\n        if (Math.abs(height) < barMinHeight) {\n          // Include zero to has a positive bar\n          height = (height <= 0 ? -1 : 1) * barMinHeight;\n        }\n\n        stacked && (lastStackCoords[stackId][baseValue][sign] += height);\n      }\n\n      data.setItemLayout(idx, {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    }\n  }, this);\n} // TODO: Do not support stack in large mode yet.\n\n\nvar largeLayout = {\n  seriesType: 'bar',\n  plan: createRenderPlanner(),\n  reset: function (seriesModel) {\n    if (!isOnCartesian(seriesModel) || !isInLargeMode(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var valueAxis = cartesian.getOtherAxis(baseAxis);\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var valueAxisHorizontal = valueAxis.isHorizontal();\n    var valueDimIdx = valueAxisHorizontal ? 0 : 1;\n    var barWidth = retrieveColumnLayout(makeColumnLayout([seriesModel]), baseAxis, seriesModel).width;\n\n    if (!(barWidth > LARGE_BAR_MIN_WIDTH)) {\n      // jshint ignore:line\n      barWidth = LARGE_BAR_MIN_WIDTH;\n    }\n\n    return {\n      progress: progress\n    };\n\n    function progress(params, data) {\n      var largePoints = new LargeArr(params.count * 2);\n      var dataIndex;\n      var coord = [];\n      var valuePair = [];\n      var offset = 0;\n\n      while ((dataIndex = params.next()) != null) {\n        valuePair[valueDimIdx] = data.get(valueDim, dataIndex);\n        valuePair[1 - valueDimIdx] = data.get(baseDim, dataIndex);\n        coord = cartesian.dataToPoint(valuePair, null, coord);\n        largePoints[offset++] = coord[0];\n        largePoints[offset++] = coord[1];\n      }\n\n      data.setLayout({\n        largePoints: largePoints,\n        barWidth: barWidth,\n        valueAxisStart: getValueAxisStart(baseAxis, valueAxis, false),\n        valueAxisHorizontal: valueAxisHorizontal\n      });\n    }\n  }\n};\n\nfunction isOnCartesian(seriesModel) {\n  return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';\n}\n\nfunction isInLargeMode(seriesModel) {\n  return seriesModel.pipelineContext && seriesModel.pipelineContext.large;\n}\n\nfunction getValueAxisStart(baseAxis, valueAxis, stacked) {\n  return zrUtil.indexOf(baseAxis.getAxesOnZeroOf(), valueAxis) >= 0 || stacked ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0)) : valueAxis.getGlobalExtent()[0];\n}\n\nexports.getLayoutOnAxis = getLayoutOnAxis;\nexports.prepareLayoutBarSeries = prepareLayoutBarSeries;\nexports.makeColumnLayout = makeColumnLayout;\nexports.retrieveColumnLayout = retrieveColumnLayout;\nexports.layout = layout;\nexports.largeLayout = largeLayout;"],"mappings":"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"},"metadata":{},"sourceType":"script"}