{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar colorUtil = require(\"zrender/lib/tool/color\");\n\nvar List = require(\"../../data/List\");\n\nvar numberUtil = require(\"../../util/number\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar markerHelper = require(\"./markerHelper\");\n\nvar MarkerView = require(\"./MarkerView\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO Better on polar\n\n\nvar markAreaTransform = function (seriesModel, coordSys, maModel, item) {\n  var lt = markerHelper.dataTransform(seriesModel, item[0]);\n  var rb = markerHelper.dataTransform(seriesModel, item[1]);\n  var retrieve = zrUtil.retrieve; // FIXME make sure lt is less than rb\n\n  var ltCoord = lt.coord;\n  var rbCoord = rb.coord;\n  ltCoord[0] = retrieve(ltCoord[0], -Infinity);\n  ltCoord[1] = retrieve(ltCoord[1], -Infinity);\n  rbCoord[0] = retrieve(rbCoord[0], Infinity);\n  rbCoord[1] = retrieve(rbCoord[1], Infinity); // Merge option into one\n\n  var result = zrUtil.mergeAll([{}, lt, rb]);\n  result.coord = [lt.coord, rb.coord];\n  result.x0 = lt.x;\n  result.y0 = lt.y;\n  result.x1 = rb.x;\n  result.y1 = rb.y;\n  return result;\n};\n\nfunction isInifinity(val) {\n  return !isNaN(val) && !isFinite(val);\n} // If a markArea has one dim\n\n\nfunction ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {\n  var otherDimIndex = 1 - dimIndex;\n  return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);\n}\n\nfunction markAreaFilter(coordSys, item) {\n  var fromCoord = item.coord[0];\n  var toCoord = item.coord[1];\n\n  if (coordSys.type === 'cartesian2d') {\n    // In case\n    // {\n    //  markArea: {\n    //    data: [{ yAxis: 2 }]\n    //  }\n    // }\n    if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {\n      return true;\n    }\n  }\n\n  return markerHelper.dataFilter(coordSys, {\n    coord: fromCoord,\n    x: item.x0,\n    y: item.y0\n  }) || markerHelper.dataFilter(coordSys, {\n    coord: toCoord,\n    x: item.x1,\n    y: item.y1\n  });\n} // dims can be ['x0', 'y0'], ['x1', 'y1'], ['x0', 'y1'], ['x1', 'y0']\n\n\nfunction getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {\n  var coordSys = seriesModel.coordinateSystem;\n  var itemModel = data.getItemModel(idx);\n  var point;\n  var xPx = numberUtil.parsePercent(itemModel.get(dims[0]), api.getWidth());\n  var yPx = numberUtil.parsePercent(itemModel.get(dims[1]), api.getHeight());\n\n  if (!isNaN(xPx) && !isNaN(yPx)) {\n    point = [xPx, yPx];\n  } else {\n    // Chart like bar may have there own marker positioning logic\n    if (seriesModel.getMarkerPosition) {\n      // Use the getMarkerPoisition\n      point = seriesModel.getMarkerPosition(data.getValues(dims, idx));\n    } else {\n      var x = data.get(dims[0], idx);\n      var y = data.get(dims[1], idx);\n      var pt = [x, y];\n      coordSys.clampData && coordSys.clampData(pt, pt);\n      point = coordSys.dataToPoint(pt, true);\n    }\n\n    if (coordSys.type === 'cartesian2d') {\n      var xAxis = coordSys.getAxis('x');\n      var yAxis = coordSys.getAxis('y');\n      var x = data.get(dims[0], idx);\n      var y = data.get(dims[1], idx);\n\n      if (isInifinity(x)) {\n        point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === 'x0' ? 0 : 1]);\n      } else if (isInifinity(y)) {\n        point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === 'y0' ? 0 : 1]);\n      }\n    } // Use x, y if has any\n\n\n    if (!isNaN(xPx)) {\n      point[0] = xPx;\n    }\n\n    if (!isNaN(yPx)) {\n      point[1] = yPx;\n    }\n  }\n\n  return point;\n}\n\nvar dimPermutations = [['x0', 'y0'], ['x1', 'y0'], ['x1', 'y1'], ['x0', 'y1']];\nMarkerView.extend({\n  type: 'markArea',\n  // updateLayout: function (markAreaModel, ecModel, api) {\n  //     ecModel.eachSeries(function (seriesModel) {\n  //         var maModel = seriesModel.markAreaModel;\n  //         if (maModel) {\n  //             var areaData = maModel.getData();\n  //             areaData.each(function (idx) {\n  //                 var points = zrUtil.map(dimPermutations, function (dim) {\n  //                     return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\n  //                 });\n  //                 // Layout\n  //                 areaData.setItemLayout(idx, points);\n  //                 var el = areaData.getItemGraphicEl(idx);\n  //                 el.setShape('points', points);\n  //             });\n  //         }\n  //     }, this);\n  // },\n  updateTransform: function (markAreaModel, ecModel, api) {\n    ecModel.eachSeries(function (seriesModel) {\n      var maModel = seriesModel.markAreaModel;\n\n      if (maModel) {\n        var areaData = maModel.getData();\n        areaData.each(function (idx) {\n          var points = zrUtil.map(dimPermutations, function (dim) {\n            return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\n          }); // Layout\n\n          areaData.setItemLayout(idx, points);\n          var el = areaData.getItemGraphicEl(idx);\n          el.setShape('points', points);\n        });\n      }\n    }, this);\n  },\n  renderSeries: function (seriesModel, maModel, ecModel, api) {\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesId = seriesModel.id;\n    var seriesData = seriesModel.getData();\n    var areaGroupMap = this.markerGroupMap;\n    var polygonGroup = areaGroupMap.get(seriesId) || areaGroupMap.set(seriesId, {\n      group: new graphic.Group()\n    });\n    this.group.add(polygonGroup.group);\n    polygonGroup.__keep = true;\n    var areaData = createList(coordSys, seriesModel, maModel); // Line data for tooltip and formatter\n\n    maModel.setData(areaData); // Update visual and layout of line\n\n    areaData.each(function (idx) {\n      // Layout\n      areaData.setItemLayout(idx, zrUtil.map(dimPermutations, function (dim) {\n        return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\n      })); // Visual\n\n      areaData.setItemVisual(idx, {\n        color: seriesData.getVisual('color')\n      });\n    });\n    areaData.diff(polygonGroup.__data).add(function (idx) {\n      var polygon = new graphic.Polygon({\n        shape: {\n          points: areaData.getItemLayout(idx)\n        }\n      });\n      areaData.setItemGraphicEl(idx, polygon);\n      polygonGroup.group.add(polygon);\n    }).update(function (newIdx, oldIdx) {\n      var polygon = polygonGroup.__data.getItemGraphicEl(oldIdx);\n\n      graphic.updateProps(polygon, {\n        shape: {\n          points: areaData.getItemLayout(newIdx)\n        }\n      }, maModel, newIdx);\n      polygonGroup.group.add(polygon);\n      areaData.setItemGraphicEl(newIdx, polygon);\n    }).remove(function (idx) {\n      var polygon = polygonGroup.__data.getItemGraphicEl(idx);\n\n      polygonGroup.group.remove(polygon);\n    }).execute();\n    areaData.eachItemGraphicEl(function (polygon, idx) {\n      var itemModel = areaData.getItemModel(idx);\n      var labelModel = itemModel.getModel('label');\n      var labelHoverModel = itemModel.getModel('emphasis.label');\n      var color = areaData.getItemVisual(idx, 'color');\n      polygon.useStyle(zrUtil.defaults(itemModel.getModel('itemStyle').getItemStyle(), {\n        fill: colorUtil.modifyAlpha(color, 0.4),\n        stroke: color\n      }));\n      polygon.hoverStyle = itemModel.getModel('emphasis.itemStyle').getItemStyle();\n      graphic.setLabelStyle(polygon.style, polygon.hoverStyle, labelModel, labelHoverModel, {\n        labelFetcher: maModel,\n        labelDataIndex: idx,\n        defaultText: areaData.getName(idx) || '',\n        isRectText: true,\n        autoColor: color\n      });\n      graphic.setHoverStyle(polygon, {});\n      polygon.dataModel = maModel;\n    });\n    polygonGroup.__data = areaData;\n    polygonGroup.group.silent = maModel.get('silent') || seriesModel.get('silent');\n  }\n});\n/**\n * @inner\n * @param {module:echarts/coord/*} coordSys\n * @param {module:echarts/model/Series} seriesModel\n * @param {module:echarts/model/Model} mpModel\n */\n\nfunction createList(coordSys, seriesModel, maModel) {\n  var coordDimsInfos;\n  var areaData;\n  var dims = ['x0', 'y0', 'x1', 'y1'];\n\n  if (coordSys) {\n    coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\n      var data = seriesModel.getData();\n      var info = data.getDimensionInfo(data.mapDimension(coordDim)) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\n\n      return zrUtil.defaults({\n        name: coordDim\n      }, info);\n    });\n    areaData = new List(zrUtil.map(dims, function (dim, idx) {\n      return {\n        name: dim,\n        type: coordDimsInfos[idx % 2].type\n      };\n    }), maModel);\n  } else {\n    coordDimsInfos = [{\n      name: 'value',\n      type: 'float'\n    }];\n    areaData = new List(coordDimsInfos, maModel);\n  }\n\n  var optData = zrUtil.map(maModel.get('data'), zrUtil.curry(markAreaTransform, seriesModel, coordSys, maModel));\n\n  if (coordSys) {\n    optData = zrUtil.filter(optData, zrUtil.curry(markAreaFilter, coordSys));\n  }\n\n  var dimValueGetter = coordSys ? function (item, dimName, dataIndex, dimIndex) {\n    return item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];\n  } : function (item) {\n    return item.value;\n  };\n  areaData.initData(optData, null, dimValueGetter);\n  areaData.hasItemOption = true;\n  return areaData;\n}","map":{"version":3,"names":["zrUtil","require","colorUtil","List","numberUtil","graphic","markerHelper","MarkerView","markAreaTransform","seriesModel","coordSys","maModel","item","lt","dataTransform","rb","retrieve","ltCoord","coord","rbCoord","Infinity","result","mergeAll","x0","x","y0","y","x1","y1","isInifinity","val","isNaN","isFinite","ifMarkLineHasOnlyDim","dimIndex","fromCoord","toCoord","otherDimIndex","markAreaFilter","type","dataFilter","getSingleMarkerEndPoint","data","idx","dims","api","coordinateSystem","itemModel","getItemModel","point","xPx","parsePercent","get","getWidth","yPx","getHeight","getMarkerPosition","getValues","pt","clampData","dataToPoint","xAxis","getAxis","yAxis","toGlobalCoord","getExtent","dimPermutations","extend","updateTransform","markAreaModel","ecModel","eachSeries","areaData","getData","each","points","map","dim","setItemLayout","el","getItemGraphicEl","setShape","renderSeries","seriesId","id","seriesData","areaGroupMap","markerGroupMap","polygonGroup","set","group","Group","add","__keep","createList","setData","setItemVisual","color","getVisual","diff","__data","polygon","Polygon","shape","getItemLayout","setItemGraphicEl","update","newIdx","oldIdx","updateProps","remove","execute","eachItemGraphicEl","labelModel","getModel","labelHoverModel","getItemVisual","useStyle","defaults","getItemStyle","fill","modifyAlpha","stroke","hoverStyle","setLabelStyle","style","labelFetcher","labelDataIndex","defaultText","getName","isRectText","autoColor","setHoverStyle","dataModel","silent","coordDimsInfos","dimensions","coordDim","info","getDimensionInfo","mapDimension","name","optData","curry","filter","dimValueGetter","dimName","dataIndex","Math","floor","value","initData","hasItemOption"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/component/marker/MarkAreaView.js"],"sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar colorUtil = require(\"zrender/lib/tool/color\");\n\nvar List = require(\"../../data/List\");\n\nvar numberUtil = require(\"../../util/number\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar markerHelper = require(\"./markerHelper\");\n\nvar MarkerView = require(\"./MarkerView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO Better on polar\nvar markAreaTransform = function (seriesModel, coordSys, maModel, item) {\n  var lt = markerHelper.dataTransform(seriesModel, item[0]);\n  var rb = markerHelper.dataTransform(seriesModel, item[1]);\n  var retrieve = zrUtil.retrieve; // FIXME make sure lt is less than rb\n\n  var ltCoord = lt.coord;\n  var rbCoord = rb.coord;\n  ltCoord[0] = retrieve(ltCoord[0], -Infinity);\n  ltCoord[1] = retrieve(ltCoord[1], -Infinity);\n  rbCoord[0] = retrieve(rbCoord[0], Infinity);\n  rbCoord[1] = retrieve(rbCoord[1], Infinity); // Merge option into one\n\n  var result = zrUtil.mergeAll([{}, lt, rb]);\n  result.coord = [lt.coord, rb.coord];\n  result.x0 = lt.x;\n  result.y0 = lt.y;\n  result.x1 = rb.x;\n  result.y1 = rb.y;\n  return result;\n};\n\nfunction isInifinity(val) {\n  return !isNaN(val) && !isFinite(val);\n} // If a markArea has one dim\n\n\nfunction ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {\n  var otherDimIndex = 1 - dimIndex;\n  return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);\n}\n\nfunction markAreaFilter(coordSys, item) {\n  var fromCoord = item.coord[0];\n  var toCoord = item.coord[1];\n\n  if (coordSys.type === 'cartesian2d') {\n    // In case\n    // {\n    //  markArea: {\n    //    data: [{ yAxis: 2 }]\n    //  }\n    // }\n    if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {\n      return true;\n    }\n  }\n\n  return markerHelper.dataFilter(coordSys, {\n    coord: fromCoord,\n    x: item.x0,\n    y: item.y0\n  }) || markerHelper.dataFilter(coordSys, {\n    coord: toCoord,\n    x: item.x1,\n    y: item.y1\n  });\n} // dims can be ['x0', 'y0'], ['x1', 'y1'], ['x0', 'y1'], ['x1', 'y0']\n\n\nfunction getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {\n  var coordSys = seriesModel.coordinateSystem;\n  var itemModel = data.getItemModel(idx);\n  var point;\n  var xPx = numberUtil.parsePercent(itemModel.get(dims[0]), api.getWidth());\n  var yPx = numberUtil.parsePercent(itemModel.get(dims[1]), api.getHeight());\n\n  if (!isNaN(xPx) && !isNaN(yPx)) {\n    point = [xPx, yPx];\n  } else {\n    // Chart like bar may have there own marker positioning logic\n    if (seriesModel.getMarkerPosition) {\n      // Use the getMarkerPoisition\n      point = seriesModel.getMarkerPosition(data.getValues(dims, idx));\n    } else {\n      var x = data.get(dims[0], idx);\n      var y = data.get(dims[1], idx);\n      var pt = [x, y];\n      coordSys.clampData && coordSys.clampData(pt, pt);\n      point = coordSys.dataToPoint(pt, true);\n    }\n\n    if (coordSys.type === 'cartesian2d') {\n      var xAxis = coordSys.getAxis('x');\n      var yAxis = coordSys.getAxis('y');\n      var x = data.get(dims[0], idx);\n      var y = data.get(dims[1], idx);\n\n      if (isInifinity(x)) {\n        point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === 'x0' ? 0 : 1]);\n      } else if (isInifinity(y)) {\n        point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === 'y0' ? 0 : 1]);\n      }\n    } // Use x, y if has any\n\n\n    if (!isNaN(xPx)) {\n      point[0] = xPx;\n    }\n\n    if (!isNaN(yPx)) {\n      point[1] = yPx;\n    }\n  }\n\n  return point;\n}\n\nvar dimPermutations = [['x0', 'y0'], ['x1', 'y0'], ['x1', 'y1'], ['x0', 'y1']];\nMarkerView.extend({\n  type: 'markArea',\n  // updateLayout: function (markAreaModel, ecModel, api) {\n  //     ecModel.eachSeries(function (seriesModel) {\n  //         var maModel = seriesModel.markAreaModel;\n  //         if (maModel) {\n  //             var areaData = maModel.getData();\n  //             areaData.each(function (idx) {\n  //                 var points = zrUtil.map(dimPermutations, function (dim) {\n  //                     return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\n  //                 });\n  //                 // Layout\n  //                 areaData.setItemLayout(idx, points);\n  //                 var el = areaData.getItemGraphicEl(idx);\n  //                 el.setShape('points', points);\n  //             });\n  //         }\n  //     }, this);\n  // },\n  updateTransform: function (markAreaModel, ecModel, api) {\n    ecModel.eachSeries(function (seriesModel) {\n      var maModel = seriesModel.markAreaModel;\n\n      if (maModel) {\n        var areaData = maModel.getData();\n        areaData.each(function (idx) {\n          var points = zrUtil.map(dimPermutations, function (dim) {\n            return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\n          }); // Layout\n\n          areaData.setItemLayout(idx, points);\n          var el = areaData.getItemGraphicEl(idx);\n          el.setShape('points', points);\n        });\n      }\n    }, this);\n  },\n  renderSeries: function (seriesModel, maModel, ecModel, api) {\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesId = seriesModel.id;\n    var seriesData = seriesModel.getData();\n    var areaGroupMap = this.markerGroupMap;\n    var polygonGroup = areaGroupMap.get(seriesId) || areaGroupMap.set(seriesId, {\n      group: new graphic.Group()\n    });\n    this.group.add(polygonGroup.group);\n    polygonGroup.__keep = true;\n    var areaData = createList(coordSys, seriesModel, maModel); // Line data for tooltip and formatter\n\n    maModel.setData(areaData); // Update visual and layout of line\n\n    areaData.each(function (idx) {\n      // Layout\n      areaData.setItemLayout(idx, zrUtil.map(dimPermutations, function (dim) {\n        return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\n      })); // Visual\n\n      areaData.setItemVisual(idx, {\n        color: seriesData.getVisual('color')\n      });\n    });\n    areaData.diff(polygonGroup.__data).add(function (idx) {\n      var polygon = new graphic.Polygon({\n        shape: {\n          points: areaData.getItemLayout(idx)\n        }\n      });\n      areaData.setItemGraphicEl(idx, polygon);\n      polygonGroup.group.add(polygon);\n    }).update(function (newIdx, oldIdx) {\n      var polygon = polygonGroup.__data.getItemGraphicEl(oldIdx);\n\n      graphic.updateProps(polygon, {\n        shape: {\n          points: areaData.getItemLayout(newIdx)\n        }\n      }, maModel, newIdx);\n      polygonGroup.group.add(polygon);\n      areaData.setItemGraphicEl(newIdx, polygon);\n    }).remove(function (idx) {\n      var polygon = polygonGroup.__data.getItemGraphicEl(idx);\n\n      polygonGroup.group.remove(polygon);\n    }).execute();\n    areaData.eachItemGraphicEl(function (polygon, idx) {\n      var itemModel = areaData.getItemModel(idx);\n      var labelModel = itemModel.getModel('label');\n      var labelHoverModel = itemModel.getModel('emphasis.label');\n      var color = areaData.getItemVisual(idx, 'color');\n      polygon.useStyle(zrUtil.defaults(itemModel.getModel('itemStyle').getItemStyle(), {\n        fill: colorUtil.modifyAlpha(color, 0.4),\n        stroke: color\n      }));\n      polygon.hoverStyle = itemModel.getModel('emphasis.itemStyle').getItemStyle();\n      graphic.setLabelStyle(polygon.style, polygon.hoverStyle, labelModel, labelHoverModel, {\n        labelFetcher: maModel,\n        labelDataIndex: idx,\n        defaultText: areaData.getName(idx) || '',\n        isRectText: true,\n        autoColor: color\n      });\n      graphic.setHoverStyle(polygon, {});\n      polygon.dataModel = maModel;\n    });\n    polygonGroup.__data = areaData;\n    polygonGroup.group.silent = maModel.get('silent') || seriesModel.get('silent');\n  }\n});\n/**\n * @inner\n * @param {module:echarts/coord/*} coordSys\n * @param {module:echarts/model/Series} seriesModel\n * @param {module:echarts/model/Model} mpModel\n */\n\nfunction createList(coordSys, seriesModel, maModel) {\n  var coordDimsInfos;\n  var areaData;\n  var dims = ['x0', 'y0', 'x1', 'y1'];\n\n  if (coordSys) {\n    coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\n      var data = seriesModel.getData();\n      var info = data.getDimensionInfo(data.mapDimension(coordDim)) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\n\n      return zrUtil.defaults({\n        name: coordDim\n      }, info);\n    });\n    areaData = new List(zrUtil.map(dims, function (dim, idx) {\n      return {\n        name: dim,\n        type: coordDimsInfos[idx % 2].type\n      };\n    }), maModel);\n  } else {\n    coordDimsInfos = [{\n      name: 'value',\n      type: 'float'\n    }];\n    areaData = new List(coordDimsInfos, maModel);\n  }\n\n  var optData = zrUtil.map(maModel.get('data'), zrUtil.curry(markAreaTransform, seriesModel, coordSys, maModel));\n\n  if (coordSys) {\n    optData = zrUtil.filter(optData, zrUtil.curry(markAreaFilter, coordSys));\n  }\n\n  var dimValueGetter = coordSys ? function (item, dimName, dataIndex, dimIndex) {\n    return item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];\n  } : function (item) {\n    return item.value;\n  };\n  areaData.initData(optData, null, dimValueGetter);\n  areaData.hasItemOption = true;\n  return areaData;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}