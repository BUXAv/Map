{"ast":null,"code":"var SeriesModel = require(\"../../model/Series\");\n\nvar createDimensions = require(\"../../data/helper/createDimensions\");\n\nvar _dimensionHelper = require(\"../../data/helper/dimensionHelper\");\n\nvar getDimensionTypeByAxis = _dimensionHelper.getDimensionTypeByAxis;\n\nvar List = require(\"../../data/List\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\nvar nest = require(\"../../util/array/nest\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file  Define the themeRiver view's series model\n * @author Deqing Li(annong035@gmail.com)\n */\n\n\nvar DATA_NAME_INDEX = 2;\nvar ThemeRiverSeries = SeriesModel.extend({\n  type: 'series.themeRiver',\n  dependencies: ['singleAxis'],\n\n  /**\n   * @readOnly\n   * @type {module:zrender/core/util#HashMap}\n   */\n  nameMap: null,\n\n  /**\n   * @override\n   */\n  init: function (option) {\n    ThemeRiverSeries.superApply(this, 'init', arguments); // Put this function here is for the sake of consistency of code style.\n    // Enable legend selection for each data item\n    // Use a function instead of direct access because data reference may changed\n\n    this.legendDataProvider = function () {\n      return this.getRawData();\n    };\n  },\n\n  /**\n   * If there is no value of a certain point in the time for some event,set it value to 0.\n   *\n   * @param {Array} data  initial data in the option\n   * @return {Array}\n   */\n  fixData: function (data) {\n    var rawDataLength = data.length; // grouped data by name\n\n    var dataByName = nest().key(function (dataItem) {\n      return dataItem[2];\n    }).entries(data); // data group in each layer\n\n    var layData = zrUtil.map(dataByName, function (d) {\n      return {\n        name: d.key,\n        dataList: d.values\n      };\n    });\n    var layerNum = layData.length;\n    var largestLayer = -1;\n    var index = -1;\n\n    for (var i = 0; i < layerNum; ++i) {\n      var len = layData[i].dataList.length;\n\n      if (len > largestLayer) {\n        largestLayer = len;\n        index = i;\n      }\n    }\n\n    for (var k = 0; k < layerNum; ++k) {\n      if (k === index) {\n        continue;\n      }\n\n      var name = layData[k].name;\n\n      for (var j = 0; j < largestLayer; ++j) {\n        var timeValue = layData[index].dataList[j][0];\n        var length = layData[k].dataList.length;\n        var keyIndex = -1;\n\n        for (var l = 0; l < length; ++l) {\n          var value = layData[k].dataList[l][0];\n\n          if (value === timeValue) {\n            keyIndex = l;\n            break;\n          }\n        }\n\n        if (keyIndex === -1) {\n          data[rawDataLength] = [];\n          data[rawDataLength][0] = timeValue;\n          data[rawDataLength][1] = 0;\n          data[rawDataLength][2] = name;\n          rawDataLength++;\n        }\n      }\n    }\n\n    return data;\n  },\n\n  /**\n   * @override\n   * @param  {Object} option  the initial option that user gived\n   * @param  {module:echarts/model/Model} ecModel  the model object for themeRiver option\n   * @return {module:echarts/data/List}\n   */\n  getInitialData: function (option, ecModel) {\n    var singleAxisModel = ecModel.queryComponents({\n      mainType: 'singleAxis',\n      index: this.get('singleAxisIndex'),\n      id: this.get('singleAxisId')\n    })[0];\n    var axisType = singleAxisModel.get('type'); // filter the data item with the value of label is undefined\n\n    var filterData = zrUtil.filter(option.data, function (dataItem) {\n      return dataItem[2] !== undefined;\n    }); // ??? TODO design a stage to transfer data for themeRiver and lines?\n\n    var data = this.fixData(filterData || []);\n    var nameList = [];\n    var nameMap = this.nameMap = zrUtil.createHashMap();\n    var count = 0;\n\n    for (var i = 0; i < data.length; ++i) {\n      nameList.push(data[i][DATA_NAME_INDEX]);\n\n      if (!nameMap.get(data[i][DATA_NAME_INDEX])) {\n        nameMap.set(data[i][DATA_NAME_INDEX], count);\n        count++;\n      }\n    }\n\n    var dimensionsInfo = createDimensions(data, {\n      coordDimensions: ['single'],\n      dimensionsDefine: [{\n        name: 'time',\n        type: getDimensionTypeByAxis(axisType)\n      }, {\n        name: 'value',\n        type: 'float'\n      }, {\n        name: 'name',\n        type: 'ordinal'\n      }],\n      encodeDefine: {\n        single: 0,\n        value: 1,\n        itemName: 2\n      }\n    });\n    var list = new List(dimensionsInfo, this);\n    list.initData(data);\n    return list;\n  },\n\n  /**\n   * The raw data is divided into multiple layers and each layer\n   *     has same name.\n   *\n   * @return {Array.<Array.<number>>}\n   */\n  getLayerSeries: function () {\n    var data = this.getData();\n    var lenCount = data.count();\n    var indexArr = [];\n\n    for (var i = 0; i < lenCount; ++i) {\n      indexArr[i] = i;\n    } // data group by name\n\n\n    var dataByName = nest().key(function (index) {\n      return data.get('name', index);\n    }).entries(indexArr);\n    var layerSeries = zrUtil.map(dataByName, function (d) {\n      return {\n        name: d.key,\n        indices: d.values\n      };\n    });\n    var timeDim = data.mapDimension('single');\n\n    for (var j = 0; j < layerSeries.length; ++j) {\n      layerSeries[j].indices.sort(comparer);\n    }\n\n    function comparer(index1, index2) {\n      return data.get(timeDim, index1) - data.get(timeDim, index2);\n    }\n\n    return layerSeries;\n  },\n\n  /**\n   * Get data indices for show tooltip content\n   *\n   * @param {Array.<string>|string} dim  single coordinate dimension\n   * @param {number} value axis value\n   * @param {module:echarts/coord/single/SingleAxis} baseAxis  single Axis used\n   *     the themeRiver.\n   * @return {Object} {dataIndices, nestestValue}\n   */\n  getAxisTooltipData: function (dim, value, baseAxis) {\n    if (!zrUtil.isArray(dim)) {\n      dim = dim ? [dim] : [];\n    }\n\n    var data = this.getData();\n    var layerSeries = this.getLayerSeries();\n    var indices = [];\n    var layerNum = layerSeries.length;\n    var nestestValue;\n\n    for (var i = 0; i < layerNum; ++i) {\n      var minDist = Number.MAX_VALUE;\n      var nearestIdx = -1;\n      var pointNum = layerSeries[i].indices.length;\n\n      for (var j = 0; j < pointNum; ++j) {\n        var theValue = data.get(dim[0], layerSeries[i].indices[j]);\n        var dist = Math.abs(theValue - value);\n\n        if (dist <= minDist) {\n          nestestValue = theValue;\n          minDist = dist;\n          nearestIdx = layerSeries[i].indices[j];\n        }\n      }\n\n      indices.push(nearestIdx);\n    }\n\n    return {\n      dataIndices: indices,\n      nestestValue: nestestValue\n    };\n  },\n\n  /**\n   * @override\n   * @param {number} dataIndex  index of data\n   */\n  formatTooltip: function (dataIndex) {\n    var data = this.getData();\n    var htmlName = data.getName(dataIndex);\n    var htmlValue = data.get(data.mapDimension('value'), dataIndex);\n\n    if (isNaN(htmlValue) || htmlValue == null) {\n      htmlValue = '-';\n    }\n\n    return encodeHTML(htmlName + ' : ' + htmlValue);\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'singleAxis',\n    // gap in axis's orthogonal orientation\n    boundaryGap: ['10%', '10%'],\n    // legendHoverLink: true,\n    singleAxisIndex: 0,\n    animationEasing: 'linear',\n    label: {\n      margin: 4,\n      show: true,\n      position: 'left',\n      color: '#000',\n      fontSize: 11\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    }\n  }\n});\nvar _default = ThemeRiverSeries;\nmodule.exports = _default;","map":{"version":3,"names":["SeriesModel","require","createDimensions","_dimensionHelper","getDimensionTypeByAxis","List","zrUtil","_format","encodeHTML","nest","DATA_NAME_INDEX","ThemeRiverSeries","extend","type","dependencies","nameMap","init","option","superApply","arguments","legendDataProvider","getRawData","fixData","data","rawDataLength","length","dataByName","key","dataItem","entries","layData","map","d","name","dataList","values","layerNum","largestLayer","index","i","len","k","j","timeValue","keyIndex","l","value","getInitialData","ecModel","singleAxisModel","queryComponents","mainType","get","id","axisType","filterData","filter","undefined","nameList","createHashMap","count","push","set","dimensionsInfo","coordDimensions","dimensionsDefine","encodeDefine","single","itemName","list","initData","getLayerSeries","getData","lenCount","indexArr","layerSeries","indices","timeDim","mapDimension","sort","comparer","index1","index2","getAxisTooltipData","dim","baseAxis","isArray","nestestValue","minDist","Number","MAX_VALUE","nearestIdx","pointNum","theValue","dist","Math","abs","dataIndices","formatTooltip","dataIndex","htmlName","getName","htmlValue","isNaN","defaultOption","zlevel","z","coordinateSystem","boundaryGap","singleAxisIndex","animationEasing","label","margin","show","position","color","fontSize","emphasis","_default","module","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/chart/themeRiver/ThemeRiverSeries.js"],"sourcesContent":["var SeriesModel = require(\"../../model/Series\");\n\nvar createDimensions = require(\"../../data/helper/createDimensions\");\n\nvar _dimensionHelper = require(\"../../data/helper/dimensionHelper\");\n\nvar getDimensionTypeByAxis = _dimensionHelper.getDimensionTypeByAxis;\n\nvar List = require(\"../../data/List\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\nvar nest = require(\"../../util/array/nest\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file  Define the themeRiver view's series model\n * @author Deqing Li(annong035@gmail.com)\n */\nvar DATA_NAME_INDEX = 2;\nvar ThemeRiverSeries = SeriesModel.extend({\n  type: 'series.themeRiver',\n  dependencies: ['singleAxis'],\n\n  /**\n   * @readOnly\n   * @type {module:zrender/core/util#HashMap}\n   */\n  nameMap: null,\n\n  /**\n   * @override\n   */\n  init: function (option) {\n    ThemeRiverSeries.superApply(this, 'init', arguments); // Put this function here is for the sake of consistency of code style.\n    // Enable legend selection for each data item\n    // Use a function instead of direct access because data reference may changed\n\n    this.legendDataProvider = function () {\n      return this.getRawData();\n    };\n  },\n\n  /**\n   * If there is no value of a certain point in the time for some event,set it value to 0.\n   *\n   * @param {Array} data  initial data in the option\n   * @return {Array}\n   */\n  fixData: function (data) {\n    var rawDataLength = data.length; // grouped data by name\n\n    var dataByName = nest().key(function (dataItem) {\n      return dataItem[2];\n    }).entries(data); // data group in each layer\n\n    var layData = zrUtil.map(dataByName, function (d) {\n      return {\n        name: d.key,\n        dataList: d.values\n      };\n    });\n    var layerNum = layData.length;\n    var largestLayer = -1;\n    var index = -1;\n\n    for (var i = 0; i < layerNum; ++i) {\n      var len = layData[i].dataList.length;\n\n      if (len > largestLayer) {\n        largestLayer = len;\n        index = i;\n      }\n    }\n\n    for (var k = 0; k < layerNum; ++k) {\n      if (k === index) {\n        continue;\n      }\n\n      var name = layData[k].name;\n\n      for (var j = 0; j < largestLayer; ++j) {\n        var timeValue = layData[index].dataList[j][0];\n        var length = layData[k].dataList.length;\n        var keyIndex = -1;\n\n        for (var l = 0; l < length; ++l) {\n          var value = layData[k].dataList[l][0];\n\n          if (value === timeValue) {\n            keyIndex = l;\n            break;\n          }\n        }\n\n        if (keyIndex === -1) {\n          data[rawDataLength] = [];\n          data[rawDataLength][0] = timeValue;\n          data[rawDataLength][1] = 0;\n          data[rawDataLength][2] = name;\n          rawDataLength++;\n        }\n      }\n    }\n\n    return data;\n  },\n\n  /**\n   * @override\n   * @param  {Object} option  the initial option that user gived\n   * @param  {module:echarts/model/Model} ecModel  the model object for themeRiver option\n   * @return {module:echarts/data/List}\n   */\n  getInitialData: function (option, ecModel) {\n    var singleAxisModel = ecModel.queryComponents({\n      mainType: 'singleAxis',\n      index: this.get('singleAxisIndex'),\n      id: this.get('singleAxisId')\n    })[0];\n    var axisType = singleAxisModel.get('type'); // filter the data item with the value of label is undefined\n\n    var filterData = zrUtil.filter(option.data, function (dataItem) {\n      return dataItem[2] !== undefined;\n    }); // ??? TODO design a stage to transfer data for themeRiver and lines?\n\n    var data = this.fixData(filterData || []);\n    var nameList = [];\n    var nameMap = this.nameMap = zrUtil.createHashMap();\n    var count = 0;\n\n    for (var i = 0; i < data.length; ++i) {\n      nameList.push(data[i][DATA_NAME_INDEX]);\n\n      if (!nameMap.get(data[i][DATA_NAME_INDEX])) {\n        nameMap.set(data[i][DATA_NAME_INDEX], count);\n        count++;\n      }\n    }\n\n    var dimensionsInfo = createDimensions(data, {\n      coordDimensions: ['single'],\n      dimensionsDefine: [{\n        name: 'time',\n        type: getDimensionTypeByAxis(axisType)\n      }, {\n        name: 'value',\n        type: 'float'\n      }, {\n        name: 'name',\n        type: 'ordinal'\n      }],\n      encodeDefine: {\n        single: 0,\n        value: 1,\n        itemName: 2\n      }\n    });\n    var list = new List(dimensionsInfo, this);\n    list.initData(data);\n    return list;\n  },\n\n  /**\n   * The raw data is divided into multiple layers and each layer\n   *     has same name.\n   *\n   * @return {Array.<Array.<number>>}\n   */\n  getLayerSeries: function () {\n    var data = this.getData();\n    var lenCount = data.count();\n    var indexArr = [];\n\n    for (var i = 0; i < lenCount; ++i) {\n      indexArr[i] = i;\n    } // data group by name\n\n\n    var dataByName = nest().key(function (index) {\n      return data.get('name', index);\n    }).entries(indexArr);\n    var layerSeries = zrUtil.map(dataByName, function (d) {\n      return {\n        name: d.key,\n        indices: d.values\n      };\n    });\n    var timeDim = data.mapDimension('single');\n\n    for (var j = 0; j < layerSeries.length; ++j) {\n      layerSeries[j].indices.sort(comparer);\n    }\n\n    function comparer(index1, index2) {\n      return data.get(timeDim, index1) - data.get(timeDim, index2);\n    }\n\n    return layerSeries;\n  },\n\n  /**\n   * Get data indices for show tooltip content\n   *\n   * @param {Array.<string>|string} dim  single coordinate dimension\n   * @param {number} value axis value\n   * @param {module:echarts/coord/single/SingleAxis} baseAxis  single Axis used\n   *     the themeRiver.\n   * @return {Object} {dataIndices, nestestValue}\n   */\n  getAxisTooltipData: function (dim, value, baseAxis) {\n    if (!zrUtil.isArray(dim)) {\n      dim = dim ? [dim] : [];\n    }\n\n    var data = this.getData();\n    var layerSeries = this.getLayerSeries();\n    var indices = [];\n    var layerNum = layerSeries.length;\n    var nestestValue;\n\n    for (var i = 0; i < layerNum; ++i) {\n      var minDist = Number.MAX_VALUE;\n      var nearestIdx = -1;\n      var pointNum = layerSeries[i].indices.length;\n\n      for (var j = 0; j < pointNum; ++j) {\n        var theValue = data.get(dim[0], layerSeries[i].indices[j]);\n        var dist = Math.abs(theValue - value);\n\n        if (dist <= minDist) {\n          nestestValue = theValue;\n          minDist = dist;\n          nearestIdx = layerSeries[i].indices[j];\n        }\n      }\n\n      indices.push(nearestIdx);\n    }\n\n    return {\n      dataIndices: indices,\n      nestestValue: nestestValue\n    };\n  },\n\n  /**\n   * @override\n   * @param {number} dataIndex  index of data\n   */\n  formatTooltip: function (dataIndex) {\n    var data = this.getData();\n    var htmlName = data.getName(dataIndex);\n    var htmlValue = data.get(data.mapDimension('value'), dataIndex);\n\n    if (isNaN(htmlValue) || htmlValue == null) {\n      htmlValue = '-';\n    }\n\n    return encodeHTML(htmlName + ' : ' + htmlValue);\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'singleAxis',\n    // gap in axis's orthogonal orientation\n    boundaryGap: ['10%', '10%'],\n    // legendHoverLink: true,\n    singleAxisIndex: 0,\n    animationEasing: 'linear',\n    label: {\n      margin: 4,\n      show: true,\n      position: 'left',\n      color: '#000',\n      fontSize: 11\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    }\n  }\n});\nvar _default = ThemeRiverSeries;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}