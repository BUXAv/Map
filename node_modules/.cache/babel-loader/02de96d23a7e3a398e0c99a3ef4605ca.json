{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar singleAxisHelper = require(\"../../coord/single/singleAxisHelper\");\n\nvar AxisView = require(\"./AxisView\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttr = 'splitLine';\nvar SingleAxisView = AxisView.extend({\n  type: 'singleAxis',\n  axisPointerClass: 'SingleAxisPointer',\n  render: function (axisModel, ecModel, api, payload) {\n    var group = this.group;\n    group.removeAll();\n    var layout = singleAxisHelper.layout(axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    group.add(axisBuilder.getGroup());\n\n    if (axisModel.get(selfBuilderAttr + '.show')) {\n      this['_' + selfBuilderAttr](axisModel);\n    }\n\n    SingleAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n  },\n  _splitLine: function (axisModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineWidth = lineStyleModel.get('width');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var gridRect = axisModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var splitLines = [];\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = [];\n\n    for (var i = 0; i < ticksCoords.length; ++i) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line(graphic.subPixelOptimizeLine({\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: {\n          lineWidth: lineWidth\n        },\n        silent: true\n      })));\n    }\n\n    for (var i = 0; i < splitLines.length; ++i) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: {\n          stroke: lineColors[i % lineColors.length],\n          lineDash: lineStyleModel.getLineDash(lineWidth),\n          lineWidth: lineWidth\n        },\n        silent: true\n      }));\n    }\n  }\n});\nvar _default = SingleAxisView;\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","AxisBuilder","graphic","singleAxisHelper","AxisView","axisBuilderAttrs","selfBuilderAttr","SingleAxisView","extend","type","axisPointerClass","render","axisModel","ecModel","api","payload","group","removeAll","layout","axisBuilder","each","add","getGroup","get","superCall","_splitLine","axis","scale","isBlank","splitLineModel","getModel","lineStyleModel","lineWidth","lineColors","Array","gridRect","coordinateSystem","getRect","isHorizontal","splitLines","lineCount","ticksCoords","getTicksCoords","tickModel","p1","p2","i","length","tickCoord","toGlobalCoord","coord","y","height","x","width","colorIndex","push","Line","subPixelOptimizeLine","shape","x1","y1","x2","y2","style","silent","mergePath","stroke","lineDash","getLineDash","_default","module","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/component/axis/SingleAxisView.js"],"sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar singleAxisHelper = require(\"../../coord/single/singleAxisHelper\");\n\nvar AxisView = require(\"./AxisView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttr = 'splitLine';\nvar SingleAxisView = AxisView.extend({\n  type: 'singleAxis',\n  axisPointerClass: 'SingleAxisPointer',\n  render: function (axisModel, ecModel, api, payload) {\n    var group = this.group;\n    group.removeAll();\n    var layout = singleAxisHelper.layout(axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    group.add(axisBuilder.getGroup());\n\n    if (axisModel.get(selfBuilderAttr + '.show')) {\n      this['_' + selfBuilderAttr](axisModel);\n    }\n\n    SingleAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n  },\n  _splitLine: function (axisModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineWidth = lineStyleModel.get('width');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var gridRect = axisModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var splitLines = [];\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = [];\n\n    for (var i = 0; i < ticksCoords.length; ++i) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line(graphic.subPixelOptimizeLine({\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: {\n          lineWidth: lineWidth\n        },\n        silent: true\n      })));\n    }\n\n    for (var i = 0; i < splitLines.length; ++i) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: {\n          stroke: lineColors[i % lineColors.length],\n          lineDash: lineStyleModel.getLineDash(lineWidth),\n          lineWidth: lineWidth\n        },\n        silent: true\n      }));\n    }\n  }\n});\nvar _default = SingleAxisView;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}