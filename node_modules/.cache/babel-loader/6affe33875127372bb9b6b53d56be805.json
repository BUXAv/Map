{"ast":null,"code":"var numberUtil = require(\"../util/number\");\n\nvar formatUtil = require(\"../util/format\");\n\nvar Scale = require(\"./Scale\");\n\nvar helper = require(\"./helper\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Interval scale\n * @module echarts/scale/Interval\n */\n\n\nvar roundNumber = numberUtil.round;\n/**\n * @alias module:echarts/coord/scale/Interval\n * @constructor\n */\n\nvar IntervalScale = Scale.extend({\n  type: 'interval',\n  _interval: 0,\n  _intervalPrecision: 2,\n  setExtent: function (start, end) {\n    var thisExtent = this._extent; //start,end may be a Number like '25',so...\n\n    if (!isNaN(start)) {\n      thisExtent[0] = parseFloat(start);\n    }\n\n    if (!isNaN(end)) {\n      thisExtent[1] = parseFloat(end);\n    }\n  },\n  unionExtent: function (other) {\n    var extent = this._extent;\n    other[0] < extent[0] && (extent[0] = other[0]);\n    other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes\n\n    IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n  },\n\n  /**\n   * Get interval\n   */\n  getInterval: function () {\n    return this._interval;\n  },\n\n  /**\n   * Set interval\n   */\n  setInterval: function (interval) {\n    this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent\n    // We assume user wan't to set both interval, min, max to get a better result\n\n    this._niceExtent = this._extent.slice();\n    this._intervalPrecision = helper.getIntervalPrecision(interval);\n  },\n\n  /**\n   * @return {Array.<number>}\n   */\n  getTicks: function () {\n    return helper.intervalScaleGetTicks(this._interval, this._extent, this._niceExtent, this._intervalPrecision);\n  },\n\n  /**\n   * @param {number} data\n   * @param {Object} [opt]\n   * @param {number|string} [opt.precision] If 'auto', use nice presision.\n   * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.\n   * @return {string}\n   */\n  getLabel: function (data, opt) {\n    if (data == null) {\n      return '';\n    }\n\n    var precision = opt && opt.precision;\n\n    if (precision == null) {\n      precision = numberUtil.getPrecisionSafe(data) || 0;\n    } else if (precision === 'auto') {\n      // Should be more precise then tick.\n      precision = this._intervalPrecision;\n    } // (1) If `precision` is set, 12.005 should be display as '12.00500'.\n    // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.\n\n\n    data = roundNumber(data, precision, true);\n    return formatUtil.addCommas(data);\n  },\n\n  /**\n   * Update interval and extent of intervals for nice ticks\n   *\n   * @param {number} [splitNumber = 5] Desired number of ticks\n   * @param {number} [minInterval]\n   * @param {number} [maxInterval]\n   */\n  niceTicks: function (splitNumber, minInterval, maxInterval) {\n    splitNumber = splitNumber || 5;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (!isFinite(span)) {\n      return;\n    } // User may set axis min 0 and data are all negative\n    // FIXME If it needs to reverse ?\n\n\n    if (span < 0) {\n      span = -span;\n      extent.reverse();\n    }\n\n    var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);\n    this._intervalPrecision = result.intervalPrecision;\n    this._interval = result.interval;\n    this._niceExtent = result.niceTickExtent;\n  },\n\n  /**\n   * Nice extent.\n   * @param {Object} opt\n   * @param {number} [opt.splitNumber = 5] Given approx tick number\n   * @param {boolean} [opt.fixMin=false]\n   * @param {boolean} [opt.fixMax=false]\n   * @param {boolean} [opt.minInterval]\n   * @param {boolean} [opt.maxInterval]\n   */\n  niceExtent: function (opt) {\n    var extent = this._extent; // If extent start and end are same, expand them\n\n    if (extent[0] === extent[1]) {\n      if (extent[0] !== 0) {\n        // Expand extent\n        var expandSize = extent[0]; // In the fowllowing case\n        //      Axis has been fixed max 100\n        //      Plus data are all 100 and axis extent are [100, 100].\n        // Extend to the both side will cause expanded max is larger than fixed max.\n        // So only expand to the smaller side.\n\n        if (!opt.fixMax) {\n          extent[1] += expandSize / 2;\n          extent[0] -= expandSize / 2;\n        } else {\n          extent[0] -= expandSize / 2;\n        }\n      } else {\n        extent[1] = 1;\n      }\n    }\n\n    var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]\n\n    if (!isFinite(span)) {\n      extent[0] = 0;\n      extent[1] = 1;\n    }\n\n    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;\n\n    var interval = this._interval;\n\n    if (!opt.fixMin) {\n      extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);\n    }\n\n    if (!opt.fixMax) {\n      extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);\n    }\n  }\n});\n/**\n * @return {module:echarts/scale/Time}\n */\n\nIntervalScale.create = function () {\n  return new IntervalScale();\n};\n\nvar _default = IntervalScale;\nmodule.exports = _default;","map":{"version":3,"names":["numberUtil","require","formatUtil","Scale","helper","roundNumber","round","IntervalScale","extend","type","_interval","_intervalPrecision","setExtent","start","end","thisExtent","_extent","isNaN","parseFloat","unionExtent","other","extent","prototype","call","getInterval","setInterval","interval","_niceExtent","slice","getIntervalPrecision","getTicks","intervalScaleGetTicks","getLabel","data","opt","precision","getPrecisionSafe","addCommas","niceTicks","splitNumber","minInterval","maxInterval","span","isFinite","reverse","result","intervalScaleNiceTicks","intervalPrecision","niceTickExtent","niceExtent","expandSize","fixMax","fixMin","Math","floor","ceil","create","_default","module","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/scale/Interval.js"],"sourcesContent":["var numberUtil = require(\"../util/number\");\n\nvar formatUtil = require(\"../util/format\");\n\nvar Scale = require(\"./Scale\");\n\nvar helper = require(\"./helper\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Interval scale\n * @module echarts/scale/Interval\n */\nvar roundNumber = numberUtil.round;\n/**\n * @alias module:echarts/coord/scale/Interval\n * @constructor\n */\n\nvar IntervalScale = Scale.extend({\n  type: 'interval',\n  _interval: 0,\n  _intervalPrecision: 2,\n  setExtent: function (start, end) {\n    var thisExtent = this._extent; //start,end may be a Number like '25',so...\n\n    if (!isNaN(start)) {\n      thisExtent[0] = parseFloat(start);\n    }\n\n    if (!isNaN(end)) {\n      thisExtent[1] = parseFloat(end);\n    }\n  },\n  unionExtent: function (other) {\n    var extent = this._extent;\n    other[0] < extent[0] && (extent[0] = other[0]);\n    other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes\n\n    IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n  },\n\n  /**\n   * Get interval\n   */\n  getInterval: function () {\n    return this._interval;\n  },\n\n  /**\n   * Set interval\n   */\n  setInterval: function (interval) {\n    this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent\n    // We assume user wan't to set both interval, min, max to get a better result\n\n    this._niceExtent = this._extent.slice();\n    this._intervalPrecision = helper.getIntervalPrecision(interval);\n  },\n\n  /**\n   * @return {Array.<number>}\n   */\n  getTicks: function () {\n    return helper.intervalScaleGetTicks(this._interval, this._extent, this._niceExtent, this._intervalPrecision);\n  },\n\n  /**\n   * @param {number} data\n   * @param {Object} [opt]\n   * @param {number|string} [opt.precision] If 'auto', use nice presision.\n   * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.\n   * @return {string}\n   */\n  getLabel: function (data, opt) {\n    if (data == null) {\n      return '';\n    }\n\n    var precision = opt && opt.precision;\n\n    if (precision == null) {\n      precision = numberUtil.getPrecisionSafe(data) || 0;\n    } else if (precision === 'auto') {\n      // Should be more precise then tick.\n      precision = this._intervalPrecision;\n    } // (1) If `precision` is set, 12.005 should be display as '12.00500'.\n    // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.\n\n\n    data = roundNumber(data, precision, true);\n    return formatUtil.addCommas(data);\n  },\n\n  /**\n   * Update interval and extent of intervals for nice ticks\n   *\n   * @param {number} [splitNumber = 5] Desired number of ticks\n   * @param {number} [minInterval]\n   * @param {number} [maxInterval]\n   */\n  niceTicks: function (splitNumber, minInterval, maxInterval) {\n    splitNumber = splitNumber || 5;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (!isFinite(span)) {\n      return;\n    } // User may set axis min 0 and data are all negative\n    // FIXME If it needs to reverse ?\n\n\n    if (span < 0) {\n      span = -span;\n      extent.reverse();\n    }\n\n    var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);\n    this._intervalPrecision = result.intervalPrecision;\n    this._interval = result.interval;\n    this._niceExtent = result.niceTickExtent;\n  },\n\n  /**\n   * Nice extent.\n   * @param {Object} opt\n   * @param {number} [opt.splitNumber = 5] Given approx tick number\n   * @param {boolean} [opt.fixMin=false]\n   * @param {boolean} [opt.fixMax=false]\n   * @param {boolean} [opt.minInterval]\n   * @param {boolean} [opt.maxInterval]\n   */\n  niceExtent: function (opt) {\n    var extent = this._extent; // If extent start and end are same, expand them\n\n    if (extent[0] === extent[1]) {\n      if (extent[0] !== 0) {\n        // Expand extent\n        var expandSize = extent[0]; // In the fowllowing case\n        //      Axis has been fixed max 100\n        //      Plus data are all 100 and axis extent are [100, 100].\n        // Extend to the both side will cause expanded max is larger than fixed max.\n        // So only expand to the smaller side.\n\n        if (!opt.fixMax) {\n          extent[1] += expandSize / 2;\n          extent[0] -= expandSize / 2;\n        } else {\n          extent[0] -= expandSize / 2;\n        }\n      } else {\n        extent[1] = 1;\n      }\n    }\n\n    var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]\n\n    if (!isFinite(span)) {\n      extent[0] = 0;\n      extent[1] = 1;\n    }\n\n    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;\n\n    var interval = this._interval;\n\n    if (!opt.fixMin) {\n      extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);\n    }\n\n    if (!opt.fixMax) {\n      extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);\n    }\n  }\n});\n/**\n * @return {module:echarts/scale/Time}\n */\n\nIntervalScale.create = function () {\n  return new IntervalScale();\n};\n\nvar _default = IntervalScale;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}