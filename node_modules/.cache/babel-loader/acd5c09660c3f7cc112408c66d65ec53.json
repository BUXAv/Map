{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar AxisView = require(\"./AxisView\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitLine', 'splitArea'];\n\nvar _default = AxisView.extend({\n  type: 'radiusAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (radiusAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!radiusAxisModel.get('show')) {\n      return;\n    }\n\n    var radiusAxis = radiusAxisModel.axis;\n    var polar = radiusAxis.polar;\n    var angleAxis = polar.getAngleAxis();\n    var ticksCoords = radiusAxis.getTicksCoords();\n    var axisAngle = angleAxis.getExtent()[0];\n    var radiusExtent = radiusAxis.getExtent();\n    var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\n    var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    this.group.add(axisBuilder.getGroup());\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (radiusAxisModel.get(name + '.show') && !radiusAxis.scale.isBlank()) {\n        this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    var splitLineModel = radiusAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Circle({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: ticksCoords[i].coord\n        },\n        silent: true\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length],\n          fill: null\n        }, lineStyleModel.getLineStyle()),\n        silent: true\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    if (!ticksCoords.length) {\n      return;\n    }\n\n    var splitAreaModel = radiusAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var prevRadius = ticksCoords[0].coord;\n\n    for (var i = 1; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: prevRadius,\n          r: ticksCoords[i].coord,\n          startAngle: 0,\n          endAngle: Math.PI * 2\n        },\n        silent: true\n      }));\n      prevRadius = ticksCoords[i].coord;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n/**\n * @inner\n */\n\n\nfunction layoutAxis(polar, radiusAxisModel, axisAngle) {\n  return {\n    position: [polar.cx, polar.cy],\n    rotation: axisAngle / 180 * Math.PI,\n    labelDirection: -1,\n    tickDirection: -1,\n    nameDirection: 1,\n    labelRotate: radiusAxisModel.getModel('axisLabel').get('rotate'),\n    // Over splitLine and splitArea\n    z2: 1\n  };\n}\n\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","graphic","AxisBuilder","AxisView","axisBuilderAttrs","selfBuilderAttrs","_default","extend","type","axisPointerClass","render","radiusAxisModel","ecModel","group","removeAll","get","radiusAxis","axis","polar","angleAxis","getAngleAxis","ticksCoords","getTicksCoords","axisAngle","getExtent","radiusExtent","layout","layoutAxis","axisBuilder","each","add","getGroup","name","scale","isBlank","_splitLine","splitLineModel","getModel","lineStyleModel","lineColors","lineCount","Array","splitLines","i","length","colorIndex","push","Circle","shape","cx","cy","r","coord","silent","mergePath","style","defaults","stroke","fill","getLineStyle","_splitArea","splitAreaModel","areaStyleModel","areaColors","splitAreas","prevRadius","Sector","r0","startAngle","endAngle","Math","PI","getAreaStyle","position","rotation","labelDirection","tickDirection","nameDirection","labelRotate","z2","module","exports"],"sources":["C:/Users/W/Desktop/vue_map/node_modules/echarts/lib/component/axis/RadiusAxisView.js"],"sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar AxisView = require(\"./AxisView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitLine', 'splitArea'];\n\nvar _default = AxisView.extend({\n  type: 'radiusAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (radiusAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!radiusAxisModel.get('show')) {\n      return;\n    }\n\n    var radiusAxis = radiusAxisModel.axis;\n    var polar = radiusAxis.polar;\n    var angleAxis = polar.getAngleAxis();\n    var ticksCoords = radiusAxis.getTicksCoords();\n    var axisAngle = angleAxis.getExtent()[0];\n    var radiusExtent = radiusAxis.getExtent();\n    var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\n    var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    this.group.add(axisBuilder.getGroup());\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (radiusAxisModel.get(name + '.show') && !radiusAxis.scale.isBlank()) {\n        this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    var splitLineModel = radiusAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Circle({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: ticksCoords[i].coord\n        },\n        silent: true\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length],\n          fill: null\n        }, lineStyleModel.getLineStyle()),\n        silent: true\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    if (!ticksCoords.length) {\n      return;\n    }\n\n    var splitAreaModel = radiusAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var prevRadius = ticksCoords[0].coord;\n\n    for (var i = 1; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: prevRadius,\n          r: ticksCoords[i].coord,\n          startAngle: 0,\n          endAngle: Math.PI * 2\n        },\n        silent: true\n      }));\n      prevRadius = ticksCoords[i].coord;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n/**\n * @inner\n */\n\n\nfunction layoutAxis(polar, radiusAxisModel, axisAngle) {\n  return {\n    position: [polar.cx, polar.cy],\n    rotation: axisAngle / 180 * Math.PI,\n    labelDirection: -1,\n    tickDirection: -1,\n    nameDirection: 1,\n    labelRotate: radiusAxisModel.getModel('axisLabel').get('rotate'),\n    // Over splitLine and splitArea\n    z2: 1\n  };\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}